/********************************************
 *            AUTOGENERATED FILE            *
 *             DO NOT MODIFY IT             *
 *                                          *
 * To add new commands :                    *
 *  - Modify ../Xml/commands.xml file       *
 *  - Re-run generateCommandsList.py script *
 *                                          *
 ********************************************/

#ifndef _ARCOMMANDS_READWRITE_H_
#define _ARCOMMANDS_READWRITE_H_ (1)

#include <inttypes.h>
#include <string.h>
#include <stdlib.h>

// ------- //
// WRITERS //
// ------- //

// Add an 8 bit value to the buffer
// Returns -1 if the buffer is not big enough
// Returns the new offset in the buffer on success
int32_t ARCOMMANDS_ReadWrite_AddU8ToBuffer (uint8_t *buffer, uint8_t newVal, int32_t oldOffset, int32_t buffCap);

// Add a 16 bit value to the buffer
// Returns -1 if the buffer is not big enough
// Returns the new offset in the buffer on success
int32_t ARCOMMANDS_ReadWrite_AddU16ToBuffer (uint8_t *buffer, uint16_t newVal, int32_t oldOffset, int32_t buffCap);

// Add a 32 bit value to the buffer
// Returns -1 if the buffer is not big enough
// Returns the new offset in the buffer on success
int32_t ARCOMMANDS_ReadWrite_AddU32ToBuffer (uint8_t *buffer, uint32_t newVal, int32_t oldOffset, int32_t buffCap);

// Add a 64 bit value to the buffer
// Returns -1 if the buffer is not big enough
// Returns the new offset in the buffer on success
int32_t ARCOMMANDS_ReadWrite_AddU64ToBuffer (uint8_t *buffer, uint64_t newVal, int32_t oldOffset, int32_t buffCap);

// Add a NULL Terminated String to the buffer
// Returns -1 if the buffer is not big enough
// Returns the new offset in the buffer on success
int32_t ARCOMMANDS_ReadWrite_AddStringToBuffer (uint8_t *buffer, const char *newVal, int32_t oldOffset, int32_t buffCap);

// Add a float to the buffer
// Returns -1 if the buffer is not big enough
// Returns the new offset in the buffer on success
int32_t ARCOMMANDS_ReadWrite_AddFloatToBuffer (uint8_t *buffer, float newVal, int32_t oldOffset, int32_t buffCap);

// Add a double to the buffer
// Returns -1 if the buffer is not big enough
// Returns the new offset in the buffer on success
int32_t ARCOMMANDS_ReadWrite_AddDoubleToBuffer (uint8_t *buffer, double newVal, int32_t oldOffset, int32_t buffCap);

// ------- //
// READERS //
// ------- //

// Read an 8 bit value from the buffer
// On error, return zero and set *error to 1, else set *error to 0
uint8_t ARCOMMANDS_ReadWrite_Read8FromBuffer (const uint8_t *buffer, int32_t capacity, int32_t *offset, int32_t *error);

// Read a 16 bit value from the buffer
// On error, return zero and set *error to 1, else set *error to 0
uint16_t ARCOMMANDS_ReadWrite_Read16FromBuffer (const uint8_t *buffer, int32_t capacity, int32_t *offset, int32_t *error);

// Read a 32 bit value from the buffer
// On error, return zero and set *error to 1, else set *error to 0
uint32_t ARCOMMANDS_ReadWrite_Read32FromBuffer (const uint8_t *buffer, int32_t capacity, int32_t *offset, int32_t *error);

// Read a 64 bit value from the buffer
// On error, return zero and set *error to 1, else set *error to 0
uint64_t ARCOMMANDS_ReadWrite_Read64FromBuffer (const uint8_t *buffer, int32_t capacity, int32_t *offset, int32_t *error);

// Read a float value from the buffer
// On error, return zero and set *error to 1, else set *error to 0
float ARCOMMANDS_ReadWrite_ReadFloatFromBuffer (const uint8_t *buffer, int32_t capacity, int32_t *offset, int32_t *error);

// Read a double value from the buffer
// On error, return zero and set *error to 1, else set *error to 0
double ARCOMMANDS_ReadWrite_ReadDoubleFromBuffer (const uint8_t *buffer, int32_t capacity, int32_t *offset, int32_t *error);

// Read a string value from the buffer
// On error, return NULL and set *error to 1, else set *error to 0
const char* ARCOMMANDS_ReadWrite_ReadStringFromBuffer (const uint8_t *buffer, int32_t capacity, int32_t *offset, int32_t *error);

// -------- //
// TOSTRING //
// -------- //

// Write a string in a buffer
// On error, return -1, else return offset in string
int ARCOMMANDS_ReadWrite_WriteString (const char *stringToWrite, char *output, int outputLen, int outputOffset);

// Write a string in a buffer from an uint8_t arg
// On error, return -1, else return offset in string
int ARCOMMANDS_ReadWrite_PrintU8 (const char *name, uint8_t arg, char *output, int outputLen, int outputOffset);

// Write a string in a buffer from an int8_t arg
// On error, return -1, else return offset in string
int ARCOMMANDS_ReadWrite_PrintI8 (const char *name, int8_t arg, char *output, int outputLen, int outputOffset);

// Write a string in a buffer from an uint16_t arg
// On error, return -1, else return offset in string
int ARCOMMANDS_ReadWrite_PrintU16 (const char *name, uint16_t arg, char *output, int outputLen, int outputOffset);

// Write a string in a buffer from an int16_t arg
// On error, return -1, else return offset in string
int ARCOMMANDS_ReadWrite_PrintI16 (const char *name, int16_t arg, char *output, int outputLen, int outputOffset);

// Write a string in a buffer from an uint32_t arg
// On error, return -1, else return offset in string
int ARCOMMANDS_ReadWrite_PrintU32 (const char *name, uint32_t arg, char *output, int outputLen, int outputOffset);

// Write a string in a buffer from an int32_t arg
// On error, return -1, else return offset in string
int ARCOMMANDS_ReadWrite_PrintI32 (const char *name, int32_t arg, char *output, int outputLen, int outputOffset);

// Write a string in a buffer from an uint64_t arg
// On error, return -1, else return offset in string
int ARCOMMANDS_ReadWrite_PrintU64 (const char *name, uint64_t arg, char *output, int outputLen, int outputOffset);

// Write a string in a buffer from float arg
// On error, return -1, else return offset in string
int ARCOMMANDS_ReadWrite_PrintFloat (const char *name, float arg, char *output, int outputLen, int outputOffset);

// Write a string in a buffer from a double arg
// On error, return -1, else return offset in string
int ARCOMMANDS_ReadWrite_PrintDouble (const char *name, double arg, char *output, int outputLen, int outputOffset);

// Write a string in a buffer from a string arg
// On error, return -1, else return offset in string
int ARCOMMANDS_ReadWrite_PrintString (const char *name, const char *arg, char *output, int outputLen, int outputOffset);


#endif /* _ARCOMMANDS_READWRITE_H_ */
