/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateFeatureControllers.py script         *
 *                                                        *
 **********************************************************/

/**
* @file ARCONTROLLER_Feature.h
* @brief Feature controller allow to send command related of wifi Feature.
*/

#ifndef _ARCONTROLLER_FEATURE_PRIVATE_H_
#define _ARCONTROLLER_FEATURE_PRIVATE_H_

#include <libARSAL/ARSAL_Mutex.h>
#include <libARCommands/ARCommands.h>
#include <libARController/ARCONTROLLER_Feature.h>

void ARCONTROLLER_Feature_DeleteCommandsDictionary (ARCONTROLLER_DICTIONARY_COMMANDS_t **dictionary);

ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_Feature_NewCommandsElement (int commandKey, eARCONTROLLER_ERROR *error);
void ARCONTROLLER_Feature_DeleteCommandsElement (ARCONTROLLER_DICTIONARY_COMMANDS_t **dictCmdElement);

void ARCONTROLLER_Feature_DeleteElement (ARCONTROLLER_DICTIONARY_ELEMENT_t **element);

void ARCONTROLLER_Feature_DeleteArgumentsDictionary (ARCONTROLLER_DICTIONARY_ARG_t **dictionary);

void ARCONTROLLER_Feature_AddElement (ARCONTROLLER_DICTIONARY_ELEMENT_t **elementDict, ARCONTROLLER_DICTIONARY_ELEMENT_t *newElement);

/*******************************
 * --- FEATURE generic --- 
 ******************************/
/**
 * @brief Private part of ARCONTROLLER_FEATURE_Generic_t.
 */
struct ARCONTROLLER_FEATURE_Generic_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
};

/**
 * @brief Send a command <code>Default</code> in project <code>Generic</code>
 * default
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Generic_SendDefault (ARCONTROLLER_FEATURE_Generic_t *feature);

/**
 * @brief Send a command <code>SetDroneSettings</code> in project <code>Generic</code>
 * Set several drone settings in only one command.
 * @param feature feature owning the commands
 * @param settings 
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Generic_SendSetDroneSettings (ARCONTROLLER_FEATURE_Generic_t *feature, ARCOMMANDS_Generic_DroneSettings_t * settings);

/**
 * @brief callback used when the command <code>DroneSettingsChanged</code> is decoded
 * @param feature The feature controller registred
 * @param settings 
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Generic_DroneSettingsChangedCallback (ARCOMMANDS_Generic_DroneSettingsChanged_t * _settings, void *customData);


/*******************************
 * --- FEATURE animation --- 
 ******************************/
/**
 * @brief Private part of ARCONTROLLER_FEATURE_Animation_t.
 */
struct ARCONTROLLER_FEATURE_Animation_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
};

/**
 * @brief Send a command <code>Cancel</code> in project <code>Animation</code>
 * Cancel current animation.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_SendCancel (ARCONTROLLER_FEATURE_Animation_t *feature);

/**
 * @brief Send a command <code>StartFlip</code> in project <code>Animation</code>
 * Start a flip animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * @param feature feature owning the commands
 * @param type Type of the flip Animation flip type.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_SendStartFlip (ARCONTROLLER_FEATURE_Animation_t *feature, eARCOMMANDS_ANIMATION_FLIP_TYPE type);

/**
 * @brief Send a command <code>StartHorizontalPanorama</code> in project <code>Animation</code>
 * Start an horizontal panorama animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone horizontaly rotates on itself.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Horizontal panorama configuration parameter.
 * @param rotation_angle Desired rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise. Not used when rotation angle of provided_params param is 0.
 * @param rotation_speed The desired rotation speed of the anim in rad/s Not used when rotation speed of provided_params param is 0.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_SendStartHorizontalPanorama (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float rotation_angle, float rotation_speed);

/**
 * @brief Send a command <code>StartDronie</code> in project <code>Animation</code>
 * Start a dronie animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone flies away on a given distance with a computed angle.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Dronie animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param distance Desired dronie distance in m (length of the hypotenuse). Not used when distance of provided_params param is 0.
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_SendStartDronie (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float distance, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief Send a command <code>StartHorizontalReveal</code> in project <code>Animation</code>
 * Start an horizontal reveal animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone starts looking down, then moves forward while slowly looking at the horizon.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Horizontal reveal animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param distance Desired distance in m. Not used when distance of provided_params param is 0.
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_SendStartHorizontalReveal (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float distance, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief Send a command <code>StartVerticalReveal</code> in project <code>Animation</code>
 * Start a vertical reveal animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone starts looking down, then moves up while slowly looking at the horizon. When it reaches its target altitude, it rotates on itself to do a panorama.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Vertical reveal animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param vertical_distance Desired vertical distance in m. Not used when vertical distance of provided_params param is 0.
 * @param rotation_angle Desired rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise. Not used when rotation angle of provided_params param is 0.
 * @param rotation_speed The desired rotation speed of the anim in rad/s Not used when rotation speed of provided_params param is 0.
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_SendStartVerticalReveal (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float vertical_distance, float rotation_angle, float rotation_speed, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief Send a command <code>StartSpiral</code> in project <code>Animation</code>
 * Start a spiral animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone circles around its target.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Spiral animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param radius_variation Desired relative radius variation in m. A value of 2 means that the ending radius will be twice as big as the starting radius. A value of -2 means that the ending radius will half of the size of the starting radius. A value of 1 means that the radius will not change during the animation. Not used when radius variation of provided_params param is 0.
 * @param vertical_distance Desired vertical distance in m. If negative, the spiral will be directed to the ground. Not used when vertical distance of provided_params param is 0.
 * @param revolution_nb The number of revolution (in turn). Positive value makes a clockwise spiral, negative is anti-clockwise. Example: 1.5 makes an entire turn plus half of a turn
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_SendStartSpiral (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float radius_variation, float vertical_distance, float revolution_nb, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief Send a command <code>StartParabola</code> in project <code>Animation</code>
 * Start a parabola animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone makes a parabola on top of its target and ends on the other side of it.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Parabola animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param vertical_distance Desired vertical distance in m. Not used when vertical distance of provided_params param is 0.
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_SendStartParabola (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float vertical_distance, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief Send a command <code>StartCandle</code> in project <code>Animation</code>
 * Start a candle animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone flies horizontally in direction of the target then flies up.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Candle animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param vertical_distance Desired vertical distance in m. Not used when vertical distance of provided_params param is 0.
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_SendStartCandle (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float vertical_distance, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief Send a command <code>StartDollySlide</code> in project <code>Animation</code>
 * Start a dolly slide animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone slides horizontally.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Dolly slide animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param angle Desired drone-target-destination angle in rad. Not used when angle of provided_params param is 0.
 * @param horizontal_distance Desired horizontal distance in m.. Not used when angle of provided_params param is 0.
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_SendStartDollySlide (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float angle, float horizontal_distance, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief callback used when the command <code>Availability</code> is decoded
 * @param feature The feature controller registred
 * @param values Bitfield of available animation types Animation type.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Animation_AvailabilityCallback (uint32_t _values, void *customData);

/**
 * @brief callback used when the command <code>State</code> is decoded
 * @param feature The feature controller registred
 * @param type Type of the animation. None if no animation is currently running or canceling. Animation type.
 * @param percent Percentage of the animation (only accurate if type is not none) (from 0 to 100).
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Animation_StateCallback (eARCOMMANDS_ANIMATION_TYPE _type, uint8_t _percent, void *customData);

/**
 * @brief callback used when the command <code>FlipState</code> is decoded
 * @param feature The feature controller registred
 * @param state State of the animation Animation state.
 * @param type Type of the flip (only accurate if state is not idle) Animation flip type.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Animation_FlipStateCallback (eARCOMMANDS_ANIMATION_STATE _state, eARCOMMANDS_ANIMATION_FLIP_TYPE _type, void *customData);

/**
 * @brief callback used when the command <code>HorizontalPanoramaState</code> is decoded
 * @param feature The feature controller registred
 * @param state State of the animation Animation state.
 * @param rotation_angle Rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise. (only accurate if state is not idle)
 * @param rotation_speed The rotation speed of the anim in rad/s (only accurate if state is not idle)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Animation_HorizontalPanoramaStateCallback (eARCOMMANDS_ANIMATION_STATE _state, float _rotation_angle, float _rotation_speed, void *customData);

/**
 * @brief callback used when the command <code>DronieState</code> is decoded
 * @param feature The feature controller registred
 * @param state State of the animation Animation state.
 * @param speed Speed in m/s. (only accurate if state is not idle)
 * @param distance Dronie distance in m. (only accurate if state is not idle)
 * @param play_mode Play mode. (only accurate if state is not idle) Animation play mode.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Animation_DronieStateCallback (eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, void *customData);

/**
 * @brief callback used when the command <code>HorizontalRevealState</code> is decoded
 * @param feature The feature controller registred
 * @param state State of the animation Animation state.
 * @param speed Speed in m/s. (only accurate if state is not idle)
 * @param distance Distance in m. (only accurate if state is not idle)
 * @param play_mode Play mode. (only accurate if state is not idle) Animation play mode.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Animation_HorizontalRevealStateCallback (eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, void *customData);

/**
 * @brief callback used when the command <code>VerticalRevealState</code> is decoded
 * @param feature The feature controller registred
 * @param state State of the animation Animation state.
 * @param speed Speed in m/s. (only accurate if state is not idle)
 * @param vertical_distance Vertical distance in m. (only accurate if state is not idle)
 * @param rotation_angle Rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise. (only accurate if state is not idle)
 * @param rotation_speed The rotation speed of the anim in rad/s (only accurate if state is not idle)
 * @param play_mode Play mode. (only accurate if state is not idle) Animation play mode.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Animation_VerticalRevealStateCallback (eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _vertical_distance, float _rotation_angle, float _rotation_speed, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, void *customData);

/**
 * @brief callback used when the command <code>SpiralState</code> is decoded
 * @param feature The feature controller registred
 * @param state State of the animation Animation state.
 * @param speed Speed in m/s. (only accurate if state is not idle)
 * @param radius_variation Relative radius variation in m. (only accurate if state is not idle)
 * @param vertical_distance Vertical distance in m. Negative value means the animation is directed toward the ground. (only accurate if state is not idle)
 * @param revolution_nb The number of revolution (in turn). (only accurate if state is not idle)
 * @param play_mode Play mode. (only accurate if state is not idle) Animation play mode.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Animation_SpiralStateCallback (eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _radius_variation, float _vertical_distance, float _revolution_nb, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, void *customData);

/**
 * @brief callback used when the command <code>ParabolaState</code> is decoded
 * @param feature The feature controller registred
 * @param state State of the animation Animation state.
 * @param speed Speed in m/s. (only accurate if state is not idle)
 * @param vertical_distance Vertical distance in m. (only accurate if state is not idle)
 * @param play_mode Play mode. (only accurate if state is not idle) Animation play mode.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Animation_ParabolaStateCallback (eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _vertical_distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, void *customData);

/**
 * @brief callback used when the command <code>CandleState</code> is decoded
 * @param feature The feature controller registred
 * @param state State of the animation Animation state.
 * @param speed Speed in m/s. (only accurate if state is not idle)
 * @param vertical_distance Vertical distance in m. (only accurate if state is not idle)
 * @param play_mode Play mode. (only accurate if state is not idle) Animation play mode.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Animation_CandleStateCallback (eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _vertical_distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, void *customData);

/**
 * @brief callback used when the command <code>DollySlideState</code> is decoded
 * @param feature The feature controller registred
 * @param state State of the animation Animation state.
 * @param speed Speed in m/s. (only accurate if state is not idle)
 * @param angle Drone-target-destination angle in rad. (only accurate if state is not idle)
 * @param horizontal_distance Horizontal distance in m. (only accurate if state is not idle)
 * @param play_mode Play mode. (only accurate if state is not idle) Animation play mode.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Animation_DollySlideStateCallback (eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _angle, float _horizontal_distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Animation_NewCmdElementAvailability (ARCONTROLLER_FEATURE_Animation_t *feature, uint32_t _values, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Animation_NewCmdElementState (ARCONTROLLER_FEATURE_Animation_t *feature, eARCOMMANDS_ANIMATION_TYPE _type, uint8_t _percent, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Animation_NewCmdElementFlipState (ARCONTROLLER_FEATURE_Animation_t *feature, eARCOMMANDS_ANIMATION_STATE _state, eARCOMMANDS_ANIMATION_FLIP_TYPE _type, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Animation_NewCmdElementHorizontalPanoramaState (ARCONTROLLER_FEATURE_Animation_t *feature, eARCOMMANDS_ANIMATION_STATE _state, float _rotation_angle, float _rotation_speed, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Animation_NewCmdElementDronieState (ARCONTROLLER_FEATURE_Animation_t *feature, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Animation_NewCmdElementHorizontalRevealState (ARCONTROLLER_FEATURE_Animation_t *feature, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Animation_NewCmdElementVerticalRevealState (ARCONTROLLER_FEATURE_Animation_t *feature, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _vertical_distance, float _rotation_angle, float _rotation_speed, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Animation_NewCmdElementSpiralState (ARCONTROLLER_FEATURE_Animation_t *feature, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _radius_variation, float _vertical_distance, float _revolution_nb, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Animation_NewCmdElementParabolaState (ARCONTROLLER_FEATURE_Animation_t *feature, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _vertical_distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Animation_NewCmdElementCandleState (ARCONTROLLER_FEATURE_Animation_t *feature, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _vertical_distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Animation_NewCmdElementDollySlideState (ARCONTROLLER_FEATURE_Animation_t *feature, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _angle, float _horizontal_distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE ARDrone3 --- 
 ******************************/
/**
 * @brief Parameters to send through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 */
typedef struct
{
    uint8_t flag; /**< */
    int8_t roll; /**< */
    int8_t pitch; /**< */
    int8_t yaw; /**< */
    int8_t gaz; /**< */
    uint32_t timestampAndSeqNum; /**< */
    void  *data; /**< Custom data used to manage the sending of unacknowledged commands. */
}ARCONTROLLER_ARDrone3_PilotingPCMDParameters_t;

/**
 * @brief Parameters to send through the command <code>CameraOrientation</code> in project <code>ARDrone3</code>
 */
typedef struct
{
    int8_t tilt; /**< */
    int8_t pan; /**< */
    void  *data; /**< Custom data used to manage the sending of unacknowledged commands. */
}ARCONTROLLER_ARDrone3_CameraOrientationParameters_t;

/**
 * @brief Parameters to send through the command <code>CameraOrientationV2</code> in project <code>ARDrone3</code>
 */
typedef struct
{
    float tilt; /**< */
    float pan; /**< */
    void  *data; /**< Custom data used to manage the sending of unacknowledged commands. */
}ARCONTROLLER_ARDrone3_CameraOrientationV2Parameters_t;

/**
 * @brief Parameters to send through the command <code>CameraVelocity</code> in project <code>ARDrone3</code>
 */
typedef struct
{
    float tilt; /**< */
    float pan; /**< */
    void  *data; /**< Custom data used to manage the sending of unacknowledged commands. */
}ARCONTROLLER_ARDrone3_CameraVelocityParameters_t;

/**
 * @brief Private part of ARCONTROLLER_FEATURE_ARDrone3_t.
 */
struct ARCONTROLLER_FEATURE_ARDrone3_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
    ARCONTROLLER_ARDrone3_PilotingPCMDParameters_t *PilotingPCMDParameters; /**< */
    ARCONTROLLER_ARDrone3_CameraOrientationParameters_t *CameraOrientationParameters; /**< */
    ARCONTROLLER_ARDrone3_CameraOrientationV2Parameters_t *CameraOrientationV2Parameters; /**< */
    ARCONTROLLER_ARDrone3_CameraVelocityParameters_t *CameraVelocityParameters; /**< */
};

/**
 * @brief Send a command <code>PilotingFlatTrim</code> in project <code>ARDrone3</code>
 * Do a flat trim of the accelerometer/gyro.
 * Could be useful when the drone is sliding in hover mode.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingFlatTrim (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>PilotingTakeOff</code> in project <code>ARDrone3</code>
 * Ask the drone to take off.
 * On the fixed wings (such as Disco): not used except to cancel a land.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingTakeOff (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param flag Boolean flag: 1 if the roll and pitch values should be taken in consideration. 0 otherwise
 * @param roll Roll angle as signed percentage. On copters: Roll angle expressed as signed percentage of the max pitch/roll setting, in range [-100, 100] -100 corresponds to a roll angle of max pitch/roll to the left (drone will fly left) 100 corresponds to a roll angle of max pitch/roll to the right (drone will fly right) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Roll angle expressed as signed percentage of the physical max roll of the wing, in range [-100, 100] Negative value makes the plane fly to the left Positive value makes the plane fly to the right
 * @param pitch Pitch angle as signed percentage. On copters: Expressed as signed percentage of the max pitch/roll setting, in range [-100, 100] -100 corresponds to a pitch angle of max pitch/roll towards sky (drone will fly backward) 100 corresponds to a pitch angle of max pitch/roll towards ground (drone will fly forward) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Expressed as signed percentage of the physical max pitch of the wing, in range [-100, 100] Negative value makes the plane fly in direction of the sky Positive value makes the plane fly in direction of the ground
 * @param yaw Yaw rotation speed as signed percentage. On copters: Expressed as signed percentage of the max yaw rotation speed setting, in range [-100, 100]. -100 corresponds to a counter-clockwise rotation of max yaw rotation speed 100 corresponds to a clockwise rotation of max yaw rotation speed This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Giving more than a fixed value (75% for the moment) triggers a circle. Positive value will trigger a clockwise circling Negative value will trigger a counter-clockwise circling
 * @param gaz Throttle as signed percentage. On copters: Expressed as signed percentage of the max vertical speed setting, in range [-100, 100] -100 corresponds to a max vertical speed towards ground 100 corresponds to a max vertical speed towards sky This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter. During the landing phase, putting some positive gaz will cancel the land.  On fixed wings: Expressed as signed percentage of the physical max throttle, in range [-100, 100] Negative value makes the plane fly slower Positive value makes the plane fly faster
 * @param timestampAndSeqNum Command timestamp in milliseconds (low 24 bits) + command sequence number (high 8 bits) [0;255].
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingPCMD (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t flag, int8_t roll, int8_t pitch, int8_t yaw, int8_t gaz, uint32_t timestampAndSeqNum);

/**
 * @brief Set the parameters to send through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param flag Boolean flag: 1 if the roll and pitch values should be taken in consideration. 0 otherwise
 * @param roll Roll angle as signed percentage. On copters: Roll angle expressed as signed percentage of the max pitch/roll setting, in range [-100, 100] -100 corresponds to a roll angle of max pitch/roll to the left (drone will fly left) 100 corresponds to a roll angle of max pitch/roll to the right (drone will fly right) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Roll angle expressed as signed percentage of the physical max roll of the wing, in range [-100, 100] Negative value makes the plane fly to the left Positive value makes the plane fly to the right
 * @param pitch Pitch angle as signed percentage. On copters: Expressed as signed percentage of the max pitch/roll setting, in range [-100, 100] -100 corresponds to a pitch angle of max pitch/roll towards sky (drone will fly backward) 100 corresponds to a pitch angle of max pitch/roll towards ground (drone will fly forward) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Expressed as signed percentage of the physical max pitch of the wing, in range [-100, 100] Negative value makes the plane fly in direction of the sky Positive value makes the plane fly in direction of the ground
 * @param yaw Yaw rotation speed as signed percentage. On copters: Expressed as signed percentage of the max yaw rotation speed setting, in range [-100, 100]. -100 corresponds to a counter-clockwise rotation of max yaw rotation speed 100 corresponds to a clockwise rotation of max yaw rotation speed This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Giving more than a fixed value (75% for the moment) triggers a circle. Positive value will trigger a clockwise circling Negative value will trigger a counter-clockwise circling
 * @param gaz Throttle as signed percentage. On copters: Expressed as signed percentage of the max vertical speed setting, in range [-100, 100] -100 corresponds to a max vertical speed towards ground 100 corresponds to a max vertical speed towards sky This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter. During the landing phase, putting some positive gaz will cancel the land.  On fixed wings: Expressed as signed percentage of the physical max throttle, in range [-100, 100] Negative value makes the plane fly slower Positive value makes the plane fly faster
 * @param timestampAndSeqNum Command timestamp in milliseconds (low 24 bits) + command sequence number (high 8 bits) [0;255].
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMD (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _flag, int8_t _roll, int8_t _pitch, int8_t _yaw, int8_t _gaz, uint32_t _timestampAndSeqNum);

/**
 * @brief Set flag sent through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param flag Boolean flag: 1 if the roll and pitch values should be taken in consideration. 0 otherwise
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDFlag (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t flag);

/**
 * @brief Set roll sent through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param roll Roll angle as signed percentage. On copters: Roll angle expressed as signed percentage of the max pitch/roll setting, in range [-100, 100] -100 corresponds to a roll angle of max pitch/roll to the left (drone will fly left) 100 corresponds to a roll angle of max pitch/roll to the right (drone will fly right) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Roll angle expressed as signed percentage of the physical max roll of the wing, in range [-100, 100] Negative value makes the plane fly to the left Positive value makes the plane fly to the right
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDRoll (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t roll);

/**
 * @brief Set pitch sent through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param pitch Pitch angle as signed percentage. On copters: Expressed as signed percentage of the max pitch/roll setting, in range [-100, 100] -100 corresponds to a pitch angle of max pitch/roll towards sky (drone will fly backward) 100 corresponds to a pitch angle of max pitch/roll towards ground (drone will fly forward) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Expressed as signed percentage of the physical max pitch of the wing, in range [-100, 100] Negative value makes the plane fly in direction of the sky Positive value makes the plane fly in direction of the ground
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDPitch (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t pitch);

/**
 * @brief Set yaw sent through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param yaw Yaw rotation speed as signed percentage. On copters: Expressed as signed percentage of the max yaw rotation speed setting, in range [-100, 100]. -100 corresponds to a counter-clockwise rotation of max yaw rotation speed 100 corresponds to a clockwise rotation of max yaw rotation speed This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Giving more than a fixed value (75% for the moment) triggers a circle. Positive value will trigger a clockwise circling Negative value will trigger a counter-clockwise circling
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDYaw (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t yaw);

/**
 * @brief Set gaz sent through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param gaz Throttle as signed percentage. On copters: Expressed as signed percentage of the max vertical speed setting, in range [-100, 100] -100 corresponds to a max vertical speed towards ground 100 corresponds to a max vertical speed towards sky This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter. During the landing phase, putting some positive gaz will cancel the land.  On fixed wings: Expressed as signed percentage of the physical max throttle, in range [-100, 100] Negative value makes the plane fly slower Positive value makes the plane fly faster
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDGaz (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t gaz);

/**
 * @brief Set timestampAndSeqNum sent through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param timestampAndSeqNum Command timestamp in milliseconds (low 24 bits) + command sequence number (high 8 bits) [0;255].
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDTimestampAndSeqNum (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint32_t timestampAndSeqNum);

/**
 * @brief Send a command <code>PilotingLanding</code> in project <code>ARDrone3</code>
 * Land.
 * Please note that on copters, if you put some positive gaz (in the [PilotingCommand](#1-0-2)) during the landing, it will cancel it.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingLanding (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>PilotingEmergency</code> in project <code>ARDrone3</code>
 * Cut out the motors.
 * This cuts immediatly the motors. The drone will fall.
 * This command is sent on a dedicated high priority buffer which will infinitely retry to send it if the command is not delivered.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingEmergency (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>PilotingNavigateHome</code> in project <code>ARDrone3</code>
 * Return home.
 * Ask the drone to fly to its [HomePosition](#1-24-0).
 * The availability of the return home can be get from [ReturnHomeState](#1-4-3).
 * Please note that the drone will wait to be hovering to start its return home. This means that it will wait to have a [flag](#1-0-2) set at 0.
 * @param feature feature owning the commands
 * @param start 1 to start the navigate home, 0 to stop it
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingNavigateHome (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t start);

/**
 * @brief Send a command <code>PilotingAutoTakeOffMode</code> in project <code>ARDrone3</code>
 * @deprecated
 * Auto take off mode.
 * @param feature feature owning the commands
 * @param state State of automatic take off mode (1 for autotake off enabled)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingAutoTakeOffMode (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t state);

/**
 * @brief Send a command <code>PilotingMoveBy</code> in project <code>ARDrone3</code>
 * Move the drone to a relative position and rotate heading by a given angle.
 * Moves are relative to the current drone orientation, (drone's reference).
 * Also note that the given rotation will not modify the move (i.e. moves are always rectilinear).
 * @param feature feature owning the commands
 * @param dX Wanted displacement along the front axis [m]
 * @param dY Wanted displacement along the right axis [m]
 * @param dZ Wanted displacement along the down axis [m]
 * @param dPsi Wanted rotation of heading [rad]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingMoveBy (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float dX, float dY, float dZ, float dPsi);

/**
 * @brief Send a command <code>PilotingUserTakeOff</code> in project <code>ARDrone3</code>
 * Prepare the drone to take off.
 * On copters: initiates the thrown takeoff. Note that the drone will do the thrown take off even if it is steady.
 * On fixed wings: initiates the take off process on the fixed wings.
 * 
 * Setting the state to 0 will cancel the preparation. You can cancel it before that the drone takes off.
 * @param feature feature owning the commands
 * @param state State of user take off mode - 1 to enter in user take off. - 0 to exit from user take off.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingUserTakeOff (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t state);

/**
 * @brief Send a command <code>PilotingCircle</code> in project <code>ARDrone3</code>
 * Make the fixed wing circle.
 * The circle will use the [CirclingAltitude](#1-6-14) and the [CirclingRadius](#1-6-13)
 * @param feature feature owning the commands
 * @param direction The circling direction
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingCircle (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTING_CIRCLE_DIRECTION direction);

/**
 * @brief Send a command <code>PilotingMoveTo</code> in project <code>ARDrone3</code>
 * Move the drone to a specified location.
 * If a new command moveTo is sent, the drone will immediatly run it (no cancel will be issued).
 * If a [CancelMoveTo](#1-0-11) command is sent, the moveTo is stopped.
 * During the moveTo, all pitch, roll and gaz values of the piloting command will be ignored by the drone.
 * However, the yaw value can be used.
 * @param feature feature owning the commands
 * @param latitude Latitude of the location (in degrees) to reach
 * @param longitude Longitude of the location (in degrees) to reach
 * @param altitude Altitude above sea level (in m) to reach
 * @param orientation_mode Orientation mode of the move to
 * @param heading Heading (relative to the North in degrees). This value is only used if the orientation mode is HEADING_START or HEADING_DURING
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingMoveTo (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double latitude, double longitude, double altitude, eARCOMMANDS_ARDRONE3_PILOTING_MOVETO_ORIENTATION_MODE orientation_mode, float heading);

/**
 * @brief Send a command <code>PilotingCancelMoveTo</code> in project <code>ARDrone3</code>
 * Cancel the current moveTo.
 * If there is no current moveTo, this command has no effect.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingCancelMoveTo (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>PilotingStartPilotedPOI</code> in project <code>ARDrone3</code>
 * Start a piloted Point Of Interest.
 * During a piloted POI, the drone will always look at the given POI but can be piloted normally. However, yaw value is ignored. Camera tilt and pan command is also ignored.
 * Ignored if [PilotedPOI](#1-4-14) state is UNAVAILABLE.
 * @param feature feature owning the commands
 * @param latitude Latitude of the location (in degrees) to look at
 * @param longitude Longitude of the location (in degrees) to look at
 * @param altitude Altitude above sea level (in m) to look at
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingStartPilotedPOI (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double latitude, double longitude, double altitude);

/**
 * @brief Send a command <code>PilotingStopPilotedPOI</code> in project <code>ARDrone3</code>
 * Stop the piloted Point Of Interest.
 * If [PilotedPOI](#1-4-14) state is RUNNING or PENDING, stop it.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingStopPilotedPOI (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>AnimationsFlip</code> in project <code>ARDrone3</code>
 * Make a flip.
 * @param feature feature owning the commands
 * @param direction Direction for the flip
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendAnimationsFlip (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION direction);

/**
 * @brief Send a command <code>CameraOrientation</code> in project <code>ARDrone3</code>
 * @deprecated
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param tilt Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * @param pan Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendCameraOrientation (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t tilt, int8_t pan);

/**
 * @brief Set the parameters to send through the command <code>CameraOrientation</code> in project <code>ARDrone3</code>
 * @deprecated
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param tilt Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * @param pan Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientation (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t _tilt, int8_t _pan);

/**
 * @brief Set tilt sent through the command <code>CameraOrientation</code> in project <code>ARDrone3</code>
 * @deprecated
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param tilt Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationTilt (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t tilt);

/**
 * @brief Set pan sent through the command <code>CameraOrientation</code> in project <code>ARDrone3</code>
 * @deprecated
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param pan Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationPan (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t pan);

/**
 * @brief Send a command <code>CameraOrientationV2</code> in project <code>ARDrone3</code>
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param tilt Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * @param pan Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendCameraOrientationV2 (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float tilt, float pan);

/**
 * @brief Set the parameters to send through the command <code>CameraOrientationV2</code> in project <code>ARDrone3</code>
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param tilt Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * @param pan Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationV2 (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _tilt, float _pan);

/**
 * @brief Set tilt sent through the command <code>CameraOrientationV2</code> in project <code>ARDrone3</code>
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param tilt Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationV2Tilt (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float tilt);

/**
 * @brief Set pan sent through the command <code>CameraOrientationV2</code> in project <code>ARDrone3</code>
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param pan Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationV2Pan (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float pan);

/**
 * @brief Send a command <code>CameraVelocity</code> in project <code>ARDrone3</code>
 * Move the camera given velocity consign.
 * You can get min and max values for tilt and pan using [CameraVelocityRange](#1-25-4).
 * @param feature feature owning the commands
 * @param tilt Tilt camera velocity consign [deg/s] Negative tilt velocity move camera to bottom Positive tilt velocity move camera to top
 * @param pan Pan camera velocity consign [deg/s] Negative pan velocity move camera to left Positive pan velocity move camera to right
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendCameraVelocity (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float tilt, float pan);

/**
 * @brief Set the parameters to send through the command <code>CameraVelocity</code> in project <code>ARDrone3</code>
 * Move the camera given velocity consign.
 * You can get min and max values for tilt and pan using [CameraVelocityRange](#1-25-4).
 * @param feature feature owning the commands
 * @param tilt Tilt camera velocity consign [deg/s] Negative tilt velocity move camera to bottom Positive tilt velocity move camera to top
 * @param pan Pan camera velocity consign [deg/s] Negative pan velocity move camera to left Positive pan velocity move camera to right
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetCameraVelocity (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _tilt, float _pan);

/**
 * @brief Set tilt sent through the command <code>CameraVelocity</code> in project <code>ARDrone3</code>
 * Move the camera given velocity consign.
 * You can get min and max values for tilt and pan using [CameraVelocityRange](#1-25-4).
 * @param feature feature owning the commands
 * @param tilt Tilt camera velocity consign [deg/s] Negative tilt velocity move camera to bottom Positive tilt velocity move camera to top
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetCameraVelocityTilt (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float tilt);

/**
 * @brief Set pan sent through the command <code>CameraVelocity</code> in project <code>ARDrone3</code>
 * Move the camera given velocity consign.
 * You can get min and max values for tilt and pan using [CameraVelocityRange](#1-25-4).
 * @param feature feature owning the commands
 * @param pan Pan camera velocity consign [deg/s] Negative pan velocity move camera to left Positive pan velocity move camera to right
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetCameraVelocityPan (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float pan);

/**
 * @brief Send a command <code>MediaRecordPicture</code> in project <code>ARDrone3</code>
 * @deprecated
 * Take a picture.
 * @param feature feature owning the commands
 * @param mass_storage_id Mass storage id to take picture
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordPicture (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>MediaRecordVideo</code> in project <code>ARDrone3</code>
 * @deprecated
 * Record a video.
 * @param feature feature owning the commands
 * @param record Command to record video
 * @param mass_storage_id Mass storage id to record
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordVideo (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD record, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>MediaRecordPictureV2</code> in project <code>ARDrone3</code>
 * Take a picture.
 * The type of picture taken is related to the picture setting.
 * You can set the picture format by sending the command [SetPictureFormat](#1-19-0). You can also get the current picture format with [PictureFormat](#1-20-0).
 * Please note that the time required to take the picture is highly related to this format.
 * 
 * You can check if the picture taking is available with [PictureState](#1-8-2).
 * Also, please note that if your picture format is different from snapshot, picture taking will stop video recording (it will restart after that the picture has been taken).
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordPictureV2 (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>MediaRecordVideoV2</code> in project <code>ARDrone3</code>
 * Record a video (or start timelapse).
 * You can check if the video recording is available with [VideoState](#1-8-3).
 * This command can start a video (obvious huh?), but also a timelapse if the timelapse mode is set. You can check if the timelapse mode is set with the event [TimelapseMode](#1-20-4).
 * Also, please note that if your picture format is different from snapshot, picture taking will stop video recording (it will restart after the picture has been taken).
 * @param feature feature owning the commands
 * @param record Command to record video
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordVideoV2 (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD record);

/**
 * @brief Send a command <code>NetworkWifiScan</code> in project <code>ARDrone3</code>
 * Scan wifi network to get a list of all networks found by the drone
 * @param feature feature owning the commands
 * @param band The band(s) : 2.4 Ghz, 5 Ghz, or both
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendNetworkWifiScan (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND band);

/**
 * @brief Send a command <code>NetworkWifiAuthChannel</code> in project <code>ARDrone3</code>
 * Ask for available wifi channels.
 * The list of available Wifi channels is related to the country of the drone. You can get this country from the event [CountryChanged](#0-3-6).
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendNetworkWifiAuthChannel (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>PilotingSettingsMaxAltitude</code> in project <code>ARDrone3</code>
 * Set max altitude.
 * The drone will not fly over this max altitude when it is in manual piloting.
 * Please note that if you set a max altitude which is below the current drone altitude, the drone will not go to given max altitude.
 * You can get the bounds in the event [MaxAltitude](#1-6-0).
 * @param feature feature owning the commands
 * @param current Current altitude max in m
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxAltitude (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>PilotingSettingsMaxTilt</code> in project <code>ARDrone3</code>
 * Set max pitch/roll.
 * This represent the max inclination allowed by the drone.
 * You can get the bounds with the commands [MaxPitchRoll](#1-6-1).
 * @param feature feature owning the commands
 * @param current Current tilt max in degree
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxTilt (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>PilotingSettingsAbsolutControl</code> in project <code>ARDrone3</code>
 * @deprecated
 * Set absolut control.
 * @param feature feature owning the commands
 * @param on 1 to enable, 0 to disable
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsAbsolutControl (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t on);

/**
 * @brief Send a command <code>PilotingSettingsMaxDistance</code> in project <code>ARDrone3</code>
 * Set max distance.
 * You can get the bounds from the event [MaxDistance](#1-6-3).
 * 
 * If [Geofence](#1-6-4) is activated, the drone won't fly over the given max distance.
 * @param feature feature owning the commands
 * @param value Current max distance in meter
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxDistance (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PilotingSettingsNoFlyOverMaxDistance</code> in project <code>ARDrone3</code>
 * Enable geofence.
 * If geofence is enabled, the drone won't fly over the given max distance.
 * You can get the max distance from the event [MaxDistance](#1-6-3).
 * For copters: the distance is computed from the controller position, if this position is not known, it will use the take off.
 * For fixed wings: the distance is computed from the take off position.
 * @param feature feature owning the commands
 * @param shouldNotFlyOver 1 if the drone can't fly further than max distance, 0 if no limitation on the drone should be done
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsNoFlyOverMaxDistance (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t shouldNotFlyOver);

/**
 * @brief Send a command <code>PilotingSettingsSetAutonomousFlightMaxHorizontalSpeed</code> in project <code>ARDrone3</code>
 * Set autonomous flight max horizontal speed.
 * This will only be used during autonomous flights such as moveBy.
 * @param feature feature owning the commands
 * @param value maximum horizontal speed [m/s]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxHorizontalSpeed (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PilotingSettingsSetAutonomousFlightMaxVerticalSpeed</code> in project <code>ARDrone3</code>
 * Set autonomous flight max vertical speed.
 * This will only be used during autonomous flights such as moveBy.
 * @param feature feature owning the commands
 * @param value maximum vertical speed [m/s]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxVerticalSpeed (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PilotingSettingsSetAutonomousFlightMaxHorizontalAcceleration</code> in project <code>ARDrone3</code>
 * Set autonomous flight max horizontal acceleration.
 * This will only be used during autonomous flights such as moveBy.
 * @param feature feature owning the commands
 * @param value maximum horizontal acceleration [m/s2]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxHorizontalAcceleration (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PilotingSettingsSetAutonomousFlightMaxVerticalAcceleration</code> in project <code>ARDrone3</code>
 * Set autonomous flight max vertical acceleration.
 * This will only be used during autonomous flights such as moveBy.
 * @param feature feature owning the commands
 * @param value maximum vertical acceleration [m/s2]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxVerticalAcceleration (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PilotingSettingsSetAutonomousFlightMaxRotationSpeed</code> in project <code>ARDrone3</code>
 * Set autonomous flight max rotation speed.
 * This will only be used during autonomous flights such as moveBy.
 * @param feature feature owning the commands
 * @param value maximum yaw rotation speed [deg/s]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxRotationSpeed (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PilotingSettingsBankedTurn</code> in project <code>ARDrone3</code>
 * Set banked turn mode.
 * When banked turn mode is enabled, the drone will use yaw values from the piloting command to infer with roll and pitch on the drone when its horizontal speed is not null.
 * @param feature feature owning the commands
 * @param value 1 to enable, 0 to disable
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsBankedTurn (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t value);

/**
 * @brief Send a command <code>PilotingSettingsMinAltitude</code> in project <code>ARDrone3</code>
 * Set minimum altitude.
 * Only available for fixed wings.
 * @param feature feature owning the commands
 * @param current Current altitude min in m
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMinAltitude (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>PilotingSettingsCirclingDirection</code> in project <code>ARDrone3</code>
 * Set default circling direction. This direction will be used when the drone use an automatic circling or when [CIRCLE](#1-0-9) is sent with direction *default*.
 * Only available for fixed wings.
 * @param feature feature owning the commands
 * @param value The circling direction
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsCirclingDirection (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_CIRCLINGDIRECTION_VALUE value);

/**
 * @brief Send a command <code>PilotingSettingsCirclingRadius</code> in project <code>ARDrone3</code>
 * @deprecated
 * Set circling radius.
 * Only available for fixed wings.
 * @param feature feature owning the commands
 * @param value The circling radius in meter
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsCirclingRadius (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint16_t value);

/**
 * @brief Send a command <code>PilotingSettingsCirclingAltitude</code> in project <code>ARDrone3</code>
 * Set min circling altitude (not used during take off).
 * Only available for fixed wings.
 * @param feature feature owning the commands
 * @param value The circling altitude in meter
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsCirclingAltitude (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint16_t value);

/**
 * @brief Send a command <code>PilotingSettingsPitchMode</code> in project <code>ARDrone3</code>
 * Set pitch mode.
 * Only available for fixed wings.
 * @param feature feature owning the commands
 * @param value The Pitch mode
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsPitchMode (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_PITCHMODE_VALUE value);

/**
 * @brief Send a command <code>PilotingSettingsSetMotionDetectionMode</code> in project <code>ARDrone3</code>
 * Enable/disable the motion detection.
 * If the motion detection is enabled, the drone will send its [MotionState](#1-4-13) when its [FlyingState](#1-4-1) is landed. If the motion detection is disabled, [MotionState](#1-4-13) is steady.
 * @param feature feature owning the commands
 * @param enable 1 to enable the motion detection, 0 to disable it.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetMotionDetectionMode (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>SpeedSettingsMaxVerticalSpeed</code> in project <code>ARDrone3</code>
 * Set max vertical speed.
 * @param feature feature owning the commands
 * @param current Current max vertical speed in m/s
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsMaxVerticalSpeed (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>SpeedSettingsMaxRotationSpeed</code> in project <code>ARDrone3</code>
 * Set max rotation speed.
 * @param feature feature owning the commands
 * @param current Current max yaw rotation speed in degree/s
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsMaxRotationSpeed (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>SpeedSettingsHullProtection</code> in project <code>ARDrone3</code>
 * Set the presence of hull protection.
 * @param feature feature owning the commands
 * @param present 1 if present, 0 if not present
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsHullProtection (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t present);

/**
 * @brief Send a command <code>SpeedSettingsOutdoor</code> in project <code>ARDrone3</code>
 * @deprecated
 * Set outdoor mode.
 * @param feature feature owning the commands
 * @param outdoor 1 if outdoor flight, 0 if indoor flight
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsOutdoor (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t outdoor);

/**
 * @brief Send a command <code>SpeedSettingsMaxPitchRollRotationSpeed</code> in project <code>ARDrone3</code>
 * Set max pitch/roll rotation speed.
 * @param feature feature owning the commands
 * @param current Current max pitch/roll rotation speed in degree/s
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsMaxPitchRollRotationSpeed (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>NetworkSettingsWifiSelection</code> in project <code>ARDrone3</code>
 * Select or auto-select channel of choosen band.
 * @param feature feature owning the commands
 * @param type The type of wifi selection (auto, manual)
 * @param band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 * @param channel The channel (not used in auto mode)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendNetworkSettingsWifiSelection (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE type, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND band, uint8_t channel);

/**
 * @brief Send a command <code>NetworkSettingsWifiSecurity</code> in project <code>ARDrone3</code>
 * Set wifi security type.
 * The security will be changed on the next restart
 * @param feature feature owning the commands
 * @param type The type of wifi security (open, wpa2)
 * @param key The key to secure the network (empty if type is open)
 * @param keyType Type of the key
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendNetworkSettingsWifiSecurity (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_TYPE type, char * key, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_KEYTYPE keyType);

/**
 * @brief Send a command <code>PictureSettingsPictureFormatSelection</code> in project <code>ARDrone3</code>
 * Set picture format.
 * Please note that the time required to take the picture is highly related to this format.
 * Also, please note that if your picture format is different from snapshot, picture taking will stop video recording (it will restart after the picture has been taken).
 * @param feature feature owning the commands
 * @param type The type of photo format
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsPictureFormatSelection (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE type);

/**
 * @brief Send a command <code>PictureSettingsAutoWhiteBalanceSelection</code> in project <code>ARDrone3</code>
 * Set White Balance mode.
 * @param feature feature owning the commands
 * @param type The type auto white balance
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsAutoWhiteBalanceSelection (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE type);

/**
 * @brief Send a command <code>PictureSettingsExpositionSelection</code> in project <code>ARDrone3</code>
 * Set image exposure.
 * @param feature feature owning the commands
 * @param value Exposition value (bounds given by ExpositionChanged arg min and max, by default [-3:3])
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsExpositionSelection (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PictureSettingsSaturationSelection</code> in project <code>ARDrone3</code>
 * Set image saturation.
 * @param feature feature owning the commands
 * @param value Saturation value (bounds given by SaturationChanged arg min and max, by default [-100:100])
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsSaturationSelection (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PictureSettingsTimelapseSelection</code> in project <code>ARDrone3</code>
 * Set timelapse mode.
 * If timelapse mode is set, instead of taking a video, the drone will take picture regularly.
 * Watch out, this command only configure the timelapse mode. Once it is configured, you can start/stop the timelapse with the [RecordVideo](#1-7-3) command.
 * @param feature feature owning the commands
 * @param enabled 1 if timelapse is enabled, 0 otherwise
 * @param interval interval in seconds for taking pictures
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsTimelapseSelection (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t enabled, float interval);

/**
 * @brief Send a command <code>PictureSettingsVideoAutorecordSelection</code> in project <code>ARDrone3</code>
 * Set video autorecord mode.
 * If autorecord is set, video record will be automatically started when the drone takes off and stopped slightly after landing.
 * @param feature feature owning the commands
 * @param enabled 1 if video autorecord is enabled, 0 otherwise
 * @param mass_storage_id Mass storage id to take video
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoAutorecordSelection (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t enabled, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>PictureSettingsVideoStabilizationMode</code> in project <code>ARDrone3</code>
 * Set video stabilization mode.
 * @param feature feature owning the commands
 * @param mode Video stabilization mode
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoStabilizationMode (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE mode);

/**
 * @brief Send a command <code>PictureSettingsVideoRecordingMode</code> in project <code>ARDrone3</code>
 * Set video recording mode.
 * @param feature feature owning the commands
 * @param mode Video recording mode
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoRecordingMode (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORECORDINGMODE_MODE mode);

/**
 * @brief Send a command <code>PictureSettingsVideoFramerate</code> in project <code>ARDrone3</code>
 * Set video framerate.
 * @param feature feature owning the commands
 * @param framerate Video framerate
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoFramerate (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOFRAMERATE_FRAMERATE framerate);

/**
 * @brief Send a command <code>PictureSettingsVideoResolutions</code> in project <code>ARDrone3</code>
 * Set video streaming and recording resolutions.
 * @param feature feature owning the commands
 * @param type Video streaming and recording resolutions
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoResolutions (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORESOLUTIONS_TYPE type);

/**
 * @brief Send a command <code>MediaStreamingVideoEnable</code> in project <code>ARDrone3</code>
 * Enable/disable video streaming.
 * @param feature feature owning the commands
 * @param enable 1 to enable, 0 to disable.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendMediaStreamingVideoEnable (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>MediaStreamingVideoStreamMode</code> in project <code>ARDrone3</code>
 * Set the stream mode.
 * @param feature feature owning the commands
 * @param mode stream mode
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendMediaStreamingVideoStreamMode (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIASTREAMING_VIDEOSTREAMMODE_MODE mode);

/**
 * @brief Send a command <code>GPSSettingsSetHome</code> in project <code>ARDrone3</code>
 * @deprecated
 * Set home position.
 * @param feature feature owning the commands
 * @param latitude Home latitude in decimal degrees
 * @param longitude Home longitude in decimal degrees
 * @param altitude Home altitude in meters
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsSetHome (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double latitude, double longitude, double altitude);

/**
 * @brief Send a command <code>GPSSettingsResetHome</code> in project <code>ARDrone3</code>
 * @deprecated
 * Reset home position.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsResetHome (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>GPSSettingsSendControllerGPS</code> in project <code>ARDrone3</code>
 * Set controller gps location.
 * The user location might be used in case of return home, according to the home type and the accuracy of the given position. You can get the current home type with the event [HomeType](#1-24-4).
 * @param feature feature owning the commands
 * @param latitude GPS latitude in decimal degrees
 * @param longitude GPS longitude in decimal degrees
 * @param altitude GPS altitude in meters
 * @param horizontalAccuracy Horizontal Accuracy in meter ; equal -1 if no horizontal Accuracy
 * @param verticalAccuracy Vertical Accuracy in meter ; equal -1 if no vertical Accuracy
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsSendControllerGPS (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double latitude, double longitude, double altitude, double horizontalAccuracy, double verticalAccuracy);

/**
 * @brief Send a command <code>GPSSettingsHomeType</code> in project <code>ARDrone3</code>
 * Set the preferred home type.
 * Please note that this is only a preference. The actual type chosen is given by the event [HomeType](#1-31-2).
 * You can get the currently available types with the event [HomeTypeAvailability](#1-31-1).
 * @param feature feature owning the commands
 * @param type The type of the home position
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsHomeType (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE type);

/**
 * @brief Send a command <code>GPSSettingsReturnHomeDelay</code> in project <code>ARDrone3</code>
 * Set the delay after which the drone will automatically try to return home after a disconnection.
 * @param feature feature owning the commands
 * @param delay Delay in second
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsReturnHomeDelay (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint16_t delay);

/**
 * @brief Send a command <code>AntiflickeringElectricFrequency</code> in project <code>ARDrone3</code>
 * Set the electric frequency of the surrounding lights.
 * This is used to avoid the video flickering in auto mode. You can get the current antiflickering mode with the event [AntiflickeringModeChanged](#1-30-1).
 * @param feature feature owning the commands
 * @param frequency Type of the electric frequency
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendAntiflickeringElectricFrequency (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY frequency);

/**
 * @brief Send a command <code>AntiflickeringSetMode</code> in project <code>ARDrone3</code>
 * Set the antiflickering mode.
 * If auto, the drone will detect when flickers appears on the video and trigger the antiflickering.
 * In this case, this electric frequency it will use will be the one specified in the event [ElectricFrequency](#1-29-0).
 * Forcing the antiflickering (FixedFiftyHertz or FixedFiftyHertz) can reduce luminosity of the video.
 * @param feature feature owning the commands
 * @param mode Mode of the anti flickering functionnality
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendAntiflickeringSetMode (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE mode);

/**
 * @brief Send a command <code>SoundStartAlertSound</code> in project <code>ARDrone3</code>
 * Start the alert sound. The alert sound can only be started when the drone is not flying.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendSoundStartAlertSound (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>SoundStopAlertSound</code> in project <code>ARDrone3</code>
 * Stop the alert sound.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SendSoundStopAlertSound (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief callback used when the command <code>MediaRecordStatePictureStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state 1 if picture has been taken, 0 otherwise
 * @param mass_storage_id Mass storage id where the picture was recorded
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_MediaRecordStatePictureStateChangedCallback (uint8_t _state, uint8_t _mass_storage_id, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordStateVideoStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state State of video
 * @param mass_storage_id Mass storage id where the video was recorded
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_MediaRecordStateVideoStateChangedCallback (eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE _state, uint8_t _mass_storage_id, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordStatePictureStateChangedV2</code> is decoded
 * @param feature The feature controller registred
 * @param state State of device picture recording
 * @param error Error to explain the state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_MediaRecordStatePictureStateChangedV2Callback (eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE _state, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordStateVideoStateChangedV2</code> is decoded
 * @param feature The feature controller registred
 * @param state State of device video recording
 * @param error Error to explain the state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_MediaRecordStateVideoStateChangedV2Callback (eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE _state, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordStateVideoResolutionState</code> is decoded
 * @param feature The feature controller registred
 * @param streaming Streaming resolution
 * @param recording Recording resolution
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_MediaRecordStateVideoResolutionStateCallback (eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING _streaming, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING _recording, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordEventPictureEventChanged</code> is decoded
 * @param feature The feature controller registred
 * @param event Last event of picture recording
 * @param error Error to explain the event
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_MediaRecordEventPictureEventChangedCallback (eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT _event, eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordEventVideoEventChanged</code> is decoded
 * @param feature The feature controller registred
 * @param event Event of video recording
 * @param error Error to explain the event
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_MediaRecordEventVideoEventChangedCallback (eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT _event, eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateFlatTrimChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateFlatTrimChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>PilotingStateFlyingStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state Drone flying state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateFlyingStateChangedCallback (eARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateAlertStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state Drone alert state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateAlertStateChangedCallback (eARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateNavigateHomeStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state State of navigate home
 * @param reason Reason of the state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateNavigateHomeStateChangedCallback (eARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE _state, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON _reason, void *customData);

/**
 * @brief callback used when the command <code>PilotingStatePositionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param latitude Latitude position in decimal degrees (500.0 if not available)
 * @param longitude Longitude position in decimal degrees (500.0 if not available)
 * @param altitude Altitude in meters (from GPS)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStatePositionChangedCallback (double _latitude, double _longitude, double _altitude, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateSpeedChanged</code> is decoded
 * @param feature The feature controller registred
 * @param speedX Speed relative to the North (when drone moves to the north, speed is > 0) (in m/s)
 * @param speedY Speed relative to the East (when drone moves to the east, speed is > 0) (in m/s)
 * @param speedZ Speed on the z axis (when drone moves down, speed is > 0) (in m/s)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateSpeedChangedCallback (float _speedX, float _speedY, float _speedZ, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateAttitudeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param roll roll value (in radian)
 * @param pitch Pitch value (in radian)
 * @param yaw Yaw value (in radian)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateAttitudeChangedCallback (float _roll, float _pitch, float _yaw, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateAutoTakeOffModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state State of automatic take off mode (1 if enabled)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateAutoTakeOffModeChangedCallback (uint8_t _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateAltitudeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param altitude Altitude in meters
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateAltitudeChangedCallback (double _altitude, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateGpsLocationChanged</code> is decoded
 * @param feature The feature controller registred
 * @param latitude Latitude location in decimal degrees (500.0 if not available)
 * @param longitude Longitude location in decimal degrees (500.0 if not available)
 * @param altitude Altitude location in meters.
 * @param latitude_accuracy Latitude location error in meters (1 sigma/standard deviation) -1 if not available.
 * @param longitude_accuracy Longitude location error in meters (1 sigma/standard deviation) -1 if not available.
 * @param altitude_accuracy Altitude location error in meters (1 sigma/standard deviation) -1 if not available.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateGpsLocationChangedCallback (double _latitude, double _longitude, double _altitude, int8_t _latitude_accuracy, int8_t _longitude_accuracy, int8_t _altitude_accuracy, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateLandingStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state Drone landing state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateLandingStateChangedCallback (eARCOMMANDS_ARDRONE3_PILOTINGSTATE_LANDINGSTATECHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateAirSpeedChanged</code> is decoded
 * @param feature The feature controller registred
 * @param airSpeed Speed relative to air on x axis (speed is always > 0) (in m/s)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateAirSpeedChangedCallback (float _airSpeed, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateMoveToChanged</code> is decoded
 * @param feature The feature controller registred
 * @param latitude Latitude of the location (in degrees) to reach
 * @param longitude Longitude of the location (in degrees) to reach
 * @param altitude Altitude above sea level (in m) to reach
 * @param orientation_mode Orientation mode of the move to
 * @param heading Heading (relative to the North in degrees). This value is only used if the orientation mode is HEADING_START or HEADING_DURING
 * @param status Status of the move to
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateMoveToChangedCallback (double _latitude, double _longitude, double _altitude, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE _orientation_mode, float _heading, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS _status, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateMotionState</code> is decoded
 * @param feature The feature controller registred
 * @param state Motion state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateMotionStateCallback (eARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOTIONSTATE_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingStatePilotedPOI</code> is decoded
 * @param feature The feature controller registred
 * @param latitude Latitude of the location (in degrees) to look at. This information is only valid when the state is pending or running.
 * @param longitude Longitude of the location (in degrees) to look at. This information is only valid when the state is pending or running.
 * @param altitude Altitude above sea level (in m) to look at. This information is only valid when the state is pending or running.
 * @param status Status of the move to
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStatePilotedPOICallback (double _latitude, double _longitude, double _altitude, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS _status, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateReturnHomeBatteryCapacity</code> is decoded
 * @param feature The feature controller registred
 * @param status Status of battery to return home
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingStateReturnHomeBatteryCapacityCallback (eARCOMMANDS_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS _status, void *customData);

/**
 * @brief callback used when the command <code>PilotingEventMoveByEnd</code> is decoded
 * @param feature The feature controller registred
 * @param dX Distance traveled along the front axis [m]
 * @param dY Distance traveled along the right axis [m]
 * @param dZ Distance traveled along the down axis [m]
 * @param dPsi Applied angle on heading [rad]
 * @param error Error to explain the event
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingEventMoveByEndCallback (float _dX, float _dY, float _dZ, float _dPsi, eARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>NetworkStateWifiScanListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param ssid SSID of the AP
 * @param rssi RSSI of the AP in dbm (negative value)
 * @param band The band : 2.4 GHz or 5 GHz
 * @param channel Channel of the AP
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_NetworkStateWifiScanListChangedCallback (const char * _ssid, int16_t _rssi, eARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND _band, uint8_t _channel, void *customData);

/**
 * @brief callback used when the command <code>NetworkStateAllWifiScanChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_NetworkStateAllWifiScanChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>NetworkStateWifiAuthChannelListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param band The band of this channel : 2.4 GHz or 5 GHz
 * @param channel The authorized channel.
 * @param in_or_out Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_NetworkStateWifiAuthChannelListChangedCallback (eARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND _band, uint8_t _channel, uint8_t _in_or_out, void *customData);

/**
 * @brief callback used when the command <code>NetworkStateAllWifiAuthChannelChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_NetworkStateAllWifiAuthChannelChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateMaxAltitudeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current Current altitude max
 * @param min Range min of altitude
 * @param max Range max of altitude
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateMaxAltitudeChangedCallback (float _current, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateMaxTiltChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current Current max tilt
 * @param min Range min of tilt
 * @param max Range max of tilt
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateMaxTiltChangedCallback (float _current, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateAbsolutControlChanged</code> is decoded
 * @param feature The feature controller registred
 * @param on 1 if enabled, 0 if disabled
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateAbsolutControlChangedCallback (uint8_t _on, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateMaxDistanceChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current Current max distance in meter
 * @param min Minimal possible max distance
 * @param max Maximal possible max distance
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateMaxDistanceChangedCallback (float _current, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateNoFlyOverMaxDistanceChanged</code> is decoded
 * @param feature The feature controller registred
 * @param shouldNotFlyOver 1 if the drone won't fly further than max distance, 0 if no limitation on the drone will be done
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateNoFlyOverMaxDistanceChangedCallback (uint8_t _shouldNotFlyOver, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateAutonomousFlightMaxHorizontalSpeed</code> is decoded
 * @param feature The feature controller registred
 * @param value maximum horizontal speed [m/s]
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateAutonomousFlightMaxHorizontalSpeedCallback (float _value, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateAutonomousFlightMaxVerticalSpeed</code> is decoded
 * @param feature The feature controller registred
 * @param value maximum vertical speed [m/s]
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateAutonomousFlightMaxVerticalSpeedCallback (float _value, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateAutonomousFlightMaxHorizontalAcceleration</code> is decoded
 * @param feature The feature controller registred
 * @param value maximum horizontal acceleration [m/s2]
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateAutonomousFlightMaxHorizontalAccelerationCallback (float _value, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateAutonomousFlightMaxVerticalAcceleration</code> is decoded
 * @param feature The feature controller registred
 * @param value maximum vertical acceleration [m/s2]
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateAutonomousFlightMaxVerticalAccelerationCallback (float _value, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateAutonomousFlightMaxRotationSpeed</code> is decoded
 * @param feature The feature controller registred
 * @param value maximum yaw rotation speed [deg/s]
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateAutonomousFlightMaxRotationSpeedCallback (float _value, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateBankedTurnChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state 1 if enabled, 0 if disabled
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateBankedTurnChangedCallback (uint8_t _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateMinAltitudeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current Current altitude min
 * @param min Range min of altitude min
 * @param max Range max of altitude min
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateMinAltitudeChangedCallback (float _current, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateCirclingDirectionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param value The circling direction
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateCirclingDirectionChangedCallback (eARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGDIRECTIONCHANGED_VALUE _value, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateCirclingRadiusChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current The current circling radius in meter
 * @param min Range min of circling radius in meter
 * @param max Range max of circling radius in meter
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateCirclingRadiusChangedCallback (uint16_t _current, uint16_t _min, uint16_t _max, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateCirclingAltitudeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current The current circling altitude in meter
 * @param min Range min of circling altitude in meter
 * @param max Range max of circling altitude in meter
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateCirclingAltitudeChangedCallback (uint16_t _current, uint16_t _min, uint16_t _max, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStatePitchModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param value The Pitch mode
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStatePitchModeChangedCallback (eARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_PITCHMODECHANGED_VALUE _value, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateMotionDetection</code> is decoded
 * @param feature The feature controller registred
 * @param enabled 1 if motion detection is enabled, 0 otherwise.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PilotingSettingsStateMotionDetectionCallback (uint8_t _enabled, void *customData);

/**
 * @brief callback used when the command <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current Current max vertical speed in m/s
 * @param min Range min of vertical speed
 * @param max Range max of vertical speed
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SpeedSettingsStateMaxVerticalSpeedChangedCallback (float _current, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>SpeedSettingsStateMaxRotationSpeedChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current Current max yaw rotation speed in degree/s
 * @param min Range min of yaw rotation speed
 * @param max Range max of yaw rotation speed
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SpeedSettingsStateMaxRotationSpeedChangedCallback (float _current, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>SpeedSettingsStateHullProtectionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param present 1 if present, 0 if not present
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SpeedSettingsStateHullProtectionChangedCallback (uint8_t _present, void *customData);

/**
 * @brief callback used when the command <code>SpeedSettingsStateOutdoorChanged</code> is decoded
 * @param feature The feature controller registred
 * @param outdoor 1 if outdoor flight, 0 if indoor flight
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SpeedSettingsStateOutdoorChangedCallback (uint8_t _outdoor, void *customData);

/**
 * @brief callback used when the command <code>SpeedSettingsStateMaxPitchRollRotationSpeedChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current Current max pitch/roll rotation speed in degree/s
 * @param min Range min of pitch/roll rotation speed
 * @param max Range max of pitch/roll rotation speed
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SpeedSettingsStateMaxPitchRollRotationSpeedChangedCallback (float _current, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>NetworkSettingsStateWifiSelectionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param type The type of wifi selection settings
 * @param band The actual wifi band state
 * @param channel The channel (depends of the band)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_NetworkSettingsStateWifiSelectionChangedCallback (eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE _type, eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND _band, uint8_t _channel, void *customData);

/**
 * @brief callback used when the command <code>NetworkSettingsStateWifiSecurityChanged</code> is decoded
 * @param feature The feature controller registred
 * @param type The type of wifi security (open, wpa2)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_NetworkSettingsStateWifiSecurityChangedCallback (eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITYCHANGED_TYPE _type, void *customData);

/**
 * @brief callback used when the command <code>NetworkSettingsStateWifiSecurity</code> is decoded
 * @param feature The feature controller registred
 * @param type The type of wifi security (open, wpa2)
 * @param key The key used to secure the network (empty if type is open)
 * @param keyType Type of the key
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_NetworkSettingsStateWifiSecurityCallback (eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_TYPE _type, const char * _key, eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_KEYTYPE _keyType, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateProductMotorVersionListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param motor_number Product Motor number
 * @param type Product Motor type
 * @param software Product Motors software version
 * @param hardware Product Motors hardware version
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SettingsStateProductMotorVersionListChangedCallback (uint8_t _motor_number, const char * _type, const char * _software, const char * _hardware, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateProductGPSVersionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param software Product GPS software version
 * @param hardware Product GPS hardware version
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SettingsStateProductGPSVersionChangedCallback (const char * _software, const char * _hardware, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateMotorErrorStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param motorIds Bit field for concerned motor. If bit 0 = 1, motor 1 is affected by this error. Same with bit 1, 2 and 3. Motor 1: front left Motor 2: front right Motor 3: back right Motor 4: back left
 * @param motorError Enumeration of the motor error
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SettingsStateMotorErrorStateChangedCallback (uint8_t _motorIds, eARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR _motorError, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateMotorSoftwareVersionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param version name of the version : dot separated fields (major version - minor version - firmware type - nb motors handled). Firmware types : Release, Debug, Alpha, Test-bench
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SettingsStateMotorSoftwareVersionChangedCallback (const char * _version, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateMotorFlightsStatusChanged</code> is decoded
 * @param feature The feature controller registred
 * @param nbFlights total number of flights
 * @param lastFlightDuration Duration of the last flight (in seconds)
 * @param totalFlightDuration Duration of all flights (in seconds)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SettingsStateMotorFlightsStatusChangedCallback (uint16_t _nbFlights, uint16_t _lastFlightDuration, uint32_t _totalFlightDuration, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateMotorErrorLastErrorChanged</code> is decoded
 * @param feature The feature controller registred
 * @param motorError Enumeration of the motor error
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SettingsStateMotorErrorLastErrorChangedCallback (eARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR _motorError, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateP7ID</code> is decoded
 * @param feature The feature controller registred
 * @param serialID Product P7ID
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SettingsStateP7IDCallback (const char * _serialID, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateCPUID</code> is decoded
 * @param feature The feature controller registred
 * @param id Product main cpu id
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SettingsStateCPUIDCallback (const char * _id, void *customData);

/**
 * @brief callback used when the command <code>PictureSettingsStatePictureFormatChanged</code> is decoded
 * @param feature The feature controller registred
 * @param type The type of photo format
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PictureSettingsStatePictureFormatChangedCallback (eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE _type, void *customData);

/**
 * @brief callback used when the command <code>PictureSettingsStateAutoWhiteBalanceChanged</code> is decoded
 * @param feature The feature controller registred
 * @param type The type auto white balance
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PictureSettingsStateAutoWhiteBalanceChangedCallback (eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE _type, void *customData);

/**
 * @brief callback used when the command <code>PictureSettingsStateExpositionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param value Exposure value
 * @param min Min exposure value
 * @param max Max exposure value
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PictureSettingsStateExpositionChangedCallback (float _value, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>PictureSettingsStateSaturationChanged</code> is decoded
 * @param feature The feature controller registred
 * @param value Saturation value
 * @param min Min saturation value
 * @param max Max saturation value
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PictureSettingsStateSaturationChangedCallback (float _value, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>PictureSettingsStateTimelapseChanged</code> is decoded
 * @param feature The feature controller registred
 * @param enabled 1 if timelapse is enabled, 0 otherwise
 * @param interval interval in seconds for taking pictures
 * @param minInterval Minimal interval for taking pictures
 * @param maxInterval Maximal interval for taking pictures
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PictureSettingsStateTimelapseChangedCallback (uint8_t _enabled, float _interval, float _minInterval, float _maxInterval, void *customData);

/**
 * @brief callback used when the command <code>PictureSettingsStateVideoAutorecordChanged</code> is decoded
 * @param feature The feature controller registred
 * @param enabled 1 if video autorecord is enabled, 0 otherwise
 * @param mass_storage_id Mass storage id for the taken video
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PictureSettingsStateVideoAutorecordChangedCallback (uint8_t _enabled, uint8_t _mass_storage_id, void *customData);

/**
 * @brief callback used when the command <code>PictureSettingsStateVideoStabilizationModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param mode Video stabilization mode
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PictureSettingsStateVideoStabilizationModeChangedCallback (eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE _mode, void *customData);

/**
 * @brief callback used when the command <code>PictureSettingsStateVideoRecordingModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param mode Video recording mode
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PictureSettingsStateVideoRecordingModeChangedCallback (eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORECORDINGMODECHANGED_MODE _mode, void *customData);

/**
 * @brief callback used when the command <code>PictureSettingsStateVideoFramerateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param framerate Video framerate
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PictureSettingsStateVideoFramerateChangedCallback (eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOFRAMERATECHANGED_FRAMERATE _framerate, void *customData);

/**
 * @brief callback used when the command <code>PictureSettingsStateVideoResolutionsChanged</code> is decoded
 * @param feature The feature controller registred
 * @param type Video resolution type.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PictureSettingsStateVideoResolutionsChangedCallback (eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORESOLUTIONSCHANGED_TYPE _type, void *customData);

/**
 * @brief callback used when the command <code>MediaStreamingStateVideoEnableChanged</code> is decoded
 * @param feature The feature controller registred
 * @param enabled Current video streaming status.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_MediaStreamingStateVideoEnableChangedCallback (eARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED _enabled, void *customData);

/**
 * @brief callback used when the command <code>MediaStreamingStateVideoStreamModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param mode stream mode
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_MediaStreamingStateVideoStreamModeChangedCallback (eARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOSTREAMMODECHANGED_MODE _mode, void *customData);

/**
 * @brief callback used when the command <code>GPSSettingsStateHomeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param latitude Home latitude in decimal degrees
 * @param longitude Home longitude in decimal degrees
 * @param altitude Home altitude in meters
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_GPSSettingsStateHomeChangedCallback (double _latitude, double _longitude, double _altitude, void *customData);

/**
 * @brief callback used when the command <code>GPSSettingsStateResetHomeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param latitude Home latitude in decimal degrees
 * @param longitude Home longitude in decimal degrees
 * @param altitude Home altitude in meters
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_GPSSettingsStateResetHomeChangedCallback (double _latitude, double _longitude, double _altitude, void *customData);

/**
 * @brief callback used when the command <code>GPSSettingsStateGPSFixStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param fixed 1 if gps on drone is fixed, 0 otherwise
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_GPSSettingsStateGPSFixStateChangedCallback (uint8_t _fixed, void *customData);

/**
 * @brief callback used when the command <code>GPSSettingsStateGPSUpdateStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state The state of the gps update
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_GPSSettingsStateGPSUpdateStateChangedCallback (eARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>GPSSettingsStateHomeTypeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param type The type of the home position
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_GPSSettingsStateHomeTypeChangedCallback (eARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE _type, void *customData);

/**
 * @brief callback used when the command <code>GPSSettingsStateReturnHomeDelayChanged</code> is decoded
 * @param feature The feature controller registred
 * @param delay Delay in second
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_GPSSettingsStateReturnHomeDelayChangedCallback (uint16_t _delay, void *customData);

/**
 * @brief callback used when the command <code>GPSSettingsStateGeofenceCenterChanged</code> is decoded
 * @param feature The feature controller registred
 * @param latitude GPS latitude in decimal degrees
 * @param longitude GPS longitude in decimal degrees
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_GPSSettingsStateGeofenceCenterChangedCallback (double _latitude, double _longitude, void *customData);

/**
 * @brief callback used when the command <code>CameraStateOrientation</code> is decoded
 * @param feature The feature controller registred
 * @param tilt Tilt camera consign for the drone [-100;100]
 * @param pan Pan camera consign for the drone [-100;100]
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_CameraStateOrientationCallback (int8_t _tilt, int8_t _pan, void *customData);

/**
 * @brief callback used when the command <code>CameraStateDefaultCameraOrientation</code> is decoded
 * @param feature The feature controller registred
 * @param tilt Tilt value (in degree)
 * @param pan Pan value (in degree)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_CameraStateDefaultCameraOrientationCallback (int8_t _tilt, int8_t _pan, void *customData);

/**
 * @brief callback used when the command <code>CameraStateOrientationV2</code> is decoded
 * @param feature The feature controller registred
 * @param tilt Tilt camera consign for the drone [deg]
 * @param pan Pan camera consign for the drone [deg]
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_CameraStateOrientationV2Callback (float _tilt, float _pan, void *customData);

/**
 * @brief callback used when the command <code>CameraStateDefaultCameraOrientationV2</code> is decoded
 * @param feature The feature controller registred
 * @param tilt Tilt value [deg]
 * @param pan Pan value [deg]
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_CameraStateDefaultCameraOrientationV2Callback (float _tilt, float _pan, void *customData);

/**
 * @brief callback used when the command <code>CameraStateVelocityRange</code> is decoded
 * @param feature The feature controller registred
 * @param max_tilt Absolute max tilt velocity [deg/s]
 * @param max_pan Absolute max pan velocity [deg/s]
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_CameraStateVelocityRangeCallback (float _max_tilt, float _max_pan, void *customData);

/**
 * @brief callback used when the command <code>AntiflickeringStateElectricFrequencyChanged</code> is decoded
 * @param feature The feature controller registred
 * @param frequency Type of the electric frequency
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_AntiflickeringStateElectricFrequencyChangedCallback (eARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY _frequency, void *customData);

/**
 * @brief callback used when the command <code>AntiflickeringStateModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param mode Mode of the anti flickering functionnality
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_AntiflickeringStateModeChangedCallback (eARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE _mode, void *customData);

/**
 * @brief callback used when the command <code>GPSStateNumberOfSatelliteChanged</code> is decoded
 * @param feature The feature controller registred
 * @param numberOfSatellite The number of satellite
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_GPSStateNumberOfSatelliteChangedCallback (uint8_t _numberOfSatellite, void *customData);

/**
 * @brief callback used when the command <code>GPSStateHomeTypeAvailabilityChanged</code> is decoded
 * @param feature The feature controller registred
 * @param type The type of the return home
 * @param available 1 if this type is available, 0 otherwise
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_GPSStateHomeTypeAvailabilityChangedCallback (eARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE _type, uint8_t _available, void *customData);

/**
 * @brief callback used when the command <code>GPSStateHomeTypeChosenChanged</code> is decoded
 * @param feature The feature controller registred
 * @param type The type of the return home chosen
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_GPSStateHomeTypeChosenChangedCallback (eARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE _type, void *customData);

/**
 * @brief callback used when the command <code>PROStateFeatures</code> is decoded
 * @param feature The feature controller registred
 * @param features Bitfield representing enabled features.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_PROStateFeaturesCallback (uint64_t _features, void *customData);

/**
 * @brief callback used when the command <code>AccessoryStateConnectedAccessories</code> is decoded
 * @param feature The feature controller registred
 * @param id Id of the accessory for the session.
 * @param accessory_type Accessory type
 * @param uid Unique Id of the accessory. This id is unique by accessory_type.
 * @param swVersion Software Version of the accessory.
 * @param list_flags List entry attribute Bitfield. 0x01: First: indicate it's the first element of the list. 0x02: Last: indicate it's the last element of the list. 0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored. 0x08: Remove: This value should be removed from the existing list.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_AccessoryStateConnectedAccessoriesCallback (uint8_t _id, eARCOMMANDS_ARDRONE3_ACCESSORYSTATE_CONNECTEDACCESSORIES_ACCESSORY_TYPE _accessory_type, const char * _uid, const char * _swVersion, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>AccessoryStateBattery</code> is decoded
 * @param feature The feature controller registred
 * @param id Id of the accessory for the session.
 * @param batteryLevel Battery level in percentage.
 * @param list_flags List entry attribute Bitfield. 0x01: First: indicate it's the first element of the list. 0x02: Last: indicate it's the last element of the list. 0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored. 0x08: Remove: This value should be removed from the existing list.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_AccessoryStateBatteryCallback (uint8_t _id, uint8_t _batteryLevel, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>SoundStateAlertSound</code> is decoded
 * @param feature The feature controller registred
 * @param state State of the alert sound
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ARDrone3_SoundStateAlertSoundCallback (eARCOMMANDS_ARDRONE3_SOUNDSTATE_ALERTSOUND_STATE _state, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementMediaRecordStatePictureStateChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _state, uint8_t _mass_storage_id, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementMediaRecordStateVideoStateChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE _state, uint8_t _mass_storage_id, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementMediaRecordStatePictureStateChangedV2 (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE _state, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementMediaRecordStateVideoStateChangedV2 (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE _state, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementMediaRecordStateVideoResolutionState (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING _streaming, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING _recording, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementMediaRecordEventPictureEventChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT _event, eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementMediaRecordEventVideoEventChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT _event, eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateFlatTrimChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateFlyingStateChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateAlertStateChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateNavigateHomeStateChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE _state, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON _reason, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStatePositionChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double _latitude, double _longitude, double _altitude, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateSpeedChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _speedX, float _speedY, float _speedZ, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateAttitudeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _roll, float _pitch, float _yaw, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateAutoTakeOffModeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateAltitudeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double _altitude, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateGpsLocationChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double _latitude, double _longitude, double _altitude, int8_t _latitude_accuracy, int8_t _longitude_accuracy, int8_t _altitude_accuracy, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateLandingStateChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_LANDINGSTATECHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateAirSpeedChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _airSpeed, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateMoveToChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double _latitude, double _longitude, double _altitude, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE _orientation_mode, float _heading, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS _status, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateMotionState (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOTIONSTATE_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStatePilotedPOI (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double _latitude, double _longitude, double _altitude, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS _status, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingStateReturnHomeBatteryCapacity (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS _status, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingEventMoveByEnd (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _dX, float _dY, float _dZ, float _dPsi, eARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementNetworkStateWifiScanListChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, const char * _ssid, int16_t _rssi, eARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND _band, uint8_t _channel, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementNetworkStateAllWifiScanChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementNetworkStateWifiAuthChannelListChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND _band, uint8_t _channel, uint8_t _in_or_out, int listIndex, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementNetworkStateAllWifiAuthChannelChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateMaxAltitudeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _current, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateMaxTiltChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _current, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateAbsolutControlChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _on, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateMaxDistanceChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _current, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateNoFlyOverMaxDistanceChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _shouldNotFlyOver, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateAutonomousFlightMaxHorizontalSpeed (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _value, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateAutonomousFlightMaxVerticalSpeed (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _value, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateAutonomousFlightMaxHorizontalAcceleration (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _value, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateAutonomousFlightMaxVerticalAcceleration (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _value, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateAutonomousFlightMaxRotationSpeed (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _value, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateBankedTurnChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateMinAltitudeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _current, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateCirclingDirectionChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGDIRECTIONCHANGED_VALUE _value, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateCirclingRadiusChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint16_t _current, uint16_t _min, uint16_t _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateCirclingAltitudeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint16_t _current, uint16_t _min, uint16_t _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStatePitchModeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_PITCHMODECHANGED_VALUE _value, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPilotingSettingsStateMotionDetection (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _enabled, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSpeedSettingsStateMaxVerticalSpeedChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _current, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSpeedSettingsStateMaxRotationSpeedChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _current, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSpeedSettingsStateHullProtectionChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _present, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSpeedSettingsStateOutdoorChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _outdoor, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSpeedSettingsStateMaxPitchRollRotationSpeedChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _current, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementNetworkSettingsStateWifiSelectionChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE _type, eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND _band, uint8_t _channel, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementNetworkSettingsStateWifiSecurityChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITYCHANGED_TYPE _type, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementNetworkSettingsStateWifiSecurity (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_TYPE _type, const char * _key, eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_KEYTYPE _keyType, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSettingsStateProductMotorVersionListChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _motor_number, const char * _type, const char * _software, const char * _hardware, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSettingsStateProductGPSVersionChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, const char * _software, const char * _hardware, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSettingsStateMotorErrorStateChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _motorIds, eARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR _motorError, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSettingsStateMotorSoftwareVersionChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, const char * _version, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSettingsStateMotorFlightsStatusChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint16_t _nbFlights, uint16_t _lastFlightDuration, uint32_t _totalFlightDuration, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSettingsStateMotorErrorLastErrorChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR _motorError, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSettingsStateP7ID (ARCONTROLLER_FEATURE_ARDrone3_t *feature, const char * _serialID, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSettingsStateCPUID (ARCONTROLLER_FEATURE_ARDrone3_t *feature, const char * _id, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPictureSettingsStatePictureFormatChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE _type, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPictureSettingsStateAutoWhiteBalanceChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE _type, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPictureSettingsStateExpositionChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _value, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPictureSettingsStateSaturationChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _value, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPictureSettingsStateTimelapseChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _enabled, float _interval, float _minInterval, float _maxInterval, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPictureSettingsStateVideoAutorecordChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _enabled, uint8_t _mass_storage_id, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPictureSettingsStateVideoStabilizationModeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE _mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPictureSettingsStateVideoRecordingModeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORECORDINGMODECHANGED_MODE _mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPictureSettingsStateVideoFramerateChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOFRAMERATECHANGED_FRAMERATE _framerate, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPictureSettingsStateVideoResolutionsChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORESOLUTIONSCHANGED_TYPE _type, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementMediaStreamingStateVideoEnableChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED _enabled, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementMediaStreamingStateVideoStreamModeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOSTREAMMODECHANGED_MODE _mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementGPSSettingsStateHomeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double _latitude, double _longitude, double _altitude, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementGPSSettingsStateResetHomeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double _latitude, double _longitude, double _altitude, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementGPSSettingsStateGPSFixStateChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _fixed, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementGPSSettingsStateGPSUpdateStateChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementGPSSettingsStateHomeTypeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE _type, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementGPSSettingsStateReturnHomeDelayChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint16_t _delay, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementGPSSettingsStateGeofenceCenterChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double _latitude, double _longitude, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementCameraStateOrientation (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t _tilt, int8_t _pan, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementCameraStateDefaultCameraOrientation (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t _tilt, int8_t _pan, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementCameraStateOrientationV2 (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _tilt, float _pan, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementCameraStateDefaultCameraOrientationV2 (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _tilt, float _pan, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementCameraStateVelocityRange (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float _max_tilt, float _max_pan, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementAntiflickeringStateElectricFrequencyChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY _frequency, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementAntiflickeringStateModeChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE _mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementGPSStateNumberOfSatelliteChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _numberOfSatellite, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementGPSStateHomeTypeAvailabilityChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE _type, uint8_t _available, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementGPSStateHomeTypeChosenChanged (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE _type, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementPROStateFeatures (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint64_t _features, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementAccessoryStateConnectedAccessories (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _id, eARCOMMANDS_ARDRONE3_ACCESSORYSTATE_CONNECTEDACCESSORIES_ACCESSORY_TYPE _accessory_type, const char * _uid, const char * _swVersion, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementAccessoryStateBattery (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t _id, uint8_t _batteryLevel, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_NewCmdElementSoundStateAlertSound (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_SOUNDSTATE_ALERTSOUND_STATE _state, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE common --- 
 ******************************/
/**
 * @brief Private part of ARCONTROLLER_FEATURE_Common_t.
 */
struct ARCONTROLLER_FEATURE_Common_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
};

/**
 * @brief Send a command <code>NetworkDisconnect</code> in project <code>Common</code>
 * @deprecated
 * Signals the remote that the host will disconnect.
 * 
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendNetworkDisconnect (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>SettingsAllSettings</code> in project <code>Common</code>
 * Ask for all settings.
 * 
 * **Please note that you should not send this command if you are using the
 * libARController API as this library is handling the connection process for you.**
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendSettingsAllSettings (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>SettingsReset</code> in project <code>Common</code>
 * Reset all settings.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendSettingsReset (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>SettingsProductName</code> in project <code>Common</code>
 * Set the product name.
 * It also sets the name of the SSID for Wifi products and advertisement name for BLE products (changed after a reboot of the product).
 * @param feature feature owning the commands
 * @param name Product name
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendSettingsProductName (ARCONTROLLER_FEATURE_Common_t *feature, char * name);

/**
 * @brief Send a command <code>SettingsCountry</code> in project <code>Common</code>
 * Set the country for Wifi products.
 * This can modify Wifi band and/or channel.
 * **Please note that you might be disconnected from the product after changing the country as it changes Wifi parameters.**
 * @param feature feature owning the commands
 * @param code Country code with ISO 3166 format
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendSettingsCountry (ARCONTROLLER_FEATURE_Common_t *feature, char * code);

/**
 * @brief Send a command <code>SettingsAutoCountry</code> in project <code>Common</code>
 * Enable auto-country.
 * If auto-country is set, the drone will guess its Wifi country by itself by checking other Wifi country around it.
 * **Please note that you might be disconnected from the product after changing the country as it changes Wifi parameters.**
 * @param feature feature owning the commands
 * @param automatic Boolean : 0 : Manual / 1 : Auto
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendSettingsAutoCountry (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t automatic);

/**
 * @brief Send a command <code>CommonAllStates</code> in project <code>Common</code>
 * Ask for all states.
 * 
 * **Please note that you should not send this command if you are using the
 * libARController API as this library is handling the connection process for you.**
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendCommonAllStates (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>CommonCurrentDate</code> in project <code>Common</code>
 * Set the date.
 * This date is taken by the drone as its own date.
 * So medias and other files will be dated from this date
 * 
 * **Please note that you should not send this command if you are using the
 * libARController API as this library is handling the connection process for you.**
 * @param feature feature owning the commands
 * @param date Date with ISO-8601 format
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendCommonCurrentDate (ARCONTROLLER_FEATURE_Common_t *feature, char * date);

/**
 * @brief Send a command <code>CommonCurrentTime</code> in project <code>Common</code>
 * Set the time.
 * This time is taken by the drone as its own time.
 * So medias and other files will be dated from this time
 * 
 * **Please note that you should not send this command if you are using the
 * libARController API as this library is handling the connection process for you.**
 * @param feature feature owning the commands
 * @param time Time with ISO-8601 format
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendCommonCurrentTime (ARCONTROLLER_FEATURE_Common_t *feature, char * time);

/**
 * @brief Send a command <code>CommonReboot</code> in project <code>Common</code>
 * Reboot the product.
 * The product will accept this command only if is not flying.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendCommonReboot (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>OverHeatSwitchOff</code> in project <code>Common</code>
 * @deprecated
 * Switch off after an overheat.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendOverHeatSwitchOff (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>OverHeatVentilate</code> in project <code>Common</code>
 * @deprecated
 * Ventilate after an overheat.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendOverHeatVentilate (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>ControllerIsPiloting</code> in project <code>Common</code>
 * Inform about hud entering.
 * Tell the drone that the controller enters/leaves the piloting hud.
 * On a non-flying products it is used to know when a run begins.
 * @param feature feature owning the commands
 * @param piloting 0 when the application is not in the piloting HUD, 1 when it enters the HUD.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendControllerIsPiloting (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t piloting);

/**
 * @brief Send a command <code>WifiSettingsOutdoorSetting</code> in project <code>Common</code>
 * Set wifi indoor/outdoor mode.
 * **Please note that you might be disconnected from the product after changing the indoor/outdoor setting as it changes Wifi parameters.**
 * @param feature feature owning the commands
 * @param outdoor 1 if it should use outdoor wifi settings, 0 otherwise
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendWifiSettingsOutdoorSetting (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t outdoor);

/**
 * @brief Send a command <code>MavlinkStart</code> in project <code>Common</code>
 * Start a FlightPlan based on a mavlink file existing on the drone.
 * 
 * Requirements are:
 * * Product is calibrated
 * * Product should be in outdoor mode
 * * Product has fixed its GPS
 * 
 * @param feature feature owning the commands
 * @param filepath flight plan file path from the mavlink ftp root
 * @param type type of the played mavlink file
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendMavlinkStart (ARCONTROLLER_FEATURE_Common_t *feature, char * filepath, eARCOMMANDS_COMMON_MAVLINK_START_TYPE type);

/**
 * @brief Send a command <code>MavlinkPause</code> in project <code>Common</code>
 * Pause a FlightPlan that was playing.
 * To unpause a FlightPlan, see [StartFlightPlan](#0-11-0)
 * 
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendMavlinkPause (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>MavlinkStop</code> in project <code>Common</code>
 * Stop a FlightPlan that was playing.
 * 
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendMavlinkStop (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>FlightPlanSettingsReturnHomeOnDisconnect</code> in project <code>Common</code>
 * Set ReturnHome behavior during FlightPlan
 * When set, drone will return home, after return home delay, if a disconnection occurs during execution of FlightPlan
 * @param feature feature owning the commands
 * @param value 1 to enable, 0 to disable
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendFlightPlanSettingsReturnHomeOnDisconnect (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t value);

/**
 * @brief Send a command <code>CalibrationMagnetoCalibration</code> in project <code>Common</code>
 * Start or abort magnetometer calibration process.
 * 
 * @param feature feature owning the commands
 * @param calibrate 1 if the calibration should be started, 0 if it should be aborted
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendCalibrationMagnetoCalibration (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t calibrate);

/**
 * @brief Send a command <code>CalibrationPitotCalibration</code> in project <code>Common</code>
 * Start or abort Pitot tube calibration process.
 * 
 * @param feature feature owning the commands
 * @param calibrate 1 if the calibration should be started, 0 if it should be aborted
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendCalibrationPitotCalibration (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t calibrate);

/**
 * @brief Send a command <code>GPSControllerPositionForRun</code> in project <code>Common</code>
 * Set the position of a run.
 * This will let the product know the controller location for the flight/run. The location is typically used to geotag medias.
 * Only used on products that have no gps.
 * Watch out, this command is not used by BLE products.
 * @param feature feature owning the commands
 * @param latitude Controller latitude in decimal degrees
 * @param longitude Controller longitude in decimal degrees
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendGPSControllerPositionForRun (ARCONTROLLER_FEATURE_Common_t *feature, double latitude, double longitude);

/**
 * @brief Send a command <code>AudioControllerReadyForStreaming</code> in project <code>Common</code>
 * Set audio stream direction.
 * @param feature feature owning the commands
 * @param ready Bit field for TX and RX ready. bit 0 is 1 if controller is ready and wants to receive sound (Drone TX) bit 1 is 1 if controller is ready and wants to send sound (Drone RX)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendAudioControllerReadyForStreaming (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t ready);

/**
 * @brief Send a command <code>HeadlightsIntensity</code> in project <code>Common</code>
 * Set lighting LEDs intensity.
 * @param feature feature owning the commands
 * @param left Set the left LED intensity value (0 through 255).
 * @param right Set the right LED intensity value (0 through 255).
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendHeadlightsIntensity (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t left, uint8_t right);

/**
 * @brief Send a command <code>AnimationsStartAnimation</code> in project <code>Common</code>
 * Start a paramaterless animation.
 * List of available animations can be retrieved from [AnimationsStateList](#0-25-0).
 * @param feature feature owning the commands
 * @param anim Animation to start.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendAnimationsStartAnimation (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM anim);

/**
 * @brief Send a command <code>AnimationsStopAnimation</code> in project <code>Common</code>
 * Stop a paramaterless animation.
 * List of running animations can be retrieved from [AnimationsStateList](#0-25-0).
 * @param feature feature owning the commands
 * @param anim Animation to stop.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendAnimationsStopAnimation (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM anim);

/**
 * @brief Send a command <code>AnimationsStopAllAnimations</code> in project <code>Common</code>
 * Stop all running paramaterless animations.
 * List of running animations can be retrieved from [AnimationsStateList](#0-25-0).
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendAnimationsStopAllAnimations (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>AccessoryConfig</code> in project <code>Common</code>
 * Declare an accessory.
 * You can choose the accessory between all accessible for this product.
 * You can get this list through event [SupportedAccessories](#0-27-0).
 * 
 * You can only set the accessory when the modification is enabled.
 * You can know if it possible with the event [AccessoryDeclarationAvailability](#0-27-2).
 * @param feature feature owning the commands
 * @param accessory Accessory configuration to set.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendAccessoryConfig (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY accessory);

/**
 * @brief Send a command <code>ChargerSetMaxChargeRate</code> in project <code>Common</code>
 * @deprecated
 * The product will inform itself the controller about its charging type (see [ChargingInfoChanged](#0-29-3)).
 * @param feature feature owning the commands
 * @param rate The new maximum charge rate.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendChargerSetMaxChargeRate (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_CHARGER_SETMAXCHARGERATE_RATE rate);

/**
 * @brief Send a command <code>FactoryReset</code> in project <code>Common</code>
 * This command will request a factory reset from the prodcut. *The factory reset procedure implies an automatic reboot*, which will be done immediately after receiving this command.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SendFactoryReset (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief callback used when the command <code>NetworkEventDisconnection</code> is decoded
 * @param feature The feature controller registred
 * @param cause Cause of the disconnection of the product
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_NetworkEventDisconnectionCallback (eARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE _cause, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateAllSettingsChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_SettingsStateAllSettingsChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>SettingsStateResetChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_SettingsStateResetChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>SettingsStateProductNameChanged</code> is decoded
 * @param feature The feature controller registred
 * @param name Product name
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_SettingsStateProductNameChangedCallback (const char * _name, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateProductVersionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param software Product software version
 * @param hardware Product hardware version
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_SettingsStateProductVersionChangedCallback (const char * _software, const char * _hardware, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateProductSerialHighChanged</code> is decoded
 * @param feature The feature controller registred
 * @param high Serial high number (hexadecimal value)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_SettingsStateProductSerialHighChangedCallback (const char * _high, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateProductSerialLowChanged</code> is decoded
 * @param feature The feature controller registred
 * @param low Serial low number (hexadecimal value)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_SettingsStateProductSerialLowChangedCallback (const char * _low, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateCountryChanged</code> is decoded
 * @param feature The feature controller registred
 * @param code Country code with ISO 3166 format, empty string means unknown country.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_SettingsStateCountryChangedCallback (const char * _code, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateAutoCountryChanged</code> is decoded
 * @param feature The feature controller registred
 * @param automatic Boolean : 0 : Manual / 1 : Auto
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_SettingsStateAutoCountryChangedCallback (uint8_t _automatic, void *customData);

/**
 * @brief callback used when the command <code>CommonStateAllStatesChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateAllStatesChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>CommonStateBatteryStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param percent Battery percentage
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateBatteryStateChangedCallback (uint8_t _percent, void *customData);

/**
 * @brief callback used when the command <code>CommonStateMassStorageStateListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param mass_storage_id Mass storage id (unique)
 * @param name Mass storage name
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateMassStorageStateListChangedCallback (uint8_t _mass_storage_id, const char * _name, void *customData);

/**
 * @brief callback used when the command <code>CommonStateMassStorageInfoStateListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param mass_storage_id Mass storage state id (unique)
 * @param size Mass storage size in MBytes
 * @param used_size Mass storage used size in MBytes
 * @param plugged Mass storage plugged (1 if mass storage is plugged, otherwise 0)
 * @param full Mass storage full information state (1 if mass storage full, 0 otherwise).
 * @param internal Mass storage internal type state (1 if mass storage is internal, 0 otherwise)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateMassStorageInfoStateListChangedCallback (uint8_t _mass_storage_id, uint32_t _size, uint32_t _used_size, uint8_t _plugged, uint8_t _full, uint8_t _internal, void *customData);

/**
 * @brief callback used when the command <code>CommonStateCurrentDateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param date Date with ISO-8601 format
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateCurrentDateChangedCallback (const char * _date, void *customData);

/**
 * @brief callback used when the command <code>CommonStateCurrentTimeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param time Time with ISO-8601 format
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateCurrentTimeChangedCallback (const char * _time, void *customData);

/**
 * @brief callback used when the command <code>CommonStateMassStorageInfoRemainingListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param free_space Mass storage free space in MBytes
 * @param rec_time Mass storage record time reamining in minute
 * @param photo_remaining Mass storage photo remaining
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateMassStorageInfoRemainingListChangedCallback (uint32_t _free_space, uint16_t _rec_time, uint32_t _photo_remaining, void *customData);

/**
 * @brief callback used when the command <code>CommonStateWifiSignalChanged</code> is decoded
 * @param feature The feature controller registred
 * @param rssi RSSI of the signal between controller and the product (in dbm)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateWifiSignalChangedCallback (int16_t _rssi, void *customData);

/**
 * @brief callback used when the command <code>CommonStateSensorsStatesListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param sensorName Sensor name
 * @param sensorState Sensor state (1 if the sensor is OK, 0 if the sensor is NOT OK)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateSensorsStatesListChangedCallback (eARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME _sensorName, uint8_t _sensorState, void *customData);

/**
 * @brief callback used when the command <code>CommonStateProductModel</code> is decoded
 * @param feature The feature controller registred
 * @param model The Model of the product.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateProductModelCallback (eARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL _model, void *customData);

/**
 * @brief callback used when the command <code>CommonStateCountryListKnown</code> is decoded
 * @param feature The feature controller registred
 * @param listFlags List entry attribute Bitfield. 0x01: First: indicate it's the first element of the list. 0x02: Last: indicate it's the last element of the list. 0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.
 * @param countryCodes Following of country code with ISO 3166 format, separated by ";". Be careful of the command size allowed by the network used. If necessary, split the list in several commands.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateCountryListKnownCallback (uint8_t _listFlags, const char * _countryCodes, void *customData);

/**
 * @brief callback used when the command <code>CommonStateDeprecatedMassStorageContentChanged</code> is decoded
 * @param feature The feature controller registred
 * @param mass_storage_id Mass storage id (unique)
 * @param nbPhotos Number of photos (does not include raw photos)
 * @param nbVideos Number of videos
 * @param nbPuds Number of puds
 * @param nbCrashLogs Number of crash logs
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateDeprecatedMassStorageContentChangedCallback (uint8_t _mass_storage_id, uint16_t _nbPhotos, uint16_t _nbVideos, uint16_t _nbPuds, uint16_t _nbCrashLogs, void *customData);

/**
 * @brief callback used when the command <code>CommonStateMassStorageContent</code> is decoded
 * @param feature The feature controller registred
 * @param mass_storage_id Mass storage id (unique)
 * @param nbPhotos Number of photos (does not include raw photos)
 * @param nbVideos Number of videos
 * @param nbPuds Number of puds
 * @param nbCrashLogs Number of crash logs
 * @param nbRawPhotos Number of raw photos
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateMassStorageContentCallback (uint8_t _mass_storage_id, uint16_t _nbPhotos, uint16_t _nbVideos, uint16_t _nbPuds, uint16_t _nbCrashLogs, uint16_t _nbRawPhotos, void *customData);

/**
 * @brief callback used when the command <code>CommonStateMassStorageContentForCurrentRun</code> is decoded
 * @param feature The feature controller registred
 * @param mass_storage_id Mass storage id (unique)
 * @param nbPhotos Number of photos (does not include raw photos)
 * @param nbVideos Number of videos
 * @param nbRawPhotos Number of raw photos
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateMassStorageContentForCurrentRunCallback (uint8_t _mass_storage_id, uint16_t _nbPhotos, uint16_t _nbVideos, uint16_t _nbRawPhotos, void *customData);

/**
 * @brief callback used when the command <code>CommonStateVideoRecordingTimestamp</code> is decoded
 * @param feature The feature controller registred
 * @param startTimestamp Timestamp in milliseconds since 00:00:00 UTC on 1 January 1970.
 * @param stopTimestamp Timestamp in milliseconds since 00:00:00 UTC on 1 January 1970. 0 mean that video is still recording.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CommonStateVideoRecordingTimestampCallback (uint64_t _startTimestamp, uint64_t _stopTimestamp, void *customData);

/**
 * @brief callback used when the command <code>OverHeatStateOverHeatChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_OverHeatStateOverHeatChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>OverHeatStateOverHeatRegulationChanged</code> is decoded
 * @param feature The feature controller registred
 * @param regulationType Type of overheat regulation : 0 for ventilation, 1 for switch off
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_OverHeatStateOverHeatRegulationChangedCallback (uint8_t _regulationType, void *customData);

/**
 * @brief callback used when the command <code>WifiSettingsStateOutdoorSettingsChanged</code> is decoded
 * @param feature The feature controller registred
 * @param outdoor 1 if it should use outdoor wifi settings, 0 otherwise
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_WifiSettingsStateOutdoorSettingsChangedCallback (uint8_t _outdoor, void *customData);

/**
 * @brief callback used when the command <code>MavlinkStateMavlinkFilePlayingStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state State of the mavlink
 * @param filepath flight plan file path from the mavlink ftp root
 * @param type type of the played mavlink file
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_MavlinkStateMavlinkFilePlayingStateChangedCallback (eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE _state, const char * _filepath, eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE _type, void *customData);

/**
 * @brief callback used when the command <code>MavlinkStateMavlinkPlayErrorStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param error State of play error
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_MavlinkStateMavlinkPlayErrorStateChangedCallback (eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>MavlinkStateMissionItemExecuted</code> is decoded
 * @param feature The feature controller registred
 * @param idx Index of the mission item. This is the place of the mission item in the list of the items of the mission. Begins at 0.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_MavlinkStateMissionItemExecutedCallback (uint32_t _idx, void *customData);

/**
 * @brief callback used when the command <code>FlightPlanSettingsStateReturnHomeOnDisconnectChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state 1 if enabled, 0 if disabled
 * @param isReadOnly 1 if readOnly, 0 if writable
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_FlightPlanSettingsStateReturnHomeOnDisconnectChangedCallback (uint8_t _state, uint8_t _isReadOnly, void *customData);

/**
 * @brief callback used when the command <code>CalibrationStateMagnetoCalibrationStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param xAxisCalibration State of the x axis (roll) calibration : 1 if calibration is done, 0 otherwise
 * @param yAxisCalibration State of the y axis (pitch) calibration : 1 if calibration is done, 0 otherwise
 * @param zAxisCalibration State of the z axis (yaw) calibration : 1 if calibration is done, 0 otherwise
 * @param calibrationFailed 1 if calibration has failed, 0 otherwise. If this arg is 1, consider all previous arg as 0
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CalibrationStateMagnetoCalibrationStateChangedCallback (uint8_t _xAxisCalibration, uint8_t _yAxisCalibration, uint8_t _zAxisCalibration, uint8_t _calibrationFailed, void *customData);

/**
 * @brief callback used when the command <code>CalibrationStateMagnetoCalibrationRequiredState</code> is decoded
 * @param feature The feature controller registred
 * @param required 1 if calibration is required, 0 if current calibration is still valid
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CalibrationStateMagnetoCalibrationRequiredStateCallback (uint8_t _required, void *customData);

/**
 * @brief callback used when the command <code>CalibrationStateMagnetoCalibrationAxisToCalibrateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param axis The axis to calibrate
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CalibrationStateMagnetoCalibrationAxisToCalibrateChangedCallback (eARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS _axis, void *customData);

/**
 * @brief callback used when the command <code>CalibrationStateMagnetoCalibrationStartedChanged</code> is decoded
 * @param feature The feature controller registred
 * @param started 1 if calibration has started, 0 otherwise
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CalibrationStateMagnetoCalibrationStartedChangedCallback (uint8_t _started, void *customData);

/**
 * @brief callback used when the command <code>CalibrationStatePitotCalibrationStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state State of pitot calibration
 * @param lastError lastError : 1 if an error occured and 0 if not
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CalibrationStatePitotCalibrationStateChangedCallback (eARCOMMANDS_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE _state, uint8_t _lastError, void *customData);

/**
 * @brief callback used when the command <code>CameraSettingsStateCameraSettingsChanged</code> is decoded
 * @param feature The feature controller registred
 * @param fov Value of the camera horizontal fov (in degree)
 * @param panMax Value of max pan (right pan) (in degree)
 * @param panMin Value of min pan (left pan) (in degree)
 * @param tiltMax Value of max tilt (top tilt) (in degree)
 * @param tiltMin Value of min tilt (bottom tilt) (in degree)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_CameraSettingsStateCameraSettingsChangedCallback (float _fov, float _panMax, float _panMin, float _tiltMax, float _tiltMin, void *customData);

/**
 * @brief callback used when the command <code>FlightPlanStateAvailabilityStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param AvailabilityState Running a flightPlan file is available (1 running a flightPlan file is available, otherwise 0)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_FlightPlanStateAvailabilityStateChangedCallback (uint8_t _AvailabilityState, void *customData);

/**
 * @brief callback used when the command <code>FlightPlanStateComponentStateListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param component Drone FlightPlan component id (unique)
 * @param State State of the FlightPlan component (1 FlightPlan component OK, otherwise 0)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_FlightPlanStateComponentStateListChangedCallback (eARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT _component, uint8_t _State, void *customData);

/**
 * @brief callback used when the command <code>FlightPlanStateLockStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param LockState 1 if FlightPlan is locked: can't pause or stop FlightPlan. 0 if FlightPlan is unlocked: pause or stop available.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_FlightPlanStateLockStateChangedCallback (uint8_t _LockState, void *customData);

/**
 * @brief callback used when the command <code>FlightPlanEventStartingErrorEvent</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_FlightPlanEventStartingErrorEventCallback (void *customData);

/**
 * @brief callback used when the command <code>FlightPlanEventSpeedBridleEvent</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_FlightPlanEventSpeedBridleEventCallback (void *customData);

/**
 * @brief callback used when the command <code>ARLibsVersionsStateControllerLibARCommandsVersion</code> is decoded
 * @param feature The feature controller registred
 * @param version version of libARCommands ("1.2.3.4" format)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_ARLibsVersionsStateControllerLibARCommandsVersionCallback (const char * _version, void *customData);

/**
 * @brief callback used when the command <code>ARLibsVersionsStateSkyControllerLibARCommandsVersion</code> is decoded
 * @param feature The feature controller registred
 * @param version version of libARCommands ("1.2.3.4" format)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_ARLibsVersionsStateSkyControllerLibARCommandsVersionCallback (const char * _version, void *customData);

/**
 * @brief callback used when the command <code>ARLibsVersionsStateDeviceLibARCommandsVersion</code> is decoded
 * @param feature The feature controller registred
 * @param version version of libARCommands ("1.2.3.4" format)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_ARLibsVersionsStateDeviceLibARCommandsVersionCallback (const char * _version, void *customData);

/**
 * @brief callback used when the command <code>AudioStateAudioStreamingRunning</code> is decoded
 * @param feature The feature controller registred
 * @param running Bit field for TX and RX running bit 0 is 1 if Drone TX is running bit 1 is 1 if Drone RX is running
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_AudioStateAudioStreamingRunningCallback (uint8_t _running, void *customData);

/**
 * @brief callback used when the command <code>HeadlightsStateIntensityChanged</code> is decoded
 * @param feature The feature controller registred
 * @param left The intensity value for the left LED (0 through 255).
 * @param right The intensity value for the right LED (0 through 255).
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_HeadlightsStateIntensityChangedCallback (uint8_t _left, uint8_t _right, void *customData);

/**
 * @brief callback used when the command <code>AnimationsStateList</code> is decoded
 * @param feature The feature controller registred
 * @param anim Animation type.
 * @param state State of the animation
 * @param error Error to explain the state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_AnimationsStateListCallback (eARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM _anim, eARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_STATE _state, eARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>AccessoryStateSupportedAccessoriesListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param accessory Accessory configurations supported by the product.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_AccessoryStateSupportedAccessoriesListChangedCallback (eARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY _accessory, void *customData);

/**
 * @brief callback used when the command <code>AccessoryStateAccessoryConfigChanged</code> is decoded
 * @param feature The feature controller registred
 * @param newAccessory Accessory configuration reported by firmware.
 * @param error Error code.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_AccessoryStateAccessoryConfigChangedCallback (eARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY _newAccessory, eARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>AccessoryStateAccessoryConfigModificationEnabled</code> is decoded
 * @param feature The feature controller registred
 * @param enabled 1 if the modification of the accessory Config is enabled, 0 otherwise
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_AccessoryStateAccessoryConfigModificationEnabledCallback (uint8_t _enabled, void *customData);

/**
 * @brief callback used when the command <code>ChargerStateMaxChargeRateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param rate The current maximum charge rate.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_ChargerStateMaxChargeRateChangedCallback (eARCOMMANDS_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE _rate, void *customData);

/**
 * @brief callback used when the command <code>ChargerStateCurrentChargeStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param status Charger status.
 * @param phase The current charging phase.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_ChargerStateCurrentChargeStateChangedCallback (eARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS _status, eARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE _phase, void *customData);

/**
 * @brief callback used when the command <code>ChargerStateLastChargeRateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param rate The charge rate recorded by the firmware for the last charge.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_ChargerStateLastChargeRateChangedCallback (eARCOMMANDS_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE _rate, void *customData);

/**
 * @brief callback used when the command <code>ChargerStateChargingInfo</code> is decoded
 * @param feature The feature controller registred
 * @param phase The current charging phase.
 * @param rate The charge rate. If phase is DISCHARGING, refers to the last charge.
 * @param intensity The charging intensity, in dA. (12dA = 1,2A) ; If phase is DISCHARGING, refers to the last charge. Equals to 0 if not known.
 * @param fullChargingTime The full charging time estimated, in minute. If phase is DISCHARGING, refers to the last charge. Equals to 0 if not known.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_ChargerStateChargingInfoCallback (eARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE _phase, eARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_RATE _rate, uint8_t _intensity, uint8_t _fullChargingTime, void *customData);

/**
 * @brief callback used when the command <code>RunStateRunIdChanged</code> is decoded
 * @param feature The feature controller registred
 * @param runId Id of the run
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Common_RunStateRunIdChangedCallback (const char * _runId, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementNetworkEventDisconnection (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE _cause, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementSettingsStateAllSettingsChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementSettingsStateResetChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementSettingsStateProductNameChanged (ARCONTROLLER_FEATURE_Common_t *feature, const char * _name, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementSettingsStateProductVersionChanged (ARCONTROLLER_FEATURE_Common_t *feature, const char * _software, const char * _hardware, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementSettingsStateProductSerialHighChanged (ARCONTROLLER_FEATURE_Common_t *feature, const char * _high, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementSettingsStateProductSerialLowChanged (ARCONTROLLER_FEATURE_Common_t *feature, const char * _low, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementSettingsStateCountryChanged (ARCONTROLLER_FEATURE_Common_t *feature, const char * _code, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementSettingsStateAutoCountryChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _automatic, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateAllStatesChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateBatteryStateChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _percent, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateMassStorageStateListChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _mass_storage_id, const char * _name, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateMassStorageInfoStateListChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _mass_storage_id, uint32_t _size, uint32_t _used_size, uint8_t _plugged, uint8_t _full, uint8_t _internal, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateCurrentDateChanged (ARCONTROLLER_FEATURE_Common_t *feature, const char * _date, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateCurrentTimeChanged (ARCONTROLLER_FEATURE_Common_t *feature, const char * _time, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateMassStorageInfoRemainingListChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint32_t _free_space, uint16_t _rec_time, uint32_t _photo_remaining, int listIndex, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateWifiSignalChanged (ARCONTROLLER_FEATURE_Common_t *feature, int16_t _rssi, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateSensorsStatesListChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME _sensorName, uint8_t _sensorState, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateProductModel (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL _model, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateCountryListKnown (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _listFlags, const char * _countryCodes, int listIndex, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateDeprecatedMassStorageContentChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _mass_storage_id, uint16_t _nbPhotos, uint16_t _nbVideos, uint16_t _nbPuds, uint16_t _nbCrashLogs, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateMassStorageContent (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _mass_storage_id, uint16_t _nbPhotos, uint16_t _nbVideos, uint16_t _nbPuds, uint16_t _nbCrashLogs, uint16_t _nbRawPhotos, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateMassStorageContentForCurrentRun (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _mass_storage_id, uint16_t _nbPhotos, uint16_t _nbVideos, uint16_t _nbRawPhotos, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCommonStateVideoRecordingTimestamp (ARCONTROLLER_FEATURE_Common_t *feature, uint64_t _startTimestamp, uint64_t _stopTimestamp, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementOverHeatStateOverHeatChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementOverHeatStateOverHeatRegulationChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _regulationType, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementWifiSettingsStateOutdoorSettingsChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _outdoor, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementMavlinkStateMavlinkFilePlayingStateChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE _state, const char * _filepath, eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE _type, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementMavlinkStateMavlinkPlayErrorStateChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementMavlinkStateMissionItemExecuted (ARCONTROLLER_FEATURE_Common_t *feature, uint32_t _idx, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementFlightPlanSettingsStateReturnHomeOnDisconnectChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _state, uint8_t _isReadOnly, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCalibrationStateMagnetoCalibrationStateChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _xAxisCalibration, uint8_t _yAxisCalibration, uint8_t _zAxisCalibration, uint8_t _calibrationFailed, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCalibrationStateMagnetoCalibrationRequiredState (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _required, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCalibrationStateMagnetoCalibrationAxisToCalibrateChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS _axis, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCalibrationStateMagnetoCalibrationStartedChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _started, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCalibrationStatePitotCalibrationStateChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE _state, uint8_t _lastError, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementCameraSettingsStateCameraSettingsChanged (ARCONTROLLER_FEATURE_Common_t *feature, float _fov, float _panMax, float _panMin, float _tiltMax, float _tiltMin, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementFlightPlanStateAvailabilityStateChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _AvailabilityState, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementFlightPlanStateComponentStateListChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT _component, uint8_t _State, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementFlightPlanStateLockStateChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _LockState, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementFlightPlanEventStartingErrorEvent (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementFlightPlanEventSpeedBridleEvent (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementARLibsVersionsStateControllerLibARCommandsVersion (ARCONTROLLER_FEATURE_Common_t *feature, const char * _version, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementARLibsVersionsStateSkyControllerLibARCommandsVersion (ARCONTROLLER_FEATURE_Common_t *feature, const char * _version, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementARLibsVersionsStateDeviceLibARCommandsVersion (ARCONTROLLER_FEATURE_Common_t *feature, const char * _version, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementAudioStateAudioStreamingRunning (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _running, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementHeadlightsStateIntensityChanged (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _left, uint8_t _right, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementAnimationsStateList (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM _anim, eARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_STATE _state, eARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementAccessoryStateSupportedAccessoriesListChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY _accessory, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementAccessoryStateAccessoryConfigChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY _newAccessory, eARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementAccessoryStateAccessoryConfigModificationEnabled (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t _enabled, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementChargerStateMaxChargeRateChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE _rate, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementChargerStateCurrentChargeStateChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS _status, eARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE _phase, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementChargerStateLastChargeRateChanged (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE _rate, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementChargerStateChargingInfo (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE _phase, eARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_RATE _rate, uint8_t _intensity, uint8_t _fullChargingTime, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_NewCmdElementRunStateRunIdChanged (ARCONTROLLER_FEATURE_Common_t *feature, const char * _runId, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE controller_info --- 
 ******************************/
/**
 * @brief Parameters to send through the command <code>Gps</code> in project <code>ControllerInfo</code>
 */
typedef struct
{
    double latitude; /**< */
    double longitude; /**< */
    float altitude; /**< */
    float horizontal_accuracy; /**< */
    float vertical_accuracy; /**< */
    float north_speed; /**< */
    float east_speed; /**< */
    float down_speed; /**< */
    double timestamp; /**< */
    void  *data; /**< Custom data used to manage the sending of unacknowledged commands. */
}ARCONTROLLER_ControllerInfo_GpsParameters_t;

/**
 * @brief Parameters to send through the command <code>Barometer</code> in project <code>ControllerInfo</code>
 */
typedef struct
{
    float pressure; /**< */
    double timestamp; /**< */
    void  *data; /**< Custom data used to manage the sending of unacknowledged commands. */
}ARCONTROLLER_ControllerInfo_BarometerParameters_t;

/**
 * @brief Private part of ARCONTROLLER_FEATURE_ControllerInfo_t.
 */
struct ARCONTROLLER_FEATURE_ControllerInfo_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
    ARCONTROLLER_ControllerInfo_GpsParameters_t *GpsParameters; /**< */
    ARCONTROLLER_ControllerInfo_BarometerParameters_t *BarometerParameters; /**< */
};

/**
 * @brief Send a command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param latitude Latitude of the controller (in deg)
 * @param longitude Longitude of the controller (in deg)
 * @param altitude Altitude of the controller (in meters, according to sea level)
 * @param horizontal_accuracy Horizontal accuracy (in meter)
 * @param vertical_accuracy Vertical accuracy (in meter)
 * @param north_speed North speed (in meter per second)
 * @param east_speed East speed (in meter per second)
 * @param down_speed Vertical speed (in meter per second) (down is positive)
 * @param timestamp Timestamp of the gps info
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SendGps (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, double latitude, double longitude, float altitude, float horizontal_accuracy, float vertical_accuracy, float north_speed, float east_speed, float down_speed, double timestamp);

/**
 * @brief Set the parameters to send through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param latitude Latitude of the controller (in deg)
 * @param longitude Longitude of the controller (in deg)
 * @param altitude Altitude of the controller (in meters, according to sea level)
 * @param horizontal_accuracy Horizontal accuracy (in meter)
 * @param vertical_accuracy Vertical accuracy (in meter)
 * @param north_speed North speed (in meter per second)
 * @param east_speed East speed (in meter per second)
 * @param down_speed Vertical speed (in meter per second) (down is positive)
 * @param timestamp Timestamp of the gps info
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetGps (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, double _latitude, double _longitude, float _altitude, float _horizontal_accuracy, float _vertical_accuracy, float _north_speed, float _east_speed, float _down_speed, double _timestamp);

/**
 * @brief Set latitude sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param latitude Latitude of the controller (in deg)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetGpsLatitude (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, double latitude);

/**
 * @brief Set longitude sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param longitude Longitude of the controller (in deg)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetGpsLongitude (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, double longitude);

/**
 * @brief Set altitude sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param altitude Altitude of the controller (in meters, according to sea level)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetGpsAltitude (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float altitude);

/**
 * @brief Set horizontal_accuracy sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param horizontal_accuracy Horizontal accuracy (in meter)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetGpsHorizontalAccuracy (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float horizontal_accuracy);

/**
 * @brief Set vertical_accuracy sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param vertical_accuracy Vertical accuracy (in meter)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetGpsVerticalAccuracy (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float vertical_accuracy);

/**
 * @brief Set north_speed sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param north_speed North speed (in meter per second)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetGpsNorthSpeed (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float north_speed);

/**
 * @brief Set east_speed sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param east_speed East speed (in meter per second)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetGpsEastSpeed (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float east_speed);

/**
 * @brief Set down_speed sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param down_speed Vertical speed (in meter per second) (down is positive)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetGpsDownSpeed (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float down_speed);

/**
 * @brief Set timestamp sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param timestamp Timestamp of the gps info
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetGpsTimestamp (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, double timestamp);

/**
 * @brief Send a command <code>Barometer</code> in project <code>ControllerInfo</code>
 * 
 * @param feature feature owning the commands
 * @param pressure Atmospheric pressure in Pa
 * @param timestamp Timestamp of the barometer info
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SendBarometer (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float pressure, double timestamp);

/**
 * @brief Set the parameters to send through the command <code>Barometer</code> in project <code>ControllerInfo</code>
 * 
 * @param feature feature owning the commands
 * @param pressure Atmospheric pressure in Pa
 * @param timestamp Timestamp of the barometer info
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetBarometer (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float _pressure, double _timestamp);

/**
 * @brief Set pressure sent through the command <code>Barometer</code> in project <code>ControllerInfo</code>
 * 
 * @param feature feature owning the commands
 * @param pressure Atmospheric pressure in Pa
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetBarometerPressure (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float pressure);

/**
 * @brief Set timestamp sent through the command <code>Barometer</code> in project <code>ControllerInfo</code>
 * 
 * @param feature feature owning the commands
 * @param timestamp Timestamp of the barometer info
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetBarometerTimestamp (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, double timestamp);


/*******************************
 * --- FEATURE debug --- 
 ******************************/
/**
 * @brief Private part of ARCONTROLLER_FEATURE_Debug_t.
 */
struct ARCONTROLLER_FEATURE_Debug_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
};

/**
 * @brief Send a command <code>GetAllSettings</code> in project <code>Debug</code>
 * Cmd sent by controller to get all settings info (generate "settings_info" events).
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Debug_SendGetAllSettings (ARCONTROLLER_FEATURE_Debug_t *feature);

/**
 * @brief Send a command <code>SetSetting</code> in project <code>Debug</code>
 * Change setting value.
 * Cmd sent by controller to change a writable setting.
 * @param feature feature owning the commands
 * @param id Setting Id.
 * @param value New setting value (string encoded).
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Debug_SendSetSetting (ARCONTROLLER_FEATURE_Debug_t *feature, uint16_t id, char * value);

/**
 * @brief callback used when the command <code>SettingsInfo</code> is decoded
 * @param feature The feature controller registred
 * @param list_flags List entry attribute Bitfield. 0x01: First: indicate it's the first element of the list. 0x02: Last: indicate it's the last element of the list. 0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored. Flags use by maps and lists
 * @param id Setting Id.
 * @param label Setting displayed label (single line).
 * @param type Setting type. Setting type.
 * @param mode Setting mode. Setting mode.
 * @param range_min Setting range minimal value for decimal type.
 * @param range_max Setting range max value for decimal type.
 * @param range_step Setting step value for decimal type
 * @param value Current Setting value (string encoded).
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Debug_SettingsInfoCallback (uint8_t _list_flags, uint16_t _id, const char * _label, eARCOMMANDS_DEBUG_SETTING_TYPE _type, eARCOMMANDS_DEBUG_SETTING_MODE _mode, const char * _range_min, const char * _range_max, const char * _range_step, const char * _value, void *customData);

/**
 * @brief callback used when the command <code>SettingsList</code> is decoded
 * @param feature The feature controller registred
 * @param id Setting Id.
 * @param value New setting value (string encoded).
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Debug_SettingsListCallback (uint16_t _id, const char * _value, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Debug_NewCmdElementSettingsInfo (ARCONTROLLER_FEATURE_Debug_t *feature, uint8_t _list_flags, uint16_t _id, const char * _label, eARCOMMANDS_DEBUG_SETTING_TYPE _type, eARCOMMANDS_DEBUG_SETTING_MODE _mode, const char * _range_min, const char * _range_max, const char * _range_step, const char * _value, int listIndex, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Debug_NewCmdElementSettingsList (ARCONTROLLER_FEATURE_Debug_t *feature, uint16_t _id, const char * _value, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE drone_manager --- 
 ******************************/
/**
 * @brief Private part of ARCONTROLLER_FEATURE_DroneManager_t.
 */
struct ARCONTROLLER_FEATURE_DroneManager_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
};

/**
 * @brief Send a command <code>DiscoverDrones</code> in project <code>DroneManager</code>
 * The list will contain:
 * * known drones not currently visible. * known drones currently visible. * unknown drones currently visible.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_DroneManager_SendDiscoverDrones (ARCONTROLLER_FEATURE_DroneManager_t *feature);

/**
 * @brief Send a command <code>Connect</code> in project <code>DroneManager</code>
 * Request connection to a specific drone. Override the auto-selected drone.
 * @param feature feature owning the commands
 * @param serial Serial number of the drone.
 * @param key Security key (passphrase) to use. This arg is ignored if the drone security is 'none'. If the drone manager has a saved key for the drone, pass an empty string to use it
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_DroneManager_SendConnect (ARCONTROLLER_FEATURE_DroneManager_t *feature, char * serial, char * key);

/**
 * @brief Send a command <code>Forget</code> in project <code>DroneManager</code>
 * Forget the given drone. If the drone is the selected one, the auto-selection will run again.
 * @param feature feature owning the commands
 * @param serial Serial number of the drone to forget.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_DroneManager_SendForget (ARCONTROLLER_FEATURE_DroneManager_t *feature, char * serial);

/**
 * @brief callback used when the command <code>DroneListItem</code> is decoded
 * @param feature The feature controller registred
 * @param serial Serial number of the drone.
 * @param model Model id of the drone.
 * @param name Name (SSID) of the drone.
 * @param connection_order 0 if the drone is unknwon (never connected). Else, order of last connection (1 = most recent)
 * @param active 1 if the drone is active (the drone manager tries to connect or is connected to it) 0 if the drone is not the active one.
 * @param visible 1 if the drone is currently visible, 0 otherwise.
 * @param security Security method used by the drone. The security of the drone network.
 * @param has_saved_key 1 if the drone manager has a saved security key for the drone, 0 otherwise. If security method is not 'none', and this value is 0, then the controller should prompt the user for a passphrase before sending a connect.
 * @param rssi The drone rssi (wifi signal strength estimation). The value is meaningless if the drone is not visible.
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_DroneManager_DroneListItemCallback (const char * _serial, uint16_t _model, const char * _name, uint8_t _connection_order, uint8_t _active, uint8_t _visible, eARCOMMANDS_DRONE_MANAGER_SECURITY _security, uint8_t _has_saved_key, int8_t _rssi, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>ConnectionState</code> is decoded
 * @param feature The feature controller registred
 * @param state Current state of the connection. The state of the connection to a drone.
 * @param serial Serial number of the drone.
 * @param model Model id of the drone.
 * @param name Name (SSID) of the drone.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_DroneManager_ConnectionStateCallback (eARCOMMANDS_DRONE_MANAGER_CONNECTION_STATE _state, const char * _serial, uint16_t _model, const char * _name, void *customData);

/**
 * @brief callback used when the command <code>AuthenticationFailed</code> is decoded
 * @param feature The feature controller registred
 * @param serial Serial number of the drone.
 * @param model Model id of the drone.
 * @param name Name (SSID) of the drone.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_DroneManager_AuthenticationFailedCallback (const char * _serial, uint16_t _model, const char * _name, void *customData);

/**
 * @brief callback used when the command <code>ConnectionRefused</code> is decoded
 * @param feature The feature controller registred
 * @param serial Serial number of the drone.
 * @param model Model id of the drone.
 * @param name Name (SSID) of the drone.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_DroneManager_ConnectionRefusedCallback (const char * _serial, uint16_t _model, const char * _name, void *customData);

/**
 * @brief callback used when the command <code>KnownDroneItem</code> is decoded
 * @param feature The feature controller registred
 * @param serial Serial number of the drone.
 * @param model Model id of the drone.
 * @param name Last visible Name (SSID) of the drone.
 * @param security Security method used by the drone. The security of the drone network.
 * @param has_saved_key 1 if the drone manager has a saved security key for the drone, 0 otherwise. If security method is not 'none', and this value is 0, then the controller should prompt the user for a passphrase before sending a connect.
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_DroneManager_KnownDroneItemCallback (const char * _serial, uint16_t _model, const char * _name, eARCOMMANDS_DRONE_MANAGER_SECURITY _security, uint8_t _has_saved_key, uint8_t _list_flags, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_DroneManager_NewCmdElementDroneListItem (ARCONTROLLER_FEATURE_DroneManager_t *feature, const char * _serial, uint16_t _model, const char * _name, uint8_t _connection_order, uint8_t _active, uint8_t _visible, eARCOMMANDS_DRONE_MANAGER_SECURITY _security, uint8_t _has_saved_key, int8_t _rssi, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_DroneManager_NewCmdElementConnectionState (ARCONTROLLER_FEATURE_DroneManager_t *feature, eARCOMMANDS_DRONE_MANAGER_CONNECTION_STATE _state, const char * _serial, uint16_t _model, const char * _name, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_DroneManager_NewCmdElementAuthenticationFailed (ARCONTROLLER_FEATURE_DroneManager_t *feature, const char * _serial, uint16_t _model, const char * _name, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_DroneManager_NewCmdElementConnectionRefused (ARCONTROLLER_FEATURE_DroneManager_t *feature, const char * _serial, uint16_t _model, const char * _name, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_DroneManager_NewCmdElementKnownDroneItem (ARCONTROLLER_FEATURE_DroneManager_t *feature, const char * _serial, uint16_t _model, const char * _name, eARCOMMANDS_DRONE_MANAGER_SECURITY _security, uint8_t _has_saved_key, uint8_t _list_flags, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE follow_me --- 
 ******************************/
/**
 * @brief Private part of ARCONTROLLER_FEATURE_FollowMe_t.
 */
struct ARCONTROLLER_FEATURE_FollowMe_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
};

/**
 * @brief Send a command <code>Start</code> in project <code>FollowMe</code>
 * Start a FollowMe with all its params set to the default params.
 * Sending this command will stop other running followMe.
 * @param feature feature owning the commands
 * @param mode FollowMe mode
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_SendStart (ARCONTROLLER_FEATURE_FollowMe_t *feature, eARCOMMANDS_FOLLOW_ME_MODE mode);

/**
 * @brief Send a command <code>Stop</code> in project <code>FollowMe</code>
 * Stop current followMe.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_SendStop (ARCONTROLLER_FEATURE_FollowMe_t *feature);

/**
 * @brief Send a command <code>ConfigureGeographic</code> in project <code>FollowMe</code>
 * Configure the geographic FollowMe.
 * This should only be taken in account if arg behavior in [state](#134-3) is equal to Follow.
 * @param feature feature owning the commands
 * @param use_default Geographic and Relative follow me configuration parameters
 * @param distance The distance leader-follower in meter Not used when arg start is at 0
 * @param elevation The elevation leader-follower in rad (not used when arg start is at 0)
 * @param azimuth The azimuth north-leader-follower in rad (not used when arg start is at 0)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_SendConfigureGeographic (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float distance, float elevation, float azimuth);

/**
 * @brief Send a command <code>ConfigureRelative</code> in project <code>FollowMe</code>
 * Configure the relative FollowMe.
 * This should only be taken in account if arg behavior in [state](#134-3) is equal to Follow
 * @param feature feature owning the commands
 * @param use_default Geographic and Relative follow me configuration parameters
 * @param distance The distance leader-follower in meter
 * @param elevation The elevation leader-follower in rad
 * @param azimuth The azimuth north-leader-follower in rad
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_SendConfigureRelative (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float distance, float elevation, float azimuth);

/**
 * @brief Send a command <code>StopAnimation</code> in project <code>FollowMe</code>
 * Stop current followMe animation.
 * This message has been deprecated. Please use the animation feature.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_SendStopAnimation (ARCONTROLLER_FEATURE_FollowMe_t *feature);

/**
 * @brief Send a command <code>StartHelicoidAnim</code> in project <code>FollowMe</code>
 * Start a helicoid animation.
 * The helicoid animation allows the drone to revolve around the target while going up, with a fixed radius.
 * This message has been deprecated. Please use the animation feature.
 * @param feature feature owning the commands
 * @param use_default Helicoid animation configuration parameters.
 * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1
 * @param revolution_number The number of revolution (in turn) Negative value is infinite Example: 1.5 makes an entire turn plus half of a turn Not used when revolutionNb_is_default is 1
 * @param vertical_distance Distance that should be made by the product to reach the top of the helicoid in m Not used when verticalDistance_is_default is 1
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_SendStartHelicoidAnim (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float speed, float revolution_number, float vertical_distance);

/**
 * @brief Send a command <code>StartSwingAnim</code> in project <code>FollowMe</code>
 * Start a swing animation.
 * The swing animation enables a vertical point of view while the drone passes over the target.
 * This message has been deprecated. Please use the animation feature.
 * @param feature feature owning the commands
 * @param use_default Swing configure parameters.
 * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1 Not used when start is 0
 * @param vertical_distance Distance that should be made by the product to reach the top of the swing in m Not used when verticalDistance_is_default is 1 Not used when start is 0
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_SendStartSwingAnim (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float speed, float vertical_distance);

/**
 * @brief Send a command <code>StartBoomerangAnim</code> in project <code>FollowMe</code>
 * Start a boomerang animation.
 * The boomerang animation enables a zoom-out/zoom-in trajectory while preserving the framing chosen by the user.
 * This message has been deprecated. Please use the animation feature.
 * @param feature feature owning the commands
 * @param use_default Boomerang animation configure parameters.
 * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1 Not used when start is 0
 * @param distance Distance that should be made by the product to reach its return point in m Not used when distance_is_default is 1 Not used when start is 0
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_SendStartBoomerangAnim (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float speed, float distance);

/**
 * @brief Send a command <code>StartCandleAnim</code> in project <code>FollowMe</code>
 * Start a candle animation.
 * The candle animation enables a zoom-in directly on the target followed by a vertical zoom-out.
 * This message has been deprecated. Please use the animation feature.
 * @param feature feature owning the commands
 * @param use_default Candle animation configure parameters.
 * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1 Not used when start is 0
 * @param vertical_distance Distance that should be made by the product to reach the top of the vertical zoom-out in m Not used when verticalDistance_is_default is 1 Not used when start is 0
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_SendStartCandleAnim (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float speed, float vertical_distance);

/**
 * @brief Send a command <code>StartDollySlideAnim</code> in project <code>FollowMe</code>
 * Start a dolly slide animation.
 * Allows the drone to catch up to the target before flying past it, creating a zoom-in/zoom_out effect without a curved path.
 * This message has been deprecated. Please use the animation feature.
 * @param feature feature owning the commands
 * @param use_default Dolly slide animation configure parameters.
 * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1 Not used when start is 0
 * @param angle Desired angle Product-User-Target in rad Not used when angle_is_default is 1 Not used when start is 0
 * @param horizontal_distance Distance that should be made by the product to reach its target in m Not used when horizontalDistance_is_default is 1 Not used when start is 0
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_SendStartDollySlideAnim (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float speed, float angle, float horizontal_distance);

/**
 * @brief Send a command <code>TargetFramingPosition</code> in project <code>FollowMe</code>
 * Set the desired target framing in the video.
 * @param feature feature owning the commands
 * @param horizontal Horizontal position in the video (in %, from left to right)
 * @param vertical Vertical position in the video (in %, from bottom to top)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_SendTargetFramingPosition (ARCONTROLLER_FEATURE_FollowMe_t *feature, int8_t horizontal, int8_t vertical);

/**
 * @brief Send a command <code>TargetImageDetection</code> in project <code>FollowMe</code>
 * Send vision detection results.
 * @param feature feature owning the commands
 * @param target_azimuth Horizontal north-drone-target angle in radian
 * @param target_elevation Vertical angle horizon-drone-target in radian
 * @param change_of_scale Normalized relative radial speed in 1/second
 * @param confidence_index Confidence index of the detection (from 0 to 255, the highest is the best)
 * @param is_new_selection Boolean. 1 if the selection is new, 0 otherwise
 * @param timestamp Acquisition time of processed picture in millisecond
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_SendTargetImageDetection (ARCONTROLLER_FEATURE_FollowMe_t *feature, float target_azimuth, float target_elevation, float change_of_scale, uint8_t confidence_index, uint8_t is_new_selection, uint64_t timestamp);

/**
 * @brief callback used when the command <code>State</code> is decoded
 * @param feature The feature controller registred
 * @param mode Mode asked by user FollowMe mode
 * @param behavior Behavior of the drone according to the asked mode FollowMe behavior
 * @param animation Current animation. This parameter has been deprecated. Please use the animation feature. FollowMe animation type
 * @param animation_available List of available animations This parameter has been deprecated. Please use the animation feature. FollowMe animation type
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_FollowMe_StateCallback (eARCOMMANDS_FOLLOW_ME_MODE _mode, eARCOMMANDS_FOLLOW_ME_BEHAVIOR _behavior, eARCOMMANDS_FOLLOW_ME_ANIMATION _animation, uint16_t _animation_available, void *customData);

/**
 * @brief callback used when the command <code>ModeInfo</code> is decoded
 * @param feature The feature controller registred
 * @param mode FollowMe mode
 * @param missing_requirements List of missing requirements to enter this mode on start. Bit is 0 if the input is not ok, 1 if the input is ok. If at least one input is missing, drone won't able to follow the target. It won't use any fallback either Input values used by the FollowMe
 * @param improvements List of inputs that can improve the mode. Bit is 0 if the input is not ok, 1 if the input is ok. If at least one input is missing, a downgraded mode will be used. See behavior Input values used by the FollowMe
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_FollowMe_ModeInfoCallback (eARCOMMANDS_FOLLOW_ME_MODE _mode, uint16_t _missing_requirements, uint16_t _improvements, void *customData);

/**
 * @brief callback used when the command <code>GeographicConfig</code> is decoded
 * @param feature The feature controller registred
 * @param use_default Geographic and Relative follow me configuration parameters
 * @param distance The distance leader-follower in meter If distance is default, this value is the current drone distance
 * @param elevation The elevation leader-follower in rad If elevation is default, this value is the current leader to drone elevation
 * @param azimuth The azimuth north-leader-follower in rad If azimuth is default, this value is the current leader to drone azimuth
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_FollowMe_GeographicConfigCallback (uint8_t _use_default, float _distance, float _elevation, float _azimuth, void *customData);

/**
 * @brief callback used when the command <code>RelativeConfig</code> is decoded
 * @param feature The feature controller registred
 * @param use_default Geographic and Relative follow me configuration parameters
 * @param distance The distance leader-follower in meter If distance is default, this value is the current drone distance
 * @param elevation The elevation leader-follower in rad If elevation is default, this value is the current leader to drone elevation
 * @param azimuth The azimuth course-leader-follower in rad If azimuth is default, this value is the current leader to drone azimuth
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_FollowMe_RelativeConfigCallback (uint8_t _use_default, float _distance, float _elevation, float _azimuth, void *customData);

/**
 * @brief callback used when the command <code>TargetTrajectory</code> is decoded
 * @param feature The feature controller registred
 * @param latitude Target latitude (in degrees)
 * @param longitude Target longitude (in degrees)
 * @param altitude Target altitude (in meters, relative to sea level)
 * @param north_speed Target north speed (in m/s)
 * @param east_speed Target east speed (in m/s)
 * @param down_speed Target down speed (in m/s)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_FollowMe_TargetTrajectoryCallback (double _latitude, double _longitude, float _altitude, float _north_speed, float _east_speed, float _down_speed, void *customData);

/**
 * @brief callback used when the command <code>HelicoidAnimConfig</code> is decoded
 * @param feature The feature controller registred
 * @param use_default Helicoid animation configuration parameters.
 * @param speed The speed of the anim in m/s
 * @param revolution_nb The number of revolution (in turn) Negative value is infinite
 * @param vertical_distance Distance that will be made by the product to reach the top of the helicoid in m
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_FollowMe_HelicoidAnimConfigCallback (uint8_t _use_default, float _speed, float _revolution_nb, float _vertical_distance, void *customData);

/**
 * @brief callback used when the command <code>SwingAnimConfig</code> is decoded
 * @param feature The feature controller registred
 * @param use_default Swing configure parameters.
 * @param speed The speed of the anim in m/s
 * @param vertical_distance Distance that will be made by the product to reach the top of the swing in m
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_FollowMe_SwingAnimConfigCallback (uint8_t _use_default, float _speed, float _vertical_distance, void *customData);

/**
 * @brief callback used when the command <code>BoomerangAnimConfig</code> is decoded
 * @param feature The feature controller registred
 * @param use_default Boomerang animation configure parameters.
 * @param speed The speed of the anim in m/s
 * @param distance Distance that will be made by the product to reach its return point in m
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_FollowMe_BoomerangAnimConfigCallback (uint8_t _use_default, float _speed, float _distance, void *customData);

/**
 * @brief callback used when the command <code>CandleAnimConfig</code> is decoded
 * @param feature The feature controller registred
 * @param use_default Candle animation configure parameters.
 * @param speed The speed of the anim in m/s
 * @param vertical_distance Distance that will be made by the product to reach the top of the vertical zoom-out in m
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_FollowMe_CandleAnimConfigCallback (uint8_t _use_default, float _speed, float _vertical_distance, void *customData);

/**
 * @brief callback used when the command <code>DollySlideAnimConfig</code> is decoded
 * @param feature The feature controller registred
 * @param use_default Dolly slide animation configure parameters.
 * @param speed The speed of the anim in m/s
 * @param angle Angle Product-User-Target in rad
 * @param horizontal_distance Distance that will be made by the product to reach its target in m
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_FollowMe_DollySlideAnimConfigCallback (uint8_t _use_default, float _speed, float _angle, float _horizontal_distance, void *customData);

/**
 * @brief callback used when the command <code>TargetFramingPositionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param horizontal Horizontal position in the video (in %, from left to right)
 * @param vertical Vertical position in the video (in %, from bottom to top)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_FollowMe_TargetFramingPositionChangedCallback (int8_t _horizontal, int8_t _vertical, void *customData);

/**
 * @brief callback used when the command <code>TargetImageDetectionState</code> is decoded
 * @param feature The feature controller registred
 * @param state State of the image detection
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_FollowMe_TargetImageDetectionStateCallback (eARCOMMANDS_FOLLOW_ME_IMAGE_DETECTION_STATUS _state, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_FollowMe_NewCmdElementState (ARCONTROLLER_FEATURE_FollowMe_t *feature, eARCOMMANDS_FOLLOW_ME_MODE _mode, eARCOMMANDS_FOLLOW_ME_BEHAVIOR _behavior, eARCOMMANDS_FOLLOW_ME_ANIMATION _animation, uint16_t _animation_available, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_FollowMe_NewCmdElementModeInfo (ARCONTROLLER_FEATURE_FollowMe_t *feature, eARCOMMANDS_FOLLOW_ME_MODE _mode, uint16_t _missing_requirements, uint16_t _improvements, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_FollowMe_NewCmdElementGeographicConfig (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t _use_default, float _distance, float _elevation, float _azimuth, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_FollowMe_NewCmdElementRelativeConfig (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t _use_default, float _distance, float _elevation, float _azimuth, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_FollowMe_NewCmdElementTargetTrajectory (ARCONTROLLER_FEATURE_FollowMe_t *feature, double _latitude, double _longitude, float _altitude, float _north_speed, float _east_speed, float _down_speed, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_FollowMe_NewCmdElementHelicoidAnimConfig (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t _use_default, float _speed, float _revolution_nb, float _vertical_distance, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_FollowMe_NewCmdElementSwingAnimConfig (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t _use_default, float _speed, float _vertical_distance, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_FollowMe_NewCmdElementBoomerangAnimConfig (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t _use_default, float _speed, float _distance, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_FollowMe_NewCmdElementCandleAnimConfig (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t _use_default, float _speed, float _vertical_distance, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_FollowMe_NewCmdElementDollySlideAnimConfig (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t _use_default, float _speed, float _angle, float _horizontal_distance, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_FollowMe_NewCmdElementTargetFramingPositionChanged (ARCONTROLLER_FEATURE_FollowMe_t *feature, int8_t _horizontal, int8_t _vertical, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_FollowMe_NewCmdElementTargetImageDetectionState (ARCONTROLLER_FEATURE_FollowMe_t *feature, eARCOMMANDS_FOLLOW_ME_IMAGE_DETECTION_STATUS _state, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE JumpingSumo --- 
 ******************************/
/**
 * @brief Parameters to send through the command <code>PilotingPCMD</code> in project <code>JumpingSumo</code>
 */
typedef struct
{
    uint8_t flag; /**< */
    int8_t speed; /**< */
    int8_t turn; /**< */
    void  *data; /**< Custom data used to manage the sending of unacknowledged commands. */
}ARCONTROLLER_JumpingSumo_PilotingPCMDParameters_t;

/**
 * @brief Private part of ARCONTROLLER_FEATURE_JumpingSumo_t.
 */
struct ARCONTROLLER_FEATURE_JumpingSumo_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
    ARCONTROLLER_JumpingSumo_PilotingPCMDParameters_t *PilotingPCMDParameters; /**< */
};

/**
 * @brief Send a command <code>PilotingPCMD</code> in project <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * @param speed Speed value [-100:100].
 * @param turn Turn value. [-100:100]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingPCMD (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t flag, int8_t speed, int8_t turn);

/**
 * @brief Set the parameters to send through the command <code>PilotingPCMD</code> in project <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * @param speed Speed value [-100:100].
 * @param turn Turn value. [-100:100]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMD (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t _flag, int8_t _speed, int8_t _turn);

/**
 * @brief Set flag sent through the command <code>PilotingPCMD</code> in project <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDFlag (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t flag);

/**
 * @brief Set speed sent through the command <code>PilotingPCMD</code> in project <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param speed Speed value [-100:100].
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDSpeed (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, int8_t speed);

/**
 * @brief Set turn sent through the command <code>PilotingPCMD</code> in project <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param turn Turn value. [-100:100]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDTurn (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, int8_t turn);

/**
 * @brief Send a command <code>PilotingPosture</code> in project <code>JumpingSumo</code>
 * Request a posture
 * @param feature feature owning the commands
 * @param type Type of Posture
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingPosture (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE type);

/**
 * @brief Send a command <code>PilotingAddCapOffset</code> in project <code>JumpingSumo</code>
 * Add the specified offset to the current cap.
 * @param feature feature owning the commands
 * @param offset Offset value in radians.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingAddCapOffset (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, float offset);

/**
 * @brief Send a command <code>AnimationsJumpStop</code> in project <code>JumpingSumo</code>
 * Stop jump, emergency jump stop, stop jump motor and stay there.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpStop (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>AnimationsJumpCancel</code> in project <code>JumpingSumo</code>
 * Cancel jump and come back to previous state (if possible).
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpCancel (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>AnimationsJumpLoad</code> in project <code>JumpingSumo</code>
 * Request jump loading
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpLoad (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>AnimationsJump</code> in project <code>JumpingSumo</code>
 * Request a jump
 * @param feature feature owning the commands
 * @param type Type of jump
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJump (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE type);

/**
 * @brief Send a command <code>AnimationsSimpleAnimation</code> in project <code>JumpingSumo</code>
 * Play a parameterless animation.
 * @param feature feature owning the commands
 * @param id Animation ID.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsSimpleAnimation (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID id);

/**
 * @brief Send a command <code>MediaRecordPicture</code> in project <code>JumpingSumo</code>
 * @deprecated
 * Take picture
 * @param feature feature owning the commands
 * @param mass_storage_id Mass storage id to take picture
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordPicture (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>MediaRecordVideo</code> in project <code>JumpingSumo</code>
 * @deprecated
 * Video record
 * @param feature feature owning the commands
 * @param record Command to record video
 * @param mass_storage_id Mass storage id to record
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordVideo (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD record, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>MediaRecordPictureV2</code> in project <code>JumpingSumo</code>
 * Take picture
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordPictureV2 (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>MediaRecordVideoV2</code> in project <code>JumpingSumo</code>
 * Video record
 * @param feature feature owning the commands
 * @param record Command to record video
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordVideoV2 (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD record);

/**
 * @brief Send a command <code>NetworkSettingsWifiSelection</code> in project <code>JumpingSumo</code>
 * Auto-select channel of choosen band
 * @param feature feature owning the commands
 * @param type The type of wifi selection (auto, manual)
 * @param band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 * @param channel The channel (not used in auto mode)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkSettingsWifiSelection (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE type, eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND band, uint8_t channel);

/**
 * @brief Send a command <code>NetworkWifiScan</code> in project <code>JumpingSumo</code>
 * Launches wifi network scan
 * @param feature feature owning the commands
 * @param band The band(s) : 2.4 Ghz, 5 Ghz, or both
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkWifiScan (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND band);

/**
 * @brief Send a command <code>NetworkWifiAuthChannel</code> in project <code>JumpingSumo</code>
 * Controller inquire the list of authorized wifi channels.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkWifiAuthChannel (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>AudioSettingsMasterVolume</code> in project <code>JumpingSumo</code>
 * Master volume control.
 * @param feature feature owning the commands
 * @param volume Master audio volume [0:100].
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendAudioSettingsMasterVolume (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t volume);

/**
 * @brief Send a command <code>AudioSettingsTheme</code> in project <code>JumpingSumo</code>
 * Audio Theme.
 * @param feature feature owning the commands
 * @param theme The audio theme to set.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendAudioSettingsTheme (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME theme);

/**
 * @brief Send a command <code>RoadPlanAllScriptsMetadata</code> in project <code>JumpingSumo</code>
 * Command to ask device all metadata scripts.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanAllScriptsMetadata (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>RoadPlanScriptUploaded</code> in project <code>JumpingSumo</code>
 * Notify device that a new file has been uploaded.
 * @param feature feature owning the commands
 * @param uuid UUID of uploaded file.
 * @param md5Hash MD5 hash code computed over file.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanScriptUploaded (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, char * uuid, char * md5Hash);

/**
 * @brief Send a command <code>RoadPlanScriptDelete</code> in project <code>JumpingSumo</code>
 * Ask the device to delete a script.
 * @param feature feature owning the commands
 * @param uuid UUID of the file to delete.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanScriptDelete (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, char * uuid);

/**
 * @brief Send a command <code>RoadPlanPlayScript</code> in project <code>JumpingSumo</code>
 * Ask the device to play a script.
 * @param feature feature owning the commands
 * @param uuid UUID of the file to play.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanPlayScript (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, char * uuid);

/**
 * @brief Send a command <code>SpeedSettingsOutdoor</code> in project <code>JumpingSumo</code>
 * @deprecated
 * Outdoor property
 * @param feature feature owning the commands
 * @param outdoor 1 if outdoor, 0 if indoor
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendSpeedSettingsOutdoor (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t outdoor);

/**
 * @brief Send a command <code>MediaStreamingVideoEnable</code> in project <code>JumpingSumo</code>
 * Enable/disable video streaming.
 * @param feature feature owning the commands
 * @param enable 1 to enable, 0 to disable.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendMediaStreamingVideoEnable (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>VideoSettingsAutorecord</code> in project <code>JumpingSumo</code>
 * Set video automatic recording state.
 * @param feature feature owning the commands
 * @param enabled 0: Disabled 1: Enabled.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SendVideoSettingsAutorecord (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t enabled);

/**
 * @brief callback used when the command <code>PilotingStatePostureChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state State of posture
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_PilotingStatePostureChangedCallback (eARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateAlertStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state JS alert state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_PilotingStateAlertStateChangedCallback (eARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateSpeedChanged</code> is decoded
 * @param feature The feature controller registred
 * @param speed Speed command applied to motors in range [-100;100].
 * @param realSpeed Actual real-world speed in cm/s. Value -32768 returned if not available.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_PilotingStateSpeedChangedCallback (int8_t _speed, int16_t _realSpeed, void *customData);

/**
 * @brief callback used when the command <code>AnimationsStateJumpLoadChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state State of jump load
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_AnimationsStateJumpLoadChangedCallback (eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>AnimationsStateJumpTypeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state State of jump type.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_AnimationsStateJumpTypeChangedCallback (eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>AnimationsStateJumpMotorProblemChanged</code> is decoded
 * @param feature The feature controller registred
 * @param error Enum describing the problem of the motor
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_AnimationsStateJumpMotorProblemChangedCallback (eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateProductGPSVersionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param software Product GPS software version
 * @param hardware Product GPS hardware version
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_SettingsStateProductGPSVersionChangedCallback (const char * _software, const char * _hardware, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordStatePictureStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state 1 if picture has been taken, 0 otherwise
 * @param mass_storage_id Mass storage id where the picture was recorded
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_MediaRecordStatePictureStateChangedCallback (uint8_t _state, uint8_t _mass_storage_id, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordStateVideoStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state State of video
 * @param mass_storage_id Mass storage id where the video was recorded
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_MediaRecordStateVideoStateChangedCallback (eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE _state, uint8_t _mass_storage_id, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordStatePictureStateChangedV2</code> is decoded
 * @param feature The feature controller registred
 * @param state State of device picture recording
 * @param error Error to explain the state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_MediaRecordStatePictureStateChangedV2Callback (eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE _state, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordStateVideoStateChangedV2</code> is decoded
 * @param feature The feature controller registred
 * @param state State of device video recording
 * @param error Error to explain the state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_MediaRecordStateVideoStateChangedV2Callback (eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE _state, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordEventPictureEventChanged</code> is decoded
 * @param feature The feature controller registred
 * @param event Last event of picture recording
 * @param error Error to explain the event
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_MediaRecordEventPictureEventChangedCallback (eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT _event, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordEventVideoEventChanged</code> is decoded
 * @param feature The feature controller registred
 * @param event Event of video recording
 * @param error Error to explain the event
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_MediaRecordEventVideoEventChangedCallback (eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT _event, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>NetworkSettingsStateWifiSelectionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param type The type of wifi selection settings
 * @param band The actual wifi band state
 * @param channel The channel (depends of the band)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_NetworkSettingsStateWifiSelectionChangedCallback (eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE _type, eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND _band, uint8_t _channel, void *customData);

/**
 * @brief callback used when the command <code>NetworkStateWifiScanListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param ssid SSID of the AP
 * @param rssi RSSI of the AP in dbm (negative value)
 * @param band The band : 2.4 GHz or 5 GHz
 * @param channel Channel of the AP
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_NetworkStateWifiScanListChangedCallback (const char * _ssid, int16_t _rssi, eARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND _band, uint8_t _channel, void *customData);

/**
 * @brief callback used when the command <code>NetworkStateAllWifiScanChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_NetworkStateAllWifiScanChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>NetworkStateWifiAuthChannelListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param band The band of this channel : 2.4 GHz or 5 GHz
 * @param channel The authorized channel.
 * @param in_or_out Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_NetworkStateWifiAuthChannelListChangedCallback (eARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND _band, uint8_t _channel, uint8_t _in_or_out, void *customData);

/**
 * @brief callback used when the command <code>NetworkStateAllWifiAuthChannelChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_NetworkStateAllWifiAuthChannelChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>NetworkStateLinkQualityChanged</code> is decoded
 * @param feature The feature controller registred
 * @param quality The WiFi link quality in range 0-6, the higher the value, the higher the link quality.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_NetworkStateLinkQualityChangedCallback (uint8_t _quality, void *customData);

/**
 * @brief callback used when the command <code>AudioSettingsStateMasterVolumeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param volume Master audio volume [0:100].
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_AudioSettingsStateMasterVolumeChangedCallback (uint8_t _volume, void *customData);

/**
 * @brief callback used when the command <code>AudioSettingsStateThemeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param theme The audio theme to set.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_AudioSettingsStateThemeChangedCallback (eARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME _theme, void *customData);

/**
 * @brief callback used when the command <code>RoadPlanStateScriptMetadataListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param uuid Script uuid for which metadata changed.
 * @param version Version number for this script.
 * @param product Product targeted by script.
 * @param name Display name of the script.
 * @param lastModified Timestamp relative to the UNIX epoch of the last time the file was modified.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_RoadPlanStateScriptMetadataListChangedCallback (const char * _uuid, uint8_t _version, const char * _product, const char * _name, uint64_t _lastModified, void *customData);

/**
 * @brief callback used when the command <code>RoadPlanStateAllScriptsMetadataChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_RoadPlanStateAllScriptsMetadataChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>RoadPlanStateScriptUploadChanged</code> is decoded
 * @param feature The feature controller registred
 * @param resultCode Error code.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_RoadPlanStateScriptUploadChangedCallback (eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE _resultCode, void *customData);

/**
 * @brief callback used when the command <code>RoadPlanStateScriptDeleteChanged</code> is decoded
 * @param feature The feature controller registred
 * @param resultCode Error code.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_RoadPlanStateScriptDeleteChangedCallback (eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE _resultCode, void *customData);

/**
 * @brief callback used when the command <code>RoadPlanStatePlayScriptChanged</code> is decoded
 * @param feature The feature controller registred
 * @param resultCode Error code.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_RoadPlanStatePlayScriptChangedCallback (eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE _resultCode, void *customData);

/**
 * @brief callback used when the command <code>SpeedSettingsStateOutdoorChanged</code> is decoded
 * @param feature The feature controller registred
 * @param outdoor 1 if outdoor, 0 if indoor
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_SpeedSettingsStateOutdoorChangedCallback (uint8_t _outdoor, void *customData);

/**
 * @brief callback used when the command <code>MediaStreamingStateVideoEnableChanged</code> is decoded
 * @param feature The feature controller registred
 * @param enabled Current video streaming status.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_MediaStreamingStateVideoEnableChangedCallback (eARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED _enabled, void *customData);

/**
 * @brief callback used when the command <code>VideoSettingsStateAutorecordChanged</code> is decoded
 * @param feature The feature controller registred
 * @param enabled 0: Disabled 1: Enabled.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_JumpingSumo_VideoSettingsStateAutorecordChangedCallback (uint8_t _enabled, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementPilotingStatePostureChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementPilotingStateAlertStateChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementPilotingStateSpeedChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, int8_t _speed, int16_t _realSpeed, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementAnimationsStateJumpLoadChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementAnimationsStateJumpTypeChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementAnimationsStateJumpMotorProblemChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementSettingsStateProductGPSVersionChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, const char * _software, const char * _hardware, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementMediaRecordStatePictureStateChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t _state, uint8_t _mass_storage_id, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementMediaRecordStateVideoStateChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE _state, uint8_t _mass_storage_id, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementMediaRecordStatePictureStateChangedV2 (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE _state, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementMediaRecordStateVideoStateChangedV2 (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE _state, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementMediaRecordEventPictureEventChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT _event, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementMediaRecordEventVideoEventChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT _event, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementNetworkSettingsStateWifiSelectionChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE _type, eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND _band, uint8_t _channel, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementNetworkStateWifiScanListChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, const char * _ssid, int16_t _rssi, eARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND _band, uint8_t _channel, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementNetworkStateAllWifiScanChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementNetworkStateWifiAuthChannelListChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND _band, uint8_t _channel, uint8_t _in_or_out, int listIndex, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementNetworkStateAllWifiAuthChannelChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementNetworkStateLinkQualityChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t _quality, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementAudioSettingsStateMasterVolumeChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t _volume, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementAudioSettingsStateThemeChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME _theme, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementRoadPlanStateScriptMetadataListChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, const char * _uuid, uint8_t _version, const char * _product, const char * _name, uint64_t _lastModified, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementRoadPlanStateAllScriptsMetadataChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementRoadPlanStateScriptUploadChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE _resultCode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementRoadPlanStateScriptDeleteChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE _resultCode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementRoadPlanStatePlayScriptChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE _resultCode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementSpeedSettingsStateOutdoorChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t _outdoor, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementMediaStreamingStateVideoEnableChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED _enabled, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_NewCmdElementVideoSettingsStateAutorecordChanged (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t _enabled, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE mapper --- 
 ******************************/
/**
 * @brief Private part of ARCONTROLLER_FEATURE_Mapper_t.
 */
struct ARCONTROLLER_FEATURE_Mapper_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
};

/**
 * @brief Send a command <code>Grab</code> in project <code>Mapper</code>
 * Grabbed buttons are sent to the app and are not handled by the mapper
 * @param feature feature owning the commands
 * @param buttons Buttons to grab/ungrab (bitfield)
 * @param axes Axes to grab/ungrab (bitfield)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Mapper_SendGrab (ARCONTROLLER_FEATURE_Mapper_t *feature, uint32_t buttons, uint32_t axes);

/**
 * @brief Send a command <code>MapButtonAction</code> in project <code>Mapper</code>
 * An action can only be mapped to one button set.
 * Each action can be mapped to different buttons for different products.
 * @param feature feature owning the commands
 * @param product Product (see libARDiscovery for list)
 * @param action The action (mapped on a button)
 * @param buttons Buttons combination mapped to the action (bitfield). Set 0 (no button) to unmap an action
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Mapper_SendMapButtonAction (ARCONTROLLER_FEATURE_Mapper_t *feature, uint16_t product, eARCOMMANDS_MAPPER_BUTTON_ACTION action, uint32_t buttons);

/**
 * @brief Send a command <code>MapAxisAction</code> in project <code>Mapper</code>
 * An action can only be mapped to one axis/button set.
 * Each action can be mapped to different axes/buttons for different products.
 * @param feature feature owning the commands
 * @param product Product (see libARDiscovery for list)
 * @param action The action (mapped on an axis)
 * @param axis The axis number on which the action will be mapped. Set a negative value to unmap the action.
 * @param buttons Buttons combination mapped to the action (bitfield). Can be zero if no buttons are required.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Mapper_SendMapAxisAction (ARCONTROLLER_FEATURE_Mapper_t *feature, uint16_t product, eARCOMMANDS_MAPPER_AXIS_ACTION action, int32_t axis, uint32_t buttons);

/**
 * @brief Send a command <code>ResetMapping</code> in project <code>Mapper</code>
 * Resets the mappings, axis exponential parameters, and axis inversion for the given product.
 * If the product is given as 0 (zero), the all products are reset.
 * @param feature feature owning the commands
 * @param product The product to reset, or 0 to reset all products.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Mapper_SendResetMapping (ARCONTROLLER_FEATURE_Mapper_t *feature, uint16_t product);

/**
 * @brief Send a command <code>SetExpo</code> in project <code>Mapper</code>
 * By default, each axis can have a different expo value.
 * For some products/mappings configuration, the expo values of two axes belonging to the same physical joystick can be locked to the same value. In this case, setting the value for one axis will automatically change both values.
 * @param feature feature owning the commands
 * @param product Product (see libARDiscovery for list). Set to 0 to apply to all products
 * @param axis Axis number. Set to -1 to apply to all axes.
 * @param expo Expo type
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Mapper_SendSetExpo (ARCONTROLLER_FEATURE_Mapper_t *feature, uint16_t product, int32_t axis, eARCOMMANDS_MAPPER_EXPO_TYPE expo);

/**
 * @brief Send a command <code>SetInverted</code> in project <code>Mapper</code>
 * Axis inversion has no effect on grabbed axes, nor on virtual buttons that might be generated from axes.
 * @param feature feature owning the commands
 * @param product Product (see libARDiscovery for list). Set to 0 to apply to all products
 * @param axis Axis number
 * @param inverted 0 : Axis not inverted. 1 : Axis inverted
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Mapper_SendSetInverted (ARCONTROLLER_FEATURE_Mapper_t *feature, uint16_t product, int32_t axis, uint8_t inverted);

/**
 * @brief callback used when the command <code>GrabState</code> is decoded
 * @param feature The feature controller registred
 * @param buttons Grabbed buttons (bitfield)
 * @param axes Grabbed axes (bitfield)
 * @param buttons_state For grabbed buttons only. State of the button when the grab starts (bitfield)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Mapper_GrabStateCallback (uint32_t _buttons, uint32_t _axes, uint32_t _buttons_state, void *customData);

/**
 * @brief callback used when the command <code>GrabButtonEvent</code> is decoded
 * @param feature The feature controller registred
 * @param button Button id
 * @param event Button event
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Mapper_GrabButtonEventCallback (uint32_t _button, eARCOMMANDS_MAPPER_BUTTON_EVENT _event, void *customData);

/**
 * @brief callback used when the command <code>GrabAxisEvent</code> is decoded
 * @param feature The feature controller registred
 * @param axis Axis id
 * @param value Value in range [-100; 100].
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Mapper_GrabAxisEventCallback (uint32_t _axis, int8_t _value, void *customData);

/**
 * @brief callback used when the command <code>ButtonMappingItem</code> is decoded
 * @param feature The feature controller registred
 * @param uid Unique ID of the mapping.
 * @param product Product (see libARDiscovery for list)
 * @param action The action (mapped on a button)
 * @param buttons Buttons combination mapped to the action (bitfield).
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Mapper_ButtonMappingItemCallback (uint32_t _uid, uint16_t _product, eARCOMMANDS_MAPPER_BUTTON_ACTION _action, uint32_t _buttons, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>AxisMappingItem</code> is decoded
 * @param feature The feature controller registred
 * @param uid Unique ID of the mapping.
 * @param product Product (see libARDiscovery for list)
 * @param action The action (mapped on an axis)
 * @param axis The axis number on which the action is mapped.
 * @param buttons Buttons combination mapped to the action (bitfield).
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Mapper_AxisMappingItemCallback (uint32_t _uid, uint16_t _product, eARCOMMANDS_MAPPER_AXIS_ACTION _action, int32_t _axis, uint32_t _buttons, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>ApplicationAxisEvent</code> is decoded
 * @param feature The feature controller registred
 * @param action The action (mapped on an axis)
 * @param value The current value of the axis.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Mapper_ApplicationAxisEventCallback (eARCOMMANDS_MAPPER_AXIS_ACTION _action, int8_t _value, void *customData);

/**
 * @brief callback used when the command <code>ApplicationButtonEvent</code> is decoded
 * @param feature The feature controller registred
 * @param action The action (mapped on a button)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Mapper_ApplicationButtonEventCallback (eARCOMMANDS_MAPPER_BUTTON_ACTION _action, void *customData);

/**
 * @brief callback used when the command <code>ExpoMapItem</code> is decoded
 * @param feature The feature controller registred
 * @param uid Unique ID (for MAP_ITEM type)
 * @param product Product (see libARDiscovery for list)
 * @param axis Axis number
 * @param expo Expo type
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Mapper_ExpoMapItemCallback (uint32_t _uid, uint16_t _product, int32_t _axis, eARCOMMANDS_MAPPER_EXPO_TYPE _expo, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>InvertedMapItem</code> is decoded
 * @param feature The feature controller registred
 * @param uid Unique ID (for MAP_ITEM type)
 * @param product Product (see libARDiscovery for list)
 * @param axis Axis number
 * @param inverted 0 : Axis not inverted. 1 : Axis inverted
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Mapper_InvertedMapItemCallback (uint32_t _uid, uint16_t _product, int32_t _axis, uint8_t _inverted, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>ActiveProduct</code> is decoded
 * @param feature The feature controller registred
 * @param product Product (see libARDiscovery for list)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Mapper_ActiveProductCallback (uint16_t _product, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Mapper_NewCmdElementGrabState (ARCONTROLLER_FEATURE_Mapper_t *feature, uint32_t _buttons, uint32_t _axes, uint32_t _buttons_state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Mapper_NewCmdElementGrabButtonEvent (ARCONTROLLER_FEATURE_Mapper_t *feature, uint32_t _button, eARCOMMANDS_MAPPER_BUTTON_EVENT _event, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Mapper_NewCmdElementGrabAxisEvent (ARCONTROLLER_FEATURE_Mapper_t *feature, uint32_t _axis, int8_t _value, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Mapper_NewCmdElementButtonMappingItem (ARCONTROLLER_FEATURE_Mapper_t *feature, uint32_t _uid, uint16_t _product, eARCOMMANDS_MAPPER_BUTTON_ACTION _action, uint32_t _buttons, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Mapper_NewCmdElementAxisMappingItem (ARCONTROLLER_FEATURE_Mapper_t *feature, uint32_t _uid, uint16_t _product, eARCOMMANDS_MAPPER_AXIS_ACTION _action, int32_t _axis, uint32_t _buttons, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Mapper_NewCmdElementApplicationAxisEvent (ARCONTROLLER_FEATURE_Mapper_t *feature, eARCOMMANDS_MAPPER_AXIS_ACTION _action, int8_t _value, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Mapper_NewCmdElementApplicationButtonEvent (ARCONTROLLER_FEATURE_Mapper_t *feature, eARCOMMANDS_MAPPER_BUTTON_ACTION _action, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Mapper_NewCmdElementExpoMapItem (ARCONTROLLER_FEATURE_Mapper_t *feature, uint32_t _uid, uint16_t _product, int32_t _axis, eARCOMMANDS_MAPPER_EXPO_TYPE _expo, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Mapper_NewCmdElementInvertedMapItem (ARCONTROLLER_FEATURE_Mapper_t *feature, uint32_t _uid, uint16_t _product, int32_t _axis, uint8_t _inverted, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Mapper_NewCmdElementActiveProduct (ARCONTROLLER_FEATURE_Mapper_t *feature, uint16_t _product, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE mapper_mini --- 
 ******************************/
/**
 * @brief Private part of ARCONTROLLER_FEATURE_MapperMini_t.
 */
struct ARCONTROLLER_FEATURE_MapperMini_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
};

/**
 * @brief Send a command <code>MapButtonAction</code> in project <code>MapperMini</code>
 * An action can only be mapped to one button set.
 * Each action can be mapped to different buttons for different modes.
 * @param feature feature owning the commands
 * @param modes The modes on which the mapping will be set The piloting mode of the product
 * @param action The action (mapped on a button)
 * @param buttons Buttons combination mapped to the action (bitfield). Set 0 (no button) to unmap an action
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MapperMini_SendMapButtonAction (ARCONTROLLER_FEATURE_MapperMini_t *feature, uint8_t modes, eARCOMMANDS_MAPPER_MINI_BUTTON_ACTION action, uint32_t buttons);

/**
 * @brief Send a command <code>MapAxisAction</code> in project <code>MapperMini</code>
 * An action can only be mapped to one axis/button set.
 * Each action can be mapped to different axes/buttons for different modes.
 * @param feature feature owning the commands
 * @param modes The modes on which the mapping will be set The piloting mode of the product
 * @param action The action (mapped on an axis)
 * @param axis The axis number on which the action will be mapped. Set a negative value to unmap the action.
 * @param buttons Buttons combination mapped to the action (bitfield). Can be zero if no buttons are required.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MapperMini_SendMapAxisAction (ARCONTROLLER_FEATURE_MapperMini_t *feature, uint8_t modes, eARCOMMANDS_MAPPER_MINI_AXIS_ACTION action, int8_t axis, uint32_t buttons);

/**
 * @brief Send a command <code>ResetMapping</code> in project <code>MapperMini</code>
 * Resets the mappings for the given mode(s) to their default value.
 * @param feature feature owning the commands
 * @param modes The mode(s) to reset. The piloting mode of the product
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MapperMini_SendResetMapping (ARCONTROLLER_FEATURE_MapperMini_t *feature, uint8_t modes);

/**
 * @brief callback used when the command <code>ButtonMappingItem</code> is decoded
 * @param feature The feature controller registred
 * @param uid Unique ID of the mapping.
 * @param modes The modes on which the mapping is set The piloting mode of the product
 * @param action The action (mapped on a button)
 * @param buttons Buttons combination mapped to the action (bitfield).
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MapperMini_ButtonMappingItemCallback (uint16_t _uid, uint8_t _modes, eARCOMMANDS_MAPPER_MINI_BUTTON_ACTION _action, uint32_t _buttons, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>AxisMappingItem</code> is decoded
 * @param feature The feature controller registred
 * @param uid Unique ID of the mapping.
 * @param modes The modes on which the mapping is set The piloting mode of the product
 * @param action The action (mapped on an axis)
 * @param axis The axis number on which the action is mapped.
 * @param buttons Buttons combination mapped to the action (bitfield).
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MapperMini_AxisMappingItemCallback (uint16_t _uid, uint8_t _modes, eARCOMMANDS_MAPPER_MINI_AXIS_ACTION _action, int8_t _axis, uint32_t _buttons, uint8_t _list_flags, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MapperMini_NewCmdElementButtonMappingItem (ARCONTROLLER_FEATURE_MapperMini_t *feature, uint16_t _uid, uint8_t _modes, eARCOMMANDS_MAPPER_MINI_BUTTON_ACTION _action, uint32_t _buttons, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MapperMini_NewCmdElementAxisMappingItem (ARCONTROLLER_FEATURE_MapperMini_t *feature, uint16_t _uid, uint8_t _modes, eARCOMMANDS_MAPPER_MINI_AXIS_ACTION _action, int8_t _axis, uint32_t _buttons, uint8_t _list_flags, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE MiniDrone --- 
 ******************************/
/**
 * @brief Parameters to send through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 */
typedef struct
{
    uint8_t flag; /**< */
    int8_t roll; /**< */
    int8_t pitch; /**< */
    int8_t yaw; /**< */
    int8_t gaz; /**< */
    uint32_t timestamp; /**< */
    void  *data; /**< Custom data used to manage the sending of unacknowledged commands. */
}ARCONTROLLER_MiniDrone_PilotingPCMDParameters_t;

/**
 * @brief Private part of ARCONTROLLER_FEATURE_MiniDrone_t.
 */
struct ARCONTROLLER_FEATURE_MiniDrone_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
    ARCONTROLLER_MiniDrone_PilotingPCMDParameters_t *PilotingPCMDParameters; /**< */
};

/**
 * @brief Send a command <code>PilotingFlatTrim</code> in project <code>MiniDrone</code>
 * Do a flat trim
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingFlatTrim (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>PilotingTakeOff</code> in project <code>MiniDrone</code>
 * Ask the drone to take off
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingTakeOff (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param flag Boolean flag to activate roll/pitch movement
 * @param roll Roll consign for the MiniDrone [-100;100]
 * @param pitch Pitch consign for the MiniDrone [-100;100]
 * @param yaw Yaw consign for the MiniDrone [-100;100]
 * @param gaz Gaz consign for the MiniDrone [-100;100]
 * @param timestamp Timestamp in miliseconds. Not an absolute time. (Typically 0 = time of connexion).
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingPCMD (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t flag, int8_t roll, int8_t pitch, int8_t yaw, int8_t gaz, uint32_t timestamp);

/**
 * @brief Set the parameters to send through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param flag Boolean flag to activate roll/pitch movement
 * @param roll Roll consign for the MiniDrone [-100;100]
 * @param pitch Pitch consign for the MiniDrone [-100;100]
 * @param yaw Yaw consign for the MiniDrone [-100;100]
 * @param gaz Gaz consign for the MiniDrone [-100;100]
 * @param timestamp Timestamp in miliseconds. Not an absolute time. (Typically 0 = time of connexion).
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMD (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t _flag, int8_t _roll, int8_t _pitch, int8_t _yaw, int8_t _gaz, uint32_t _timestamp);

/**
 * @brief Set flag sent through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param flag Boolean flag to activate roll/pitch movement
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDFlag (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t flag);

/**
 * @brief Set roll sent through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param roll Roll consign for the MiniDrone [-100;100]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDRoll (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int8_t roll);

/**
 * @brief Set pitch sent through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param pitch Pitch consign for the MiniDrone [-100;100]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDPitch (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int8_t pitch);

/**
 * @brief Set yaw sent through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param yaw Yaw consign for the MiniDrone [-100;100]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDYaw (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int8_t yaw);

/**
 * @brief Set gaz sent through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param gaz Gaz consign for the MiniDrone [-100;100]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDGaz (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int8_t gaz);

/**
 * @brief Set timestamp sent through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param timestamp Timestamp in miliseconds. Not an absolute time. (Typically 0 = time of connexion).
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDTimestamp (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint32_t timestamp);

/**
 * @brief Send a command <code>PilotingLanding</code> in project <code>MiniDrone</code>
 * Ask the MiniDrone to land
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingLanding (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>PilotingEmergency</code> in project <code>MiniDrone</code>
 * Put drone in emergency state
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingEmergency (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>PilotingAutoTakeOffMode</code> in project <code>MiniDrone</code>
 * Set MiniDrone automatic take off mode
 * @param feature feature owning the commands
 * @param state State of automatic take off mode
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingAutoTakeOffMode (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t state);

/**
 * @brief Send a command <code>PilotingFlyingMode</code> in project <code>MiniDrone</code>
 * Set drone FlyingMode. Only supported by WingX
 * @param feature feature owning the commands
 * @param mode Drone Flying Mode
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingFlyingMode (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_PILOTING_FLYINGMODE_MODE mode);

/**
 * @brief Send a command <code>PilotingPlaneGearBox</code> in project <code>MiniDrone</code>
 * Set Plane Gear Box. Only supported by WingX
 * @param feature feature owning the commands
 * @param state Plane Gear Box
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingPlaneGearBox (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_PILOTING_PLANEGEARBOX_STATE state);

/**
 * @brief Send a command <code>PilotingTogglePilotingMode</code> in project <code>MiniDrone</code>
 * Command to toggle between "easy" piloting mode and "preferred" piloting mode.
 * This command only works while the drone is flying.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingTogglePilotingMode (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>AnimationsFlip</code> in project <code>MiniDrone</code>
 * Make a flip
 * @param feature feature owning the commands
 * @param direction Direction for the flip
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendAnimationsFlip (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION direction);

/**
 * @brief Send a command <code>AnimationsCap</code> in project <code>MiniDrone</code>
 * Change the product cap
 * @param feature feature owning the commands
 * @param offset Change the cap with offset angle [-180;180]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendAnimationsCap (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int16_t offset);

/**
 * @brief Send a command <code>MediaRecordPicture</code> in project <code>MiniDrone</code>
 * @deprecated
 * Take picture
 * @param feature feature owning the commands
 * @param mass_storage_id Mass storage id to take picture
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendMediaRecordPicture (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>MediaRecordPictureV2</code> in project <code>MiniDrone</code>
 * Take picture
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendMediaRecordPictureV2 (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>PilotingSettingsMaxAltitude</code> in project <code>MiniDrone</code>
 * Set Max Altitude
 * @param feature feature owning the commands
 * @param current Current altitude max in m
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsMaxAltitude (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>PilotingSettingsMaxTilt</code> in project <code>MiniDrone</code>
 * Set Max Tilt
 * @param feature feature owning the commands
 * @param current Current tilt max in degree
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsMaxTilt (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>PilotingSettingsBankedTurn</code> in project <code>MiniDrone</code>
 * Set banked turn mode.
 * When banked turn mode is enabled, the drone will use yaw values from the piloting command to infer with roll and pitch on the drone when its horizontal speed is not null.
 * @param feature feature owning the commands
 * @param value 1 to enable, 0 to disable
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsBankedTurn (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t value);

/**
 * @brief Send a command <code>PilotingSettingsMaxThrottle</code> in project <code>MiniDrone</code>
 * This setting represents the vertical acceleration command that will be sent to the drone when piloting in gaz mode.
 * In this case, closed loop height control is no longer performed; an open loop vertical acceleration command is generated instead.
 * This command results from multiplying the user command coming from the joystick (float value between 0 and 1) by the MaxThrottle setting (also a value between 0 and 1) and by the gravity constant.
 * Thus, we obtain the corresponding value in [m/s²] that will then be mixed with the attitude commands and translated into rotation speeds.
 * As an example, if the value of this setting is 0.5, the maximal acceleration command that can be generated when the user command equals 1 is :
 * acc_cmd_max = 1 * 0.5 * 9.81 m/s² = 4.905 m/s².
 * @param feature feature owning the commands
 * @param max Max throttle, between 0 and 1.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsMaxThrottle (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float max);

/**
 * @brief Send a command <code>PilotingSettingsPreferredPilotingMode</code> in project <code>MiniDrone</code>
 * The flight envelope of Mambo FPV has been divided in three piloting modes.
 * @param feature feature owning the commands
 * @param mode Piloting modes.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsPreferredPilotingMode (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_PILOTINGSETTINGS_PREFERREDPILOTINGMODE_MODE mode);

/**
 * @brief Send a command <code>SpeedSettingsMaxVerticalSpeed</code> in project <code>MiniDrone</code>
 * Set Max Vertical speed
 * @param feature feature owning the commands
 * @param current Current max vertical speed in m/s
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxVerticalSpeed (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>SpeedSettingsMaxRotationSpeed</code> in project <code>MiniDrone</code>
 * Set Max Rotation speed
 * @param feature feature owning the commands
 * @param current Current max rotation speed in degree/s
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxRotationSpeed (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>SpeedSettingsWheels</code> in project <code>MiniDrone</code>
 * Presence of wheels
 * @param feature feature owning the commands
 * @param present 1 if present, 0 if not present
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsWheels (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t present);

/**
 * @brief Send a command <code>SpeedSettingsMaxHorizontalSpeed</code> in project <code>MiniDrone</code>
 * Set Max Horizontal speed (only used in case where PilotingSettings_MaxTilt is not used like in hydrofoil mode)
 * @param feature feature owning the commands
 * @param current Current max Horizontal speed in m/s
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxHorizontalSpeed (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>SpeedSettingsMaxPlaneModeRotationSpeed</code> in project <code>MiniDrone</code>
 * Set max plane mode rotation speed (only available for wing x)
 * @param feature feature owning the commands
 * @param current Current max plane mode rotation speed in degree/s
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxPlaneModeRotationSpeed (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>SettingsCutOutMode</code> in project <code>MiniDrone</code>
 * Set MiniDrone cut out mode
 * @param feature feature owning the commands
 * @param enable Enable cut out mode (1 if is activate, 0 otherwise)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendSettingsCutOutMode (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>GPSControllerLatitudeForRun</code> in project <code>MiniDrone</code>
 * Set the controller latitude for a run.
 * @param feature feature owning the commands
 * @param latitude Controller latitude in decimal degrees
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendGPSControllerLatitudeForRun (ARCONTROLLER_FEATURE_MiniDrone_t *feature, double latitude);

/**
 * @brief Send a command <code>GPSControllerLongitudeForRun</code> in project <code>MiniDrone</code>
 * Set the controller longitude for a run.
 * @param feature feature owning the commands
 * @param longitude Controller longitude in decimal degrees
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendGPSControllerLongitudeForRun (ARCONTROLLER_FEATURE_MiniDrone_t *feature, double longitude);

/**
 * @brief Send a command <code>ConfigurationControllerType</code> in project <code>MiniDrone</code>
 * Set the controller type.
 * @param feature feature owning the commands
 * @param type Controller type like iOS or Android
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendConfigurationControllerType (ARCONTROLLER_FEATURE_MiniDrone_t *feature, char * type);

/**
 * @brief Send a command <code>ConfigurationControllerName</code> in project <code>MiniDrone</code>
 * Set the controller name.
 * @param feature feature owning the commands
 * @param name Controller name like com.parrot.freeflight3
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendConfigurationControllerName (ARCONTROLLER_FEATURE_MiniDrone_t *feature, char * name);

/**
 * @brief Send a command <code>UsbAccessoryLightControl</code> in project <code>MiniDrone</code>
 * USB Light control cmd.
 * @param feature feature owning the commands
 * @param id Usb accessory id
 * @param mode Usb Light mode.
 * @param intensity Light intensity from 0 (OFF) to 100 (Max intensity). Only used in FIXED mode.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendUsbAccessoryLightControl (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t id, eARCOMMANDS_MINIDRONE_USBACCESSORY_LIGHTCONTROL_MODE mode, uint8_t intensity);

/**
 * @brief Send a command <code>UsbAccessoryClawControl</code> in project <code>MiniDrone</code>
 * USB Claw control cmd.
 * @param feature feature owning the commands
 * @param id Usb accessory id.
 * @param action USB Claw action.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendUsbAccessoryClawControl (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t id, eARCOMMANDS_MINIDRONE_USBACCESSORY_CLAWCONTROL_ACTION action);

/**
 * @brief Send a command <code>UsbAccessoryGunControl</code> in project <code>MiniDrone</code>
 * USB Gun control cmd.
 * @param feature feature owning the commands
 * @param id Usb accessory id
 * @param action USB Gun action.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendUsbAccessoryGunControl (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t id, eARCOMMANDS_MINIDRONE_USBACCESSORY_GUNCONTROL_ACTION action);

/**
 * @brief Send a command <code>RemoteControllerSetPairedRemote</code> in project <code>MiniDrone</code>
 * Send the address of the remote controller on which the drone should be paired
 * This is used to pair a Tinos controller
 * Where mac address: MSB-MID-LSB.
 * @param feature feature owning the commands
 * @param msb_mac 2 most significant bytes of mac address
 * @param mid_mac 2 middle bytes of mac address
 * @param lsb_mac 2 least significant bytes of mac address
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendRemoteControllerSetPairedRemote (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint16_t msb_mac, uint16_t mid_mac, uint16_t lsb_mac);

/**
 * @brief Send a command <code>VideoSettingsAutorecord</code> in project <code>MiniDrone</code>
 * Set video automatic recording state.
 * @param feature feature owning the commands
 * @param enable 0: disabled 1: enabled
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendVideoSettingsAutorecord (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>VideoSettingsElectricFrequency</code> in project <code>MiniDrone</code>
 * Set the electric frequency (Anti-flickering).
 * @param feature feature owning the commands
 * @param frequency Type of the electric frequency.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendVideoSettingsElectricFrequency (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_VIDEOSETTINGS_ELECTRICFREQUENCY_FREQUENCY frequency);

/**
 * @brief Send a command <code>VideoSettingsVideoResolution</code> in project <code>MiniDrone</code>
 * Set video streaming and recording resolution.
 * @param feature feature owning the commands
 * @param type Video resolution type.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendVideoSettingsVideoResolution (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_VIDEOSETTINGS_VIDEORESOLUTION_TYPE type);

/**
 * @brief Send a command <code>MinicamPicture</code> in project <code>MiniDrone</code>
 * Take picture.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendMinicamPicture (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>MinicamVideo</code> in project <code>MiniDrone</code>
 * Start/Stop video recording.
 * @param feature feature owning the commands
 * @param record Command to record video
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendMinicamVideo (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_MINICAM_VIDEO_RECORD record);

/**
 * @brief Send a command <code>MinicamMassStorageFormat</code> in project <code>MiniDrone</code>
 * Format mass storage.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SendMinicamMassStorageFormat (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief callback used when the command <code>PilotingStateFlatTrimChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_PilotingStateFlatTrimChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>PilotingStateFlyingStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state Drone flying state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_PilotingStateFlyingStateChangedCallback (eARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateAlertStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state Drone alert state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_PilotingStateAlertStateChangedCallback (eARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateAutoTakeOffModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state State of automatic take off mode
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_PilotingStateAutoTakeOffModeChangedCallback (uint8_t _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateFlyingModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param mode Drone Flying Mode
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_PilotingStateFlyingModeChangedCallback (eARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE _mode, void *customData);

/**
 * @brief callback used when the command <code>PilotingStatePlaneGearBoxChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state Plane Gear Box
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_PilotingStatePlaneGearBoxChangedCallback (eARCOMMANDS_MINIDRONE_PILOTINGSTATE_PLANEGEARBOXCHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingStatePilotingModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param mode 
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_PilotingStatePilotingModeChangedCallback (eARCOMMANDS_MINIDRONE_PILOTINGSTATE_PILOTINGMODECHANGED_MODE _mode, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordStatePictureStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state 1 if picture has been taken, 0 otherwise
 * @param mass_storage_id Mass storage id to record
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_MediaRecordStatePictureStateChangedCallback (uint8_t _state, uint8_t _mass_storage_id, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordStatePictureStateChangedV2</code> is decoded
 * @param feature The feature controller registred
 * @param state State of device picture recording
 * @param error Error to explain the state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_MediaRecordStatePictureStateChangedV2Callback (eARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE _state, eARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordEventPictureEventChanged</code> is decoded
 * @param feature The feature controller registred
 * @param event Last event of picture recording
 * @param error Error to explain the event
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_MediaRecordEventPictureEventChangedCallback (eARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT _event, eARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateMaxAltitudeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current Current altitude max
 * @param min Range min of altitude
 * @param max Range max of altitude
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_PilotingSettingsStateMaxAltitudeChangedCallback (float _current, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateMaxTiltChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current Current max tilt
 * @param min Range min of tilt
 * @param max Range max of tilt
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_PilotingSettingsStateMaxTiltChangedCallback (float _current, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateBankedTurnChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state 1 if enabled, 0 if disabled
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_PilotingSettingsStateBankedTurnChangedCallback (uint8_t _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateMaxThrottleChanged</code> is decoded
 * @param feature The feature controller registred
 * @param max Max throttle, between 0 and 1.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_PilotingSettingsStateMaxThrottleChangedCallback (float _max, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStatePreferredPilotingModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param mode 
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_PilotingSettingsStatePreferredPilotingModeChangedCallback (eARCOMMANDS_MINIDRONE_PILOTINGSETTINGSSTATE_PREFERREDPILOTINGMODECHANGED_MODE _mode, void *customData);

/**
 * @brief callback used when the command <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current Current max vertical speed in m/s
 * @param min Range min of vertical speed
 * @param max Range max of vertical speed
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_SpeedSettingsStateMaxVerticalSpeedChangedCallback (float _current, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>SpeedSettingsStateMaxRotationSpeedChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current Current max rotation speed in degree/s
 * @param min Range min of rotation speed
 * @param max Range max of rotation speed
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_SpeedSettingsStateMaxRotationSpeedChangedCallback (float _current, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>SpeedSettingsStateWheelsChanged</code> is decoded
 * @param feature The feature controller registred
 * @param present 1 if present, 0 if not present
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_SpeedSettingsStateWheelsChangedCallback (uint8_t _present, void *customData);

/**
 * @brief callback used when the command <code>SpeedSettingsStateMaxHorizontalSpeedChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current Current max horizontal speed in m/s
 * @param min Range min of horizontal speed
 * @param max Range max of horizontal speed
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_SpeedSettingsStateMaxHorizontalSpeedChangedCallback (float _current, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>SpeedSettingsStateMaxPlaneModeRotationSpeedChanged</code> is decoded
 * @param feature The feature controller registred
 * @param current Current max plane mode rotation speed in degree/s
 * @param min Range min of plane mode rotation speed
 * @param max Range max of plane mode rotation speed
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_SpeedSettingsStateMaxPlaneModeRotationSpeedChangedCallback (float _current, float _min, float _max, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateProductMotorsVersionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param motor Product Motor number [1 - 4]
 * @param type Product Motor type
 * @param software Product Motors software version
 * @param hardware Product Motors hardware version
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_SettingsStateProductMotorsVersionChangedCallback (uint8_t _motor, const char * _type, const char * _software, const char * _hardware, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateProductInertialVersionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param software Product Inertial software version
 * @param hardware Product Inertial hardware version
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_SettingsStateProductInertialVersionChangedCallback (const char * _software, const char * _hardware, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateCutOutModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param enable State of cut out mode (1 if is activate, 0 otherwise)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_SettingsStateCutOutModeChangedCallback (uint8_t _enable, void *customData);

/**
 * @brief callback used when the command <code>FloodControlStateFloodControlChanged</code> is decoded
 * @param feature The feature controller registred
 * @param delay Delay (in ms) between two PCMD
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_FloodControlStateFloodControlChangedCallback (uint16_t _delay, void *customData);

/**
 * @brief callback used when the command <code>UsbAccessoryStateLightState</code> is decoded
 * @param feature The feature controller registred
 * @param id Usb accessory id
 * @param state Usb Light state.
 * @param intensity Light intensity from 0 (OFF) to 100 (Max intensity). Only used in FIXED state.
 * @param list_flags List entry attribute Bitfield. 0x01: First: indicate it's the first element of the list. 0x02: Last: indicate it's the last element of the list. 0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored. 0x08: Remove: This value should be removed from the existing list.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_UsbAccessoryStateLightStateCallback (uint8_t _id, eARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE _state, uint8_t _intensity, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>UsbAccessoryStateClawState</code> is decoded
 * @param feature The feature controller registred
 * @param id Usb accessory id
 * @param state Usb Claw state.
 * @param list_flags List entry attribute Bitfield. 0x01: First: indicate it's the first element of the list. 0x02: Last: indicate it's the last element of the list. 0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored. 0x08: Remove: This value should be removed from the existing list.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_UsbAccessoryStateClawStateCallback (uint8_t _id, eARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE _state, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>UsbAccessoryStateGunState</code> is decoded
 * @param feature The feature controller registred
 * @param id Usb accessory id.
 * @param state USB Claw state.
 * @param list_flags List entry attribute Bitfield. 0x01: First: indicate it's the first element of the list. 0x02: Last: indicate it's the last element of the list. 0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored. 0x08: Remove: This value should be removed from the existing list.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_UsbAccessoryStateGunStateCallback (uint8_t _id, eARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_STATE _state, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>NavigationDataStateDronePosition</code> is decoded
 * @param feature The feature controller registred
 * @param posx Position on X axis, relative to take off position (cm).
 * @param posy Position on Y axis, relative to take off position (cm).
 * @param posz Position on Z axis, relative to take off position (cm).
 * @param psi Psi angle [-180; 180], relative to take off orientation.
 * @param ts Time elapsed since last data send (ms).
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_NavigationDataStateDronePositionCallback (float _posx, float _posy, int16_t _posz, int16_t _psi, int16_t _ts, void *customData);

/**
 * @brief callback used when the command <code>NavigationDataStateDroneSpeed</code> is decoded
 * @param feature The feature controller registred
 * @param speed_x Speed on the x axis (when drone moves forward, speed is > 0).
 * @param speed_y Speed on the y axis (when drone moves right, speed is > 0).
 * @param speed_z Speed on the z axis (when drone moves down, speed is > 0).
 * @param ts Acquisition timestamp (ms).
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_NavigationDataStateDroneSpeedCallback (float _speed_x, float _speed_y, float _speed_z, uint16_t _ts, void *customData);

/**
 * @brief callback used when the command <code>NavigationDataStateDroneAltitude</code> is decoded
 * @param feature The feature controller registred
 * @param altitude Altitude in meters.
 * @param ts Acquisition timestamp (ms).
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_NavigationDataStateDroneAltitudeCallback (float _altitude, uint16_t _ts, void *customData);

/**
 * @brief callback used when the command <code>NavigationDataStateDroneQuaternion</code> is decoded
 * @param feature The feature controller registred
 * @param q_w Element w.
 * @param q_x Element x.
 * @param q_y Element y.
 * @param q_z Element z.
 * @param ts Acquisition timestamp (ms).
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_NavigationDataStateDroneQuaternionCallback (float _q_w, float _q_x, float _q_y, float _q_z, uint16_t _ts, void *customData);

/**
 * @brief callback used when the command <code>MinicamStatePowerModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param power_mode Power mode of the camera.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_MinicamStatePowerModeChangedCallback (eARCOMMANDS_MINIDRONE_MINICAMSTATE_POWERMODECHANGED_POWER_MODE _power_mode, void *customData);

/**
 * @brief callback used when the command <code>MinicamStateProductSerialChanged</code> is decoded
 * @param feature The feature controller registred
 * @param serial_number Serial number.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_MinicamStateProductSerialChangedCallback (const char * _serial_number, void *customData);

/**
 * @brief callback used when the command <code>MinicamStateStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state State of the camera.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_MinicamStateStateChangedCallback (eARCOMMANDS_MINIDRONE_MINICAMSTATE_STATECHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>MinicamStateVersionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param software Accessory software version.
 * @param hardware Accessory hardware version.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_MinicamStateVersionChangedCallback (const char * _software, const char * _hardware, void *customData);

/**
 * @brief callback used when the command <code>MinicamStatePictureChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state State of device picture recording.
 * @param result Result of device picture recording.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_MinicamStatePictureChangedCallback (eARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_STATE _state, eARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT _result, void *customData);

/**
 * @brief callback used when the command <code>MinicamStateVideoStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state State of device video recording.
 * @param error Error to explain the state.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_MinicamStateVideoStateChangedCallback (eARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_STATE _state, eARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>MinicamStateMassStorageFormatChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state 1 if Mass Storage has been formatted, 0 otherwise.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_MinicamStateMassStorageFormatChangedCallback (uint8_t _state, void *customData);

/**
 * @brief callback used when the command <code>VideoSettingsStateAutorecordChanged</code> is decoded
 * @param feature The feature controller registred
 * @param enabled 0: disabled 1: enabled
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_VideoSettingsStateAutorecordChangedCallback (uint8_t _enabled, void *customData);

/**
 * @brief callback used when the command <code>VideoSettingsStateElectricFrequencyChanged</code> is decoded
 * @param feature The feature controller registred
 * @param frequency Type of the electric frequency.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_VideoSettingsStateElectricFrequencyChangedCallback (eARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY _frequency, void *customData);

/**
 * @brief callback used when the command <code>VideoSettingsStateVideoResolutionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param type Video resolution type.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_VideoSettingsStateVideoResolutionChangedCallback (eARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_VIDEORESOLUTIONCHANGED_TYPE _type, void *customData);

/**
 * @brief callback used when the command <code>RemoteControllerStateConnectionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state New connection state. 0=disconnected 1=connected
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_MiniDrone_RemoteControllerStateConnectionChangedCallback (uint8_t _state, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementPilotingStateFlatTrimChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementPilotingStateFlyingStateChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementPilotingStateAlertStateChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementPilotingStateAutoTakeOffModeChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementPilotingStateFlyingModeChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE _mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementPilotingStatePlaneGearBoxChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_PILOTINGSTATE_PLANEGEARBOXCHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementPilotingStatePilotingModeChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_PILOTINGSTATE_PILOTINGMODECHANGED_MODE _mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementMediaRecordStatePictureStateChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t _state, uint8_t _mass_storage_id, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementMediaRecordStatePictureStateChangedV2 (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE _state, eARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementMediaRecordEventPictureEventChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT _event, eARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementPilotingSettingsStateMaxAltitudeChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float _current, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementPilotingSettingsStateMaxTiltChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float _current, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementPilotingSettingsStateBankedTurnChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementPilotingSettingsStateMaxThrottleChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementPilotingSettingsStatePreferredPilotingModeChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_PILOTINGSETTINGSSTATE_PREFERREDPILOTINGMODECHANGED_MODE _mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementSpeedSettingsStateMaxVerticalSpeedChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float _current, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementSpeedSettingsStateMaxRotationSpeedChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float _current, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementSpeedSettingsStateWheelsChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t _present, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementSpeedSettingsStateMaxHorizontalSpeedChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float _current, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementSpeedSettingsStateMaxPlaneModeRotationSpeedChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float _current, float _min, float _max, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementSettingsStateProductMotorsVersionChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t _motor, const char * _type, const char * _software, const char * _hardware, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementSettingsStateProductInertialVersionChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, const char * _software, const char * _hardware, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementSettingsStateCutOutModeChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t _enable, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementFloodControlStateFloodControlChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint16_t _delay, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementUsbAccessoryStateLightState (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t _id, eARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE _state, uint8_t _intensity, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementUsbAccessoryStateClawState (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t _id, eARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE _state, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementUsbAccessoryStateGunState (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t _id, eARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_STATE _state, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementNavigationDataStateDronePosition (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float _posx, float _posy, int16_t _posz, int16_t _psi, int16_t _ts, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementNavigationDataStateDroneSpeed (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float _speed_x, float _speed_y, float _speed_z, uint16_t _ts, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementNavigationDataStateDroneAltitude (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float _altitude, uint16_t _ts, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementNavigationDataStateDroneQuaternion (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float _q_w, float _q_x, float _q_y, float _q_z, uint16_t _ts, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementMinicamStatePowerModeChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_MINICAMSTATE_POWERMODECHANGED_POWER_MODE _power_mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementMinicamStateProductSerialChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, const char * _serial_number, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementMinicamStateStateChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_MINICAMSTATE_STATECHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementMinicamStateVersionChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, const char * _software, const char * _hardware, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementMinicamStatePictureChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_STATE _state, eARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT _result, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementMinicamStateVideoStateChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_STATE _state, eARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementMinicamStateMassStorageFormatChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementVideoSettingsStateAutorecordChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t _enabled, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementVideoSettingsStateElectricFrequencyChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY _frequency, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementVideoSettingsStateVideoResolutionChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_VIDEORESOLUTIONCHANGED_TYPE _type, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_NewCmdElementRemoteControllerStateConnectionChanged (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t _state, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE powerup --- 
 ******************************/
/**
 * @brief Parameters to send through the command <code>PilotingPCMD</code> in project <code>Powerup</code>
 */
typedef struct
{
    uint8_t flag; /**< */
    uint8_t throttle; /**< */
    int8_t roll; /**< */
    void  *data; /**< Custom data used to manage the sending of unacknowledged commands. */
}ARCONTROLLER_Powerup_PilotingPCMDParameters_t;

/**
 * @brief Private part of ARCONTROLLER_FEATURE_Powerup_t.
 */
struct ARCONTROLLER_FEATURE_Powerup_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
    ARCONTROLLER_Powerup_PilotingPCMDParameters_t *PilotingPCMDParameters; /**< */
};

/**
 * @brief Send a command <code>PilotingPCMD</code> in project <code>Powerup</code>
 * Ask the Power Up speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * @param throttle Throttle value [0:100].
 * @param roll Yaw-roll value. [-100:100]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SendPilotingPCMD (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t flag, uint8_t throttle, int8_t roll);

/**
 * @brief Set the parameters to send through the command <code>PilotingPCMD</code> in project <code>Powerup</code>
 * Ask the Power Up speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * @param throttle Throttle value [0:100].
 * @param roll Yaw-roll value. [-100:100]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SetPilotingPCMD (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t _flag, uint8_t _throttle, int8_t _roll);

/**
 * @brief Set flag sent through the command <code>PilotingPCMD</code> in project <code>Powerup</code>
 * Ask the Power Up speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SetPilotingPCMDFlag (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t flag);

/**
 * @brief Set throttle sent through the command <code>PilotingPCMD</code> in project <code>Powerup</code>
 * Ask the Power Up speed and turn ratio.
 * @param feature feature owning the commands
 * @param throttle Throttle value [0:100].
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SetPilotingPCMDThrottle (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t throttle);

/**
 * @brief Set roll sent through the command <code>PilotingPCMD</code> in project <code>Powerup</code>
 * Ask the Power Up speed and turn ratio.
 * @param feature feature owning the commands
 * @param roll Yaw-roll value. [-100:100]
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SetPilotingPCMDRoll (ARCONTROLLER_FEATURE_Powerup_t *feature, int8_t roll);

/**
 * @brief Send a command <code>PilotingUserTakeOff</code> in project <code>Powerup</code>
 * Set drone in user take off state
 * @param feature feature owning the commands
 * @param state State of user take off mode - 1 to enter in user take off. - 0 to exit from user take off.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SendPilotingUserTakeOff (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t state);

/**
 * @brief Send a command <code>PilotingMotorMode</code> in project <code>Powerup</code>
 * Motor mode
 * @param feature feature owning the commands
 * @param mode 
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SendPilotingMotorMode (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_PILOTING_MOTORMODE_MODE mode);

/**
 * @brief Send a command <code>PilotingSettingsSet</code> in project <code>Powerup</code>
 * Set the given setting
 * @param feature feature owning the commands
 * @param setting Variety of setting that can be customized
 * @param value value of the given setting
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SendPilotingSettingsSet (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING setting, float value);

/**
 * @brief Send a command <code>MediaRecordPictureV2</code> in project <code>Powerup</code>
 * Take picture
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SendMediaRecordPictureV2 (ARCONTROLLER_FEATURE_Powerup_t *feature);

/**
 * @brief Send a command <code>MediaRecordVideoV2</code> in project <code>Powerup</code>
 * Video record
 * @param feature feature owning the commands
 * @param record Command to record video
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SendMediaRecordVideoV2 (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_MEDIARECORD_VIDEOV2_RECORD record);

/**
 * @brief Send a command <code>NetworkSettingsWifiSelection</code> in project <code>Powerup</code>
 * Auto-select channel of choosen band
 * @param feature feature owning the commands
 * @param type The type of wifi selection (auto, manual)
 * @param band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 * @param channel The channel (not used in auto mode)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SendNetworkSettingsWifiSelection (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_TYPE type, eARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_BAND band, uint8_t channel);

/**
 * @brief Send a command <code>NetworkWifiScan</code> in project <code>Powerup</code>
 * Launches wifi network scan
 * @param feature feature owning the commands
 * @param band The band(s) : 2.4 Ghz, 5 Ghz, or both
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SendNetworkWifiScan (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_NETWORK_WIFISCAN_BAND band);

/**
 * @brief Send a command <code>NetworkWifiAuthChannel</code> in project <code>Powerup</code>
 * Controller inquire the list of authorized wifi channels.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SendNetworkWifiAuthChannel (ARCONTROLLER_FEATURE_Powerup_t *feature);

/**
 * @brief Send a command <code>MediaStreamingVideoEnable</code> in project <code>Powerup</code>
 * Enable/disable video streaming.
 * @param feature feature owning the commands
 * @param enable 1 to enable, 0 to disable.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SendMediaStreamingVideoEnable (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>VideoSettingsAutorecord</code> in project <code>Powerup</code>
 * Set video automatic recording state.
 * @param feature feature owning the commands
 * @param enable 0: Disabled 1: Enabled.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SendVideoSettingsAutorecord (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>VideoSettingsVideoMode</code> in project <code>Powerup</code>
 * Set video mode
 * @param feature feature owning the commands
 * @param mode Video mode
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SendVideoSettingsVideoMode (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_VIDEOSETTINGS_VIDEOMODE_MODE mode);

/**
 * @brief Send a command <code>SoundsBuzz</code> in project <code>Powerup</code>
 * Enable/disable the buzzer sound
 * @param feature feature owning the commands
 * @param enable 0: Disabled 1: Enabled.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SendSoundsBuzz (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t enable);

/**
 * @brief callback used when the command <code>PilotingStateAlertStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state JS alert state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_PilotingStateAlertStateChangedCallback (eARCOMMANDS_POWERUP_PILOTINGSTATE_ALERTSTATECHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateFlyingStateChanged</code> is decoded
 * @param feature The feature controller registred
 * @param state Drone flying state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_PilotingStateFlyingStateChangedCallback (eARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateMotorModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param mode 
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_PilotingStateMotorModeChangedCallback (eARCOMMANDS_POWERUP_PILOTINGSTATE_MOTORMODECHANGED_MODE _mode, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateAttitudeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param roll roll value (in radian) (relative to horizontal)
 * @param pitch Pitch value (in radian) (relative to horizontal)
 * @param yaw Yaw value (in radian) (relative to North)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_PilotingStateAttitudeChangedCallback (float _roll, float _pitch, float _yaw, void *customData);

/**
 * @brief callback used when the command <code>PilotingStateAltitudeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param altitude Altitude in meters relative to take off altitude
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_PilotingStateAltitudeChangedCallback (float _altitude, void *customData);

/**
 * @brief callback used when the command <code>PilotingSettingsStateSettingChanged</code> is decoded
 * @param feature The feature controller registred
 * @param setting Variety of setting that can be customized
 * @param current Current value of the given setting
 * @param min Minimal value of the given setting
 * @param max Max value of the given setting
 * @param list_flags List entry attribute Bitfield. 0x01: First: indicate it's the first element of the list. 0x02: Last: indicate it's the last element of the list. 0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored. 0x08: Remove: This value should be removed from the existing list.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_PilotingSettingsStateSettingChangedCallback (eARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING _setting, float _current, float _min, float _max, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordStatePictureStateChangedV2</code> is decoded
 * @param feature The feature controller registred
 * @param state State of device picture recording
 * @param error Error to explain the state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_MediaRecordStatePictureStateChangedV2Callback (eARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE _state, eARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordStateVideoStateChangedV2</code> is decoded
 * @param feature The feature controller registred
 * @param state State of device video recording
 * @param error Error to explain the state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_MediaRecordStateVideoStateChangedV2Callback (eARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE _state, eARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordEventPictureEventChanged</code> is decoded
 * @param feature The feature controller registred
 * @param event Last event of picture recording
 * @param error Error to explain the event
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_MediaRecordEventPictureEventChangedCallback (eARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT _event, eARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>MediaRecordEventVideoEventChanged</code> is decoded
 * @param feature The feature controller registred
 * @param event Event of video recording
 * @param error Error to explain the event
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_MediaRecordEventVideoEventChangedCallback (eARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT _event, eARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR _error, void *customData);

/**
 * @brief callback used when the command <code>NetworkSettingsStateWifiSelectionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param type The type of wifi selection settings
 * @param band The actual wifi band state
 * @param channel The channel (depends of the band)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_NetworkSettingsStateWifiSelectionChangedCallback (eARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE _type, eARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND _band, uint8_t _channel, void *customData);

/**
 * @brief callback used when the command <code>NetworkStateWifiScanListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param ssid SSID of the AP
 * @param rssi RSSI of the AP in dbm (negative value)
 * @param band The band : 2.4 GHz or 5 GHz
 * @param channel Channel of the AP
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_NetworkStateWifiScanListChangedCallback (const char * _ssid, int16_t _rssi, eARCOMMANDS_POWERUP_NETWORKSTATE_WIFISCANLISTCHANGED_BAND _band, uint8_t _channel, void *customData);

/**
 * @brief callback used when the command <code>NetworkStateAllWifiScanChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_NetworkStateAllWifiScanChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>NetworkStateWifiAuthChannelListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param band The band of this channel : 2.4 GHz or 5 GHz
 * @param channel The authorized channel.
 * @param in_or_out Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_NetworkStateWifiAuthChannelListChangedCallback (eARCOMMANDS_POWERUP_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND _band, uint8_t _channel, uint8_t _in_or_out, void *customData);

/**
 * @brief callback used when the command <code>NetworkStateAllWifiAuthChannelChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_NetworkStateAllWifiAuthChannelChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>NetworkStateLinkQualityChanged</code> is decoded
 * @param feature The feature controller registred
 * @param quality The WiFi link quality in range 0-6, the higher the value, the higher the link quality.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_NetworkStateLinkQualityChangedCallback (uint8_t _quality, void *customData);

/**
 * @brief callback used when the command <code>MediaStreamingStateVideoEnableChanged</code> is decoded
 * @param feature The feature controller registred
 * @param enabled Current video streaming status.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_MediaStreamingStateVideoEnableChangedCallback (eARCOMMANDS_POWERUP_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED _enabled, void *customData);

/**
 * @brief callback used when the command <code>VideoSettingsStateAutorecordChanged</code> is decoded
 * @param feature The feature controller registred
 * @param enabled 0: Disabled 1: Enabled.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_VideoSettingsStateAutorecordChangedCallback (uint8_t _enabled, void *customData);

/**
 * @brief callback used when the command <code>VideoSettingsStateVideoModeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param mode Video mode
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_VideoSettingsStateVideoModeChangedCallback (eARCOMMANDS_POWERUP_VIDEOSETTINGSSTATE_VIDEOMODECHANGED_MODE _mode, void *customData);

/**
 * @brief callback used when the command <code>SoundsStateBuzzChanged</code> is decoded
 * @param feature The feature controller registred
 * @param enabled 0: Disabled 1: Enabled.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Powerup_SoundsStateBuzzChangedCallback (uint8_t _enabled, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementPilotingStateAlertStateChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_PILOTINGSTATE_ALERTSTATECHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementPilotingStateFlyingStateChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementPilotingStateMotorModeChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_PILOTINGSTATE_MOTORMODECHANGED_MODE _mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementPilotingStateAttitudeChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, float _roll, float _pitch, float _yaw, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementPilotingStateAltitudeChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, float _altitude, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementPilotingSettingsStateSettingChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING _setting, float _current, float _min, float _max, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementMediaRecordStatePictureStateChangedV2 (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE _state, eARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementMediaRecordStateVideoStateChangedV2 (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE _state, eARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementMediaRecordEventPictureEventChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT _event, eARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementMediaRecordEventVideoEventChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT _event, eARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR _error, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementNetworkSettingsStateWifiSelectionChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE _type, eARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND _band, uint8_t _channel, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementNetworkStateWifiScanListChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, const char * _ssid, int16_t _rssi, eARCOMMANDS_POWERUP_NETWORKSTATE_WIFISCANLISTCHANGED_BAND _band, uint8_t _channel, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementNetworkStateAllWifiScanChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementNetworkStateWifiAuthChannelListChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND _band, uint8_t _channel, uint8_t _in_or_out, int listIndex, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementNetworkStateAllWifiAuthChannelChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementNetworkStateLinkQualityChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t _quality, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementMediaStreamingStateVideoEnableChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED _enabled, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementVideoSettingsStateAutorecordChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t _enabled, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementVideoSettingsStateVideoModeChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_VIDEOSETTINGSSTATE_VIDEOMODECHANGED_MODE _mode, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_NewCmdElementSoundsStateBuzzChanged (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t _enabled, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE rc --- 
 ******************************/
/**
 * @brief Private part of ARCONTROLLER_FEATURE_Rc_t.
 */
struct ARCONTROLLER_FEATURE_Rc_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
};

/**
 * @brief Send a command <code>MonitorChannels</code> in project <code>Rc</code>
 * Enable or Disable RC channels monitoring.
 * If enable, drone will send periodically rc channel value
 * events.
 * @param feature feature owning the commands
 * @param enable 1 for enable / 0 to disable
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Rc_SendMonitorChannels (ARCONTROLLER_FEATURE_Rc_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>StartCalibration</code> in project <code>Rc</code>
 * Start a calibration.
 * @param feature feature owning the commands
 * @param calibration_type Type of calibration. Calibration type.
 * @param channel_action Channel action. only used when calibration_type=min_max. Channel action.
 * @param channel_type Channel type. only used when calibration_type=min_max. Channel physical type.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Rc_SendStartCalibration (ARCONTROLLER_FEATURE_Rc_t *feature, eARCOMMANDS_RC_CALIBRATION_TYPE calibration_type, eARCOMMANDS_RC_CHANNEL_ACTION channel_action, eARCOMMANDS_RC_CHANNEL_TYPE channel_type);

/**
 * @brief Send a command <code>InvertChannel</code> in project <code>Rc</code>
 * Invert a RC channel values
 * @param feature feature owning the commands
 * @param action Channel action. Channel action.
 * @param flag 1 to invert channel 0 to restore channel.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Rc_SendInvertChannel (ARCONTROLLER_FEATURE_Rc_t *feature, eARCOMMANDS_RC_CHANNEL_ACTION action, uint8_t flag);

/**
 * @brief Send a command <code>AbortCalibration</code> in project <code>Rc</code>
 * Abort current calibration.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Rc_SendAbortCalibration (ARCONTROLLER_FEATURE_Rc_t *feature);

/**
 * @brief Send a command <code>ResetCalibration</code> in project <code>Rc</code>
 * Reset calibration to default values.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Rc_SendResetCalibration (ARCONTROLLER_FEATURE_Rc_t *feature);

/**
 * @brief Send a command <code>EnableReceiver</code> in project <code>Rc</code>
 * Enable or disable RC receiver.
 * If enable, drone will apply values sent by RC receiver.
 * @param feature feature owning the commands
 * @param enable 1 for enable / 0 to disable
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Rc_SendEnableReceiver (ARCONTROLLER_FEATURE_Rc_t *feature, uint8_t enable);

/**
 * @brief callback used when the command <code>ReceiverState</code> is decoded
 * @param feature The feature controller registred
 * @param state current state. RC Receiver state.
 * @param protocol Protocol used by RC.
 * @param enabled 1 if enabled, 0 otherwise. If enabled, drone will apply values sent by RC receiver.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Rc_ReceiverStateCallback (eARCOMMANDS_RC_RECEIVER_STATE _state, const char * _protocol, uint8_t _enabled, void *customData);

/**
 * @brief callback used when the command <code>ChannelsMonitorState</code> is decoded
 * @param feature The feature controller registred
 * @param state 1 if enabled, 0 if disabled
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Rc_ChannelsMonitorStateCallback (uint8_t _state, void *customData);

/**
 * @brief callback used when the command <code>ChannelValue</code> is decoded
 * @param feature The feature controller registred
 * @param id RC channel id.
 * @param action RC channel action. Channel action.
 * @param value RC channel value.
 * @param list_flags Item attribute Bitfield. First: indicate it's the first element of the list. Last: indicate it's the last element of the list. Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Rc_ChannelValueCallback (uint8_t _id, eARCOMMANDS_RC_CHANNEL_ACTION _action, int16_t _value, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>CalibrationState</code> is decoded
 * @param feature The feature controller registred
 * @param calibration_type Current calibration type set to 'none' if no calibration in progress. Calibration type.
 * @param channel_action Current channel action calibration Only used when calibration_type=min_max. Channel action.
 * @param required bitfield of required channel actions. Neutral channels calibration is always required. Channel action.
 * @param calibrated bitfield of calibrated channel actions. Channel action.
 * @param neutral_calibrated 1 if neutral channels are calibrated, 0 otherwise.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Rc_CalibrationStateCallback (eARCOMMANDS_RC_CALIBRATION_TYPE _calibration_type, eARCOMMANDS_RC_CHANNEL_ACTION _channel_action, uint32_t _required, uint32_t _calibrated, uint8_t _neutral_calibrated, void *customData);

/**
 * @brief callback used when the command <code>ChannelActionItem</code> is decoded
 * @param feature The feature controller registred
 * @param action Channel action. Channel action.
 * @param supported_type Bitfield of supported channel types. Channel physical type.
 * @param calibrated_type Calibrated action channel type (none if not calibrated). Channel physical type.
 * @param inverted 1 if inverted, 0 otherwise.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Rc_ChannelActionItemCallback (eARCOMMANDS_RC_CHANNEL_ACTION _action, uint32_t _supported_type, eARCOMMANDS_RC_CHANNEL_TYPE _calibrated_type, uint8_t _inverted, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Rc_NewCmdElementReceiverState (ARCONTROLLER_FEATURE_Rc_t *feature, eARCOMMANDS_RC_RECEIVER_STATE _state, const char * _protocol, uint8_t _enabled, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Rc_NewCmdElementChannelsMonitorState (ARCONTROLLER_FEATURE_Rc_t *feature, uint8_t _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Rc_NewCmdElementChannelValue (ARCONTROLLER_FEATURE_Rc_t *feature, uint8_t _id, eARCOMMANDS_RC_CHANNEL_ACTION _action, int16_t _value, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Rc_NewCmdElementCalibrationState (ARCONTROLLER_FEATURE_Rc_t *feature, eARCOMMANDS_RC_CALIBRATION_TYPE _calibration_type, eARCOMMANDS_RC_CHANNEL_ACTION _channel_action, uint32_t _required, uint32_t _calibrated, uint8_t _neutral_calibrated, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Rc_NewCmdElementChannelActionItem (ARCONTROLLER_FEATURE_Rc_t *feature, eARCOMMANDS_RC_CHANNEL_ACTION _action, uint32_t _supported_type, eARCOMMANDS_RC_CHANNEL_TYPE _calibrated_type, uint8_t _inverted, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE sequoia_cam --- 
 ******************************/
/**
 * @brief Private part of ARCONTROLLER_FEATURE_SequoiaCam_t.
 */
struct ARCONTROLLER_FEATURE_SequoiaCam_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
};

/**
 * @brief Send a command <code>RadiometricCalibStart</code> in project <code>SequoiaCam</code>
 * Launch capture on radiometric calibration mode. This PTP mode is 0x8004
 * @param feature feature owning the commands
 * @param id Id of the accessory for the session.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SequoiaCam_SendRadiometricCalibStart (ARCONTROLLER_FEATURE_SequoiaCam_t *feature, uint8_t id);

/**
 * @brief callback used when the command <code>RadiometricCalibStatus</code> is decoded
 * @param feature The feature controller registred
 * @param cam_id Camera id, as given in the [connected accessories](#1-33-0) event.
 * @param value Radiometric calibration status
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SequoiaCam_RadiometricCalibStatusCallback (uint8_t _cam_id, eARCOMMANDS_SEQUOIA_CAM_RADIOMETRIC_CALIB_STATUS_VALUE _value, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>RadiometricCalibResult</code> is decoded
 * @param feature The feature controller registred
 * @param cam_id Camera id, as given in the [connected accessories](#1-33-0) event.
 * @param value Last radiometric calibration result
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SequoiaCam_RadiometricCalibResultCallback (uint8_t _cam_id, eARCOMMANDS_SEQUOIA_CAM_RADIOMETRIC_CALIB_RESULT_VALUE _value, uint8_t _list_flags, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SequoiaCam_NewCmdElementRadiometricCalibStatus (ARCONTROLLER_FEATURE_SequoiaCam_t *feature, uint8_t _cam_id, eARCOMMANDS_SEQUOIA_CAM_RADIOMETRIC_CALIB_STATUS_VALUE _value, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SequoiaCam_NewCmdElementRadiometricCalibResult (ARCONTROLLER_FEATURE_SequoiaCam_t *feature, uint8_t _cam_id, eARCOMMANDS_SEQUOIA_CAM_RADIOMETRIC_CALIB_RESULT_VALUE _value, uint8_t _list_flags, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE SkyController --- 
 ******************************/
/**
 * @brief Private part of ARCONTROLLER_FEATURE_SkyController_t.
 */
struct ARCONTROLLER_FEATURE_SkyController_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
};

/**
 * @brief Send a command <code>WifiRequestWifiList</code> in project <code>SkyController</code>
 * After recieving this command, the SkyController will do a network scan to get the wifi list.
 * Communication with the drone is stopped during the network scan, so the controller should avoid sending this command during flight.
 * The controller should clear the local wifi list before sending this command.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendWifiRequestWifiList (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>WifiRequestCurrentWifi</code> in project <code>SkyController</code>
 * This is a synchronization command. The SkyController will automatically send its current wifi info when any data changes, so this command should only be used when connecting, in order to get an initial state.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendWifiRequestCurrentWifi (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>WifiConnectToWifi</code> in project <code>SkyController</code>
 * The network should be a visible network retrieved from the [WifiList](#4-0-0) event.
 * If the network is secured, then the passphrase must be set. For non-secure network, the passphrase argument is ignored.
 * @param feature feature owning the commands
 * @param bssid Wifi bssid
 * @param ssid Wifi ssid
 * @param passphrase Wifi passphrase
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendWifiConnectToWifi (ARCONTROLLER_FEATURE_SkyController_t *feature, char * bssid, char * ssid, char * passphrase);

/**
 * @brief Send a command <code>WifiForgetWifi</code> in project <code>SkyController</code>
 * Removes the network from the saved network list.
 * If the network is the current network, then the SkyController will be disconnected first.
 * @param feature feature owning the commands
 * @param ssid Wifi ssid
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendWifiForgetWifi (ARCONTROLLER_FEATURE_SkyController_t *feature, char * ssid);

/**
 * @brief Send a command <code>WifiWifiAuthChannel</code> in project <code>SkyController</code>
 * Requests the list of authorized wifi channels for the current country/regulatory domain.
 * These channels are valid for the [AccessPointChannel](#4-9-1) command.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendWifiWifiAuthChannel (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>DeviceRequestDeviceList</code> in project <code>SkyController</code>
 * @deprecated
 * This command is deprecated (The SkyController can only see one device at a time, so a device list is not required), and should not be used.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendDeviceRequestDeviceList (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>DeviceRequestCurrentDevice</code> in project <code>SkyController</code>
 * @deprecated
 * This command is deprecated and should not be used.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendDeviceRequestCurrentDevice (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>DeviceConnectToDevice</code> in project <code>SkyController</code>
 * @deprecated
 * This command is deprecated and should not be used.
 * The SkyController will automatically connect to the first visible device on the current wifi network.
 * @param feature feature owning the commands
 * @param deviceName Device name
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendDeviceConnectToDevice (ARCONTROLLER_FEATURE_SkyController_t *feature, char * deviceName);

/**
 * @brief Send a command <code>SettingsAllSettings</code> in project <code>SkyController</code>
 * Request the controller to send all its settings.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendSettingsAllSettings (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>SettingsReset</code> in project <code>SkyController</code>
 * Reset all settings (i.e. everything except drone pairing).
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendSettingsReset (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>CommonAllStates</code> in project <code>SkyController</code>
 * Request the controller to send all its states.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendCommonAllStates (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AccessPointSettingsAccessPointSSID</code> in project <code>SkyController</code>
 * Set the SkyController access point SSID.
 * The name will be checked, and can be modified before application. Use the [AccessPointSSIDChanged](#4-10-0) event to get the applied network name.
 * @param feature feature owning the commands
 * @param ssid AccessPoint SSID
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsAccessPointSSID (ARCONTROLLER_FEATURE_SkyController_t *feature, char * ssid);

/**
 * @brief Send a command <code>AccessPointSettingsAccessPointChannel</code> in project <code>SkyController</code>
 * @deprecated
 * Set the SkyController access point channel.
 * The channel will be checked, and can be modified before application. Use the [AccessPointChannelChanged](#4-10-1) event to get the applied channel.
 * The list of authorized channels for the current country can be retrived with the [WifiAuthChannel](#4-1-4) command.
 * This command is deprecated. Use the [WifiSelection](#4-9-2) command instead.
 * @param feature feature owning the commands
 * @param channel AccessPoint Channel
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsAccessPointChannel (ARCONTROLLER_FEATURE_SkyController_t *feature, uint8_t channel);

/**
 * @brief Send a command <code>AccessPointSettingsWifiSelection</code> in project <code>SkyController</code>
 * Set the SkyController access point channel.
 * The channel will be checked, and can be modified before application. Use the [WifiSelectionChanged](#4-10-2) event to get the applied channel/band.
 * The list of authorized channels for the current country can be retrived with the [WifiAuthChannel](#4-1-4) command.
 * @param feature feature owning the commands
 * @param type The type of wifi selection (only manual at the moment)
 * @param band The allowed band : 2.4 Ghz or 5 Ghz
 * @param channel The channel
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsWifiSelection (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_TYPE type, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND band, uint8_t channel);

/**
 * @brief Send a command <code>AccessPointSettingsWifiSecurity</code> in project <code>SkyController</code>
 * Set the SkyController access point security. The key will be checked, and can be refused by the product. In this case, the security will not be changed. Use the [WifiSecurityChanged](#4-10-3) event to get the applied security settings.
 * @param feature feature owning the commands
 * @param security_type The type of security for the network
 * @param key The security key (ignored if security_type is open)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsWifiSecurity (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISECURITY_SECURITY_TYPE security_type, char * key);

/**
 * @brief Send a command <code>CameraResetOrientation</code> in project <code>SkyController</code>
 * @deprecated
 * This command is deprecated. The same effect can be achieved by sending a [CameraOrientation](#1-1-0) command with values retrieved from the [defaultCameraOrientation](#1-25-1) event.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendCameraResetOrientation (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>GamepadInfosGetGamepadControls</code> in project <code>SkyController</code>
 * This commands allow the application to get a representation of all the mappable controls on the SkyController. Some physical controls might be absent from this list because their function can not be changed.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendGamepadInfosGetGamepadControls (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>ButtonMappingsGetCurrentButtonMappings</code> in project <code>SkyController</code>
 * The SkyController will send its full button mapping. This command is mainly useful for initial synchronization, as every change to the button mapping (via the [setButtonMapping](#4-12-2) command) will trigger [currentButtonMappings](#4-13-0) events.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsGetCurrentButtonMappings (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>ButtonMappingsGetAvailableButtonMappings</code> in project <code>SkyController</code>
 * The SkyController will send all the available action that can be mapped on buttons.
 * As this list is static, the controller only need to request this information once.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsGetAvailableButtonMappings (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>ButtonMappingsSetButtonMapping</code> in project <code>SkyController</code>
 * Any previous mapping for the given button will be removed, as a button can only be mapped to one action.
 * To unmap a button, a NO_ACTION mapping can be used (see the [availableButtonMappings](#4-13-2) event).
 * Some actions can not be mapped to two different buttons at the same time. In this case, the first button will automatically be set to NO_ACTION, and the corresponding [currentButtonMappings](#4-13-0) event will be fired.
 * @param feature feature owning the commands
 * @param key_id The keycode to map
 * @param mapping_uid The mapping to associate with the key
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsSetButtonMapping (ARCONTROLLER_FEATURE_SkyController_t *feature, int32_t key_id, char * mapping_uid);

/**
 * @brief Send a command <code>ButtonMappingsDefaultButtonMapping</code> in project <code>SkyController</code>
 * The default values can change between software versions.
 * The default values are different for Black Edition SkyControllers
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsDefaultButtonMapping (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AxisMappingsGetCurrentAxisMappings</code> in project <code>SkyController</code>
 * The SkyController will send its full axis mapping. This command is mainly useful for initial synchronization, as every change to the axis mapping (via the [setAxisMapping](#4-14-2) command) will trigger [currentAxisMappings](#4-15-0) events.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsGetCurrentAxisMappings (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AxisMappingsGetAvailableAxisMappings</code> in project <code>SkyController</code>
 * The SkyController will send all the available action that can be mapped on axes.
 * As this list is static, the controller only need to request this information once.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsGetAvailableAxisMappings (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AxisMappingsSetAxisMapping</code> in project <code>SkyController</code>
 * Any previous mapping for the given axis will be removed, as a axis can only be mapped to one action.
 * To unmap a axis, a NO_ACTION mapping can be used (see the [availableAxisMappings](#4-15-2) event).
 * Some actions can not be mapped to two different axes at the same time. In this case, the first axis will automatically be set to NO_ACTION, and the corresponding [currentAxisMappings](#4-15-0) event will be fired.
 * @param feature feature owning the commands
 * @param axis_id The axiscode to map
 * @param mapping_uid The mapping to associate with the axis
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsSetAxisMapping (ARCONTROLLER_FEATURE_SkyController_t *feature, int32_t axis_id, char * mapping_uid);

/**
 * @brief Send a command <code>AxisMappingsDefaultAxisMapping</code> in project <code>SkyController</code>
 * The default values can change between software versions.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsDefaultAxisMapping (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AxisFiltersGetCurrentAxisFilters</code> in project <code>SkyController</code>
 * The SkyController will send its full axis filters map. This command is mainly useful for initial synchronization, as every change to the filters map (via the [setAxisFilter](#4-16-2) command) will trigger [currentAxisFilters](#4-17-0) events.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersGetCurrentAxisFilters (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AxisFiltersGetPresetAxisFilters</code> in project <code>SkyController</code>
 * @deprecated
 * The preset list is empty and will never be filled, so this command is flagged as deprecated.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersGetPresetAxisFilters (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AxisFiltersSetAxisFilter</code> in project <code>SkyController</code>
 * A filter modifies the response curve of an axis.
 * As the preset filters list is empty, all filters are to be sent using the builder syntax.
 * 
 * The builder syntax supports two types of filters: Multilinear and Exponential.
 * 
 * Multilinear filters create response curves made of multiple linear segments:
 * * The default filter (ARMF;) is purely linear and create a single segment from the two implicit `[-1; -1]` and `[1; 1]` points.
 * * Additionnal points can be added to the filter with the following syntax: `ARMF;x1>y1;...;xN>yN;`, where all numbers are floating point numbers in range `[-1; 1]`.
 * * Additionnal points **must** respect the following constraints : `x(N)>x(N-1)` and `y(N)>=y(N-1)`.
 * 
 * Exponential filters:
 * * The syntax is `ARXF;CPx;CPy;`, where CPx and CPy are floating point numbers in range `[0; 1]`.
 * * Best results are achieved when `CPx + CPy == 1` and `CPx > CPy`.
 * * If the control point is on the diagonal (i.e. `CPx == CPy`), then the resulting filter will be linear.
 * @param feature feature owning the commands
 * @param axis_id The axiscode to filter
 * @param filter_uid_or_builder The mapping preset to associate with the axis (Or a string to build a new one)
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersSetAxisFilter (ARCONTROLLER_FEATURE_SkyController_t *feature, int32_t axis_id, char * filter_uid_or_builder);

/**
 * @brief Send a command <code>AxisFiltersDefaultAxisFilters</code> in project <code>SkyController</code>
 * The default values can change between software versions.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersDefaultAxisFilters (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>CoPilotingSetPilotingSource</code> in project <code>SkyController</code>
 * Change who is piloting the drone.
 * By default, the SkyController is the source of piloting commands, and any connected application (i.e. FreeFlight) can not send [piloting commands](#1-0-2) commands directly to the drone. When the piloting source is set to Controller, the SkyController will forward the controller commands to the drone, and won't send any commands itself.
 * The piloting source is automatically reset to SkyController when the controller is disconnected.
 * @param feature feature owning the commands
 * @param source The new piloting source
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendCoPilotingSetPilotingSource (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE source);

/**
 * @brief Send a command <code>CalibrationEnableMagnetoCalibrationQualityUpdates</code> in project <code>SkyController</code>
 * Asks the SkyController to send (or not) the magneto calibration quality updates.
 * The [MagnetoCalibrationState](#4-23-0) event will always be sent when the status parameters changes, regardless of this setting.
 * @param feature feature owning the commands
 * @param enable Flag to enable the feature: 1 = Enable quality updates 0 = Disable quality updates
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendCalibrationEnableMagnetoCalibrationQualityUpdates (ARCONTROLLER_FEATURE_SkyController_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>CalibrationStartCalibration</code> in project <code>SkyController</code>
 * Asks the SkyController to start a magneto calibration.
 * If the calibration is already started, this command has no effect.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendCalibrationStartCalibration (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>CalibrationAbortCalibration</code> in project <code>SkyController</code>
 * Asks the SkyController to abort an in-progress magneto calibration.
 * If no calibration is in progress, this command has no effect.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendCalibrationAbortCalibration (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>FactoryReset</code> in project <code>SkyController</code>
 * This command will request a factory reset from the SkyController. *The factory reset procedure implies an automatic reboot*, which will be done immediately after recieving this command.
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SendFactoryReset (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief callback used when the command <code>WifiStateWifiList</code> is decoded
 * @param feature The feature controller registred
 * @param bssid Wifi bssid
 * @param ssid Wifi ssid
 * @param secured Is wifi secured by passphrase
 * @param saved Is wifi saved in terminal
 * @param rssi Wifi rssi
 * @param frequency Wifi frequency
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_WifiStateWifiListCallback (const char * _bssid, const char * _ssid, uint8_t _secured, uint8_t _saved, int32_t _rssi, int32_t _frequency, void *customData);

/**
 * @brief callback used when the command <code>WifiStateConnexionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param ssid Wifi ssid
 * @param status Wifi status
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_WifiStateConnexionChangedCallback (const char * _ssid, eARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS _status, void *customData);

/**
 * @brief callback used when the command <code>WifiStateWifiAuthChannelListChanged</code> is decoded
 * @param feature The feature controller registred
 * @param band The band of this channel : 2.4 GHz or 5 GHz
 * @param channel The authorized channel
 * @param in_or_out Bit 0 is 1 if channel is authorized outside (0 otherwise) Bit 1 is 1 if channel is authorized inside (0 otherwise)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_WifiStateWifiAuthChannelListChangedCallback (eARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND _band, uint8_t _channel, uint8_t _in_or_out, void *customData);

/**
 * @brief callback used when the command <code>WifiStateAllWifiAuthChannelChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_WifiStateAllWifiAuthChannelChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>WifiStateWifiSignalChanged</code> is decoded
 * @param feature The feature controller registred
 * @param level Level of the signal. Levels are from 0 to 5. 0 is an unknown value. 1 is a weak wifi signal, 5 is the best.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_WifiStateWifiSignalChangedCallback (uint8_t _level, void *customData);

/**
 * @brief callback used when the command <code>WifiStateWifiAuthChannelListChangedV2</code> is decoded
 * @param feature The feature controller registred
 * @param band The band of this channel : 2.4 GHz or 5 GHz
 * @param channel The authorized channel
 * @param in_or_out Bit 0 is 1 if channel is authorized outside (0 otherwise) Bit 1 is 1 if channel is authorized inside (0 otherwise)
 * @param list_flags List entry attribute Bitfield. 0x01: First: indicate it's the first element of the list. 0x02: Last: indicate it's the last element of the list. 0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored. 0x08: Remove: This value should be removed from the existing list.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_WifiStateWifiAuthChannelListChangedV2Callback (eARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGEDV2_BAND _band, uint8_t _channel, uint8_t _in_or_out, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>WifiStateWifiCountryChanged</code> is decoded
 * @param feature The feature controller registred
 * @param code Country code with ISO 3166 format, empty string means unknown country.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_WifiStateWifiCountryChangedCallback (const char * _code, void *customData);

/**
 * @brief callback used when the command <code>WifiStateWifiEnvironmentChanged</code> is decoded
 * @param feature The feature controller registred
 * @param environment Type of environment
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_WifiStateWifiEnvironmentChangedCallback (eARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIENVIRONMENTCHANGED_ENVIRONMENT _environment, void *customData);

/**
 * @brief callback used when the command <code>DeviceStateDeviceList</code> is decoded
 * @param feature The feature controller registred
 * @param name Device name
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_DeviceStateDeviceListCallback (const char * _name, void *customData);

/**
 * @brief callback used when the command <code>DeviceStateConnexionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param status Connection status
 * @param deviceName Drone name
 * @param deviceProductID Drone product IDentifier
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_DeviceStateConnexionChangedCallback (eARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS _status, const char * _deviceName, uint16_t _deviceProductID, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateAllSettingsChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_SettingsStateAllSettingsChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>SettingsStateResetChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_SettingsStateResetChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>SettingsStateProductSerialChanged</code> is decoded
 * @param feature The feature controller registred
 * @param serialNumber Serial number (hexadecimal value)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_SettingsStateProductSerialChangedCallback (const char * _serialNumber, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateProductVariantChanged</code> is decoded
 * @param feature The feature controller registred
 * @param variant Variant of the product
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_SettingsStateProductVariantChangedCallback (eARCOMMANDS_SKYCONTROLLER_SETTINGSSTATE_PRODUCTVARIANTCHANGED_VARIANT _variant, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateProductVersionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param software Product software version
 * @param hardware Product hardware version
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_SettingsStateProductVersionChangedCallback (const char * _software, const char * _hardware, void *customData);

/**
 * @brief callback used when the command <code>SettingsStateCPUID</code> is decoded
 * @param feature The feature controller registred
 * @param id Product main cpu id
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_SettingsStateCPUIDCallback (const char * _id, void *customData);

/**
 * @brief callback used when the command <code>CommonStateAllStatesChanged</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_CommonStateAllStatesChangedCallback (void *customData);

/**
 * @brief callback used when the command <code>SkyControllerStateBatteryChanged</code> is decoded
 * @param feature The feature controller registred
 * @param percent Controller battery: from 0 (empty) to 100 (full charge). Value of 255 when charging.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_SkyControllerStateBatteryChangedCallback (uint8_t _percent, void *customData);

/**
 * @brief callback used when the command <code>SkyControllerStateGpsFixChanged</code> is decoded
 * @param feature The feature controller registred
 * @param fixed SkyController fixed
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_SkyControllerStateGpsFixChangedCallback (uint8_t _fixed, void *customData);

/**
 * @brief callback used when the command <code>SkyControllerStateGpsPositionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param latitude SkyController latitude (500. if not available)
 * @param longitude SkyController longiture (500. if not available)
 * @param altitude Altitude (in meters) above sea level. Only meaningful if latitude and longiture are available
 * @param heading SkyController heading relative to magnetic north (500.f if not available)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_SkyControllerStateGpsPositionChangedCallback (double _latitude, double _longitude, double _altitude, float _heading, void *customData);

/**
 * @brief callback used when the command <code>SkyControllerStateBatteryState</code> is decoded
 * @param feature The feature controller registred
 * @param state Current battery state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_SkyControllerStateBatteryStateCallback (eARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>SkyControllerStateAttitudeChanged</code> is decoded
 * @param feature The feature controller registred
 * @param q0 SkyController Attitude q0 (quaternion scalar part)
 * @param q1 SkyController Attitude q1 (quaternion vector part)
 * @param q2 SkyController Attitude q2 (quaternion vector part)
 * @param q3 SkyController Attitude q3 (quaternion vector part)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_SkyControllerStateAttitudeChangedCallback (float _q0, float _q1, float _q2, float _q3, void *customData);

/**
 * @brief callback used when the command <code>AccessPointSettingsStateAccessPointSSIDChanged</code> is decoded
 * @param feature The feature controller registred
 * @param ssid AccessPoint SSID
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_AccessPointSettingsStateAccessPointSSIDChangedCallback (const char * _ssid, void *customData);

/**
 * @brief callback used when the command <code>AccessPointSettingsStateAccessPointChannelChanged</code> is decoded
 * @param feature The feature controller registred
 * @param channel AccessPoint Channel
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_AccessPointSettingsStateAccessPointChannelChangedCallback (uint8_t _channel, void *customData);

/**
 * @brief callback used when the command <code>AccessPointSettingsStateWifiSelectionChanged</code> is decoded
 * @param feature The feature controller registred
 * @param type The type of wifi selection (only manual at the moment)
 * @param band The allowed band : 2.4 Ghz or 5 Ghz
 * @param channel The channel
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_AccessPointSettingsStateWifiSelectionChangedCallback (eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE _type, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND _band, uint8_t _channel, void *customData);

/**
 * @brief callback used when the command <code>AccessPointSettingsStateWifiSecurityChanged</code> is decoded
 * @param feature The feature controller registred
 * @param security_type The type of security for the network
 * @param key The security key (ignored if security_type is open)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_AccessPointSettingsStateWifiSecurityChangedCallback (eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISECURITYCHANGED_SECURITY_TYPE _security_type, const char * _key, void *customData);

/**
 * @brief callback used when the command <code>GamepadInfosStateGamepadControl</code> is decoded
 * @param feature The feature controller registred
 * @param type The type (axis/button) of the control
 * @param id The button or axis id A button and an axis can have the same ID, but their type is different
 * @param name Display name for the control
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_GamepadInfosStateGamepadControlCallback (eARCOMMANDS_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE _type, int32_t _id, const char * _name, void *customData);

/**
 * @brief callback used when the command <code>GamepadInfosStateAllGamepadControlsSent</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_GamepadInfosStateAllGamepadControlsSentCallback (void *customData);

/**
 * @brief callback used when the command <code>ButtonMappingsStateCurrentButtonMappings</code> is decoded
 * @param feature The feature controller registred
 * @param key_id The keycode mapped
 * @param mapping_uid The mapping associated
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_ButtonMappingsStateCurrentButtonMappingsCallback (int32_t _key_id, const char * _mapping_uid, void *customData);

/**
 * @brief callback used when the command <code>ButtonMappingsStateAllCurrentButtonMappingsSent</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_ButtonMappingsStateAllCurrentButtonMappingsSentCallback (void *customData);

/**
 * @brief callback used when the command <code>ButtonMappingsStateAvailableButtonMappings</code> is decoded
 * @param feature The feature controller registred
 * @param mapping_uid The mapping UID (used in communication with the SkyController)
 * @param name Display name for the user
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_ButtonMappingsStateAvailableButtonMappingsCallback (const char * _mapping_uid, const char * _name, void *customData);

/**
 * @brief callback used when the command <code>ButtonMappingsStateAllAvailableButtonsMappingsSent</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_ButtonMappingsStateAllAvailableButtonsMappingsSentCallback (void *customData);

/**
 * @brief callback used when the command <code>AxisMappingsStateCurrentAxisMappings</code> is decoded
 * @param feature The feature controller registred
 * @param axis_id The axiscode mapped
 * @param mapping_uid The mapping associated
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_AxisMappingsStateCurrentAxisMappingsCallback (int32_t _axis_id, const char * _mapping_uid, void *customData);

/**
 * @brief callback used when the command <code>AxisMappingsStateAllCurrentAxisMappingsSent</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_AxisMappingsStateAllCurrentAxisMappingsSentCallback (void *customData);

/**
 * @brief callback used when the command <code>AxisMappingsStateAvailableAxisMappings</code> is decoded
 * @param feature The feature controller registred
 * @param mapping_uid The mapping UID (used in communication with the SkyController)
 * @param name Display name for the user
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_AxisMappingsStateAvailableAxisMappingsCallback (const char * _mapping_uid, const char * _name, void *customData);

/**
 * @brief callback used when the command <code>AxisMappingsStateAllAvailableAxisMappingsSent</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_AxisMappingsStateAllAvailableAxisMappingsSentCallback (void *customData);

/**
 * @brief callback used when the command <code>AxisFiltersStateCurrentAxisFilters</code> is decoded
 * @param feature The feature controller registred
 * @param axis_id The axiscode filtered
 * @param filter_uid_or_builder The filter associated
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_AxisFiltersStateCurrentAxisFiltersCallback (int32_t _axis_id, const char * _filter_uid_or_builder, void *customData);

/**
 * @brief callback used when the command <code>AxisFiltersStateAllCurrentFiltersSent</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_AxisFiltersStateAllCurrentFiltersSentCallback (void *customData);

/**
 * @brief callback used when the command <code>AxisFiltersStatePresetAxisFilters</code> is decoded
 * @param feature The feature controller registred
 * @param filter_uid The filter UID (used in communication with the SkyController)
 * @param name Display name for the user
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_AxisFiltersStatePresetAxisFiltersCallback (const char * _filter_uid, const char * _name, void *customData);

/**
 * @brief callback used when the command <code>AxisFiltersStateAllPresetFiltersSent</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_AxisFiltersStateAllPresetFiltersSentCallback (void *customData);

/**
 * @brief callback used when the command <code>CoPilotingStatePilotingSource</code> is decoded
 * @param feature The feature controller registred
 * @param source The source
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_CoPilotingStatePilotingSourceCallback (eARCOMMANDS_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE _source, void *customData);

/**
 * @brief callback used when the command <code>CalibrationStateMagnetoCalibrationState</code> is decoded
 * @param feature The feature controller registred
 * @param status The global status of the calibration
 * @param X_Quality Calibration quality on X axis. 0 is bad, 255 is perfect
 * @param Y_Quality Calibration quality on Y axis. 0 is bad, 255 is perfect
 * @param Z_Quality Calibration quality on Z axis. 0 is bad, 255 is perfect
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_CalibrationStateMagnetoCalibrationStateCallback (eARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS _status, uint8_t _X_Quality, uint8_t _Y_Quality, uint8_t _Z_Quality, void *customData);

/**
 * @brief callback used when the command <code>CalibrationStateMagnetoCalibrationQualityUpdatesState</code> is decoded
 * @param feature The feature controller registred
 * @param enabled Flag (is the feature enabled). 1 = The skycontroller sends updated when quality is updated 0 = The skycontroller only sent updated when state is updated
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_CalibrationStateMagnetoCalibrationQualityUpdatesStateCallback (uint8_t _enabled, void *customData);

/**
 * @brief callback used when the command <code>CalibrationStateMagnetoCalibrationStateV2</code> is decoded
 * @param feature The feature controller registred
 * @param state The calibration state
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_CalibrationStateMagnetoCalibrationStateV2Callback (eARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE _state, void *customData);

/**
 * @brief callback used when the command <code>ButtonEventsSettings</code> is decoded
 * @param feature The feature controller registred
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_ButtonEventsSettingsCallback (void *customData);

/**
 * @brief callback used when the command <code>CommonEventStateShutdown</code> is decoded
 * @param feature The feature controller registred
 * @param reason Reason of the shutdown of the product
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_SkyController_CommonEventStateShutdownCallback (eARCOMMANDS_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON _reason, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementWifiStateWifiList (ARCONTROLLER_FEATURE_SkyController_t *feature, const char * _bssid, const char * _ssid, uint8_t _secured, uint8_t _saved, int32_t _rssi, int32_t _frequency, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementWifiStateConnexionChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, const char * _ssid, eARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS _status, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementWifiStateWifiAuthChannelListChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND _band, uint8_t _channel, uint8_t _in_or_out, int listIndex, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementWifiStateAllWifiAuthChannelChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementWifiStateWifiSignalChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, uint8_t _level, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementWifiStateWifiAuthChannelListChangedV2 (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGEDV2_BAND _band, uint8_t _channel, uint8_t _in_or_out, uint8_t _list_flags, int listIndex, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementWifiStateWifiCountryChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, const char * _code, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementWifiStateWifiEnvironmentChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIENVIRONMENTCHANGED_ENVIRONMENT _environment, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementDeviceStateDeviceList (ARCONTROLLER_FEATURE_SkyController_t *feature, const char * _name, int listIndex, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementDeviceStateConnexionChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS _status, const char * _deviceName, uint16_t _deviceProductID, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementSettingsStateAllSettingsChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementSettingsStateResetChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementSettingsStateProductSerialChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, const char * _serialNumber, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementSettingsStateProductVariantChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_SETTINGSSTATE_PRODUCTVARIANTCHANGED_VARIANT _variant, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementSettingsStateProductVersionChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, const char * _software, const char * _hardware, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementSettingsStateCPUID (ARCONTROLLER_FEATURE_SkyController_t *feature, const char * _id, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementCommonStateAllStatesChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementSkyControllerStateBatteryChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, uint8_t _percent, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementSkyControllerStateGpsFixChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, uint8_t _fixed, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementSkyControllerStateGpsPositionChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, double _latitude, double _longitude, double _altitude, float _heading, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementSkyControllerStateBatteryState (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementSkyControllerStateAttitudeChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, float _q0, float _q1, float _q2, float _q3, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementAccessPointSettingsStateAccessPointSSIDChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, const char * _ssid, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementAccessPointSettingsStateAccessPointChannelChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, uint8_t _channel, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementAccessPointSettingsStateWifiSelectionChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE _type, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND _band, uint8_t _channel, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementAccessPointSettingsStateWifiSecurityChanged (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISECURITYCHANGED_SECURITY_TYPE _security_type, const char * _key, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementGamepadInfosStateGamepadControl (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE _type, int32_t _id, const char * _name, int listIndex, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementGamepadInfosStateAllGamepadControlsSent (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementButtonMappingsStateCurrentButtonMappings (ARCONTROLLER_FEATURE_SkyController_t *feature, int32_t _key_id, const char * _mapping_uid, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementButtonMappingsStateAllCurrentButtonMappingsSent (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementButtonMappingsStateAvailableButtonMappings (ARCONTROLLER_FEATURE_SkyController_t *feature, const char * _mapping_uid, const char * _name, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementButtonMappingsStateAllAvailableButtonsMappingsSent (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementAxisMappingsStateCurrentAxisMappings (ARCONTROLLER_FEATURE_SkyController_t *feature, int32_t _axis_id, const char * _mapping_uid, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementAxisMappingsStateAllCurrentAxisMappingsSent (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementAxisMappingsStateAvailableAxisMappings (ARCONTROLLER_FEATURE_SkyController_t *feature, const char * _mapping_uid, const char * _name, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementAxisMappingsStateAllAvailableAxisMappingsSent (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementAxisFiltersStateCurrentAxisFilters (ARCONTROLLER_FEATURE_SkyController_t *feature, int32_t _axis_id, const char * _filter_uid_or_builder, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementAxisFiltersStateAllCurrentFiltersSent (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementAxisFiltersStatePresetAxisFilters (ARCONTROLLER_FEATURE_SkyController_t *feature, const char * _filter_uid, const char * _name, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementAxisFiltersStateAllPresetFiltersSent (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementCoPilotingStatePilotingSource (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE _source, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementCalibrationStateMagnetoCalibrationState (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS _status, uint8_t _X_Quality, uint8_t _Y_Quality, uint8_t _Z_Quality, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementCalibrationStateMagnetoCalibrationQualityUpdatesState (ARCONTROLLER_FEATURE_SkyController_t *feature, uint8_t _enabled, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementCalibrationStateMagnetoCalibrationStateV2 (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE _state, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementButtonEventsSettings (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_NewCmdElementCommonEventStateShutdown (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON _reason, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE thermal_cam --- 
 ******************************/
/**
 * @brief Private part of ARCONTROLLER_FEATURE_ThermalCam_t.
 */
struct ARCONTROLLER_FEATURE_ThermalCam_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
};

/**
 * @brief Send a command <code>Activate</code> in project <code>ThermalCam</code>
 * Activate a given thermal camera.
 * Activating a camera may deactivate others on some drones.
 * @param feature feature owning the commands
 * @param cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ThermalCam_SendActivate (ARCONTROLLER_FEATURE_ThermalCam_t *feature, uint8_t cam_id);

/**
 * @brief Send a command <code>Deactivate</code> in project <code>ThermalCam</code>
 * Deactivate a given thermal camera.
 * @param feature feature owning the commands
 * @param cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ThermalCam_SendDeactivate (ARCONTROLLER_FEATURE_ThermalCam_t *feature, uint8_t cam_id);

/**
 * @brief Send a command <code>SetSensitivity</code> in project <code>ThermalCam</code>
 * Set the thermal camera sensitivity range.
 * @param feature feature owning the commands
 * @param cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * @param range Thermal range
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ThermalCam_SendSetSensitivity (ARCONTROLLER_FEATURE_ThermalCam_t *feature, uint8_t cam_id, eARCOMMANDS_THERMAL_CAM_RANGE range);

/**
 * @brief callback used when the command <code>CameraState</code> is decoded
 * @param feature The feature controller registred
 * @param cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * @param state Camera state
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ThermalCam_CameraStateCallback (uint8_t _cam_id, eARCOMMANDS_THERMAL_CAM_STATE _state, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>Sensitivity</code> is decoded
 * @param feature The feature controller registred
 * @param cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * @param current_range Thermal range
 * @param available_ranges Thermal range
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ThermalCam_SensitivityCallback (uint8_t _cam_id, eARCOMMANDS_THERMAL_CAM_RANGE _current_range, uint8_t _available_ranges, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>CalibrationInfos</code> is decoded
 * @param feature The feature controller registred
 * @param cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * @param roll Euler angle roll in degree difference between visible cam and thermal cam.
 * @param pitch Euler angle pitch in degree difference between visible cam and thermal cam.
 * @param yaw Euler angle yaw in degree difference between visible cam and thermal cam.
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_ThermalCam_CalibrationInfosCallback (uint8_t _cam_id, float _roll, float _pitch, float _yaw, uint8_t _list_flags, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ThermalCam_NewCmdElementCameraState (ARCONTROLLER_FEATURE_ThermalCam_t *feature, uint8_t _cam_id, eARCOMMANDS_THERMAL_CAM_STATE _state, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ThermalCam_NewCmdElementSensitivity (ARCONTROLLER_FEATURE_ThermalCam_t *feature, uint8_t _cam_id, eARCOMMANDS_THERMAL_CAM_RANGE _current_range, uint8_t _available_ranges, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ThermalCam_NewCmdElementCalibrationInfos (ARCONTROLLER_FEATURE_ThermalCam_t *feature, uint8_t _cam_id, float _roll, float _pitch, float _yaw, uint8_t _list_flags, eARCONTROLLER_ERROR *error);


/*******************************
 * --- FEATURE wifi --- 
 ******************************/
/**
 * @brief Private part of ARCONTROLLER_FEATURE_Wifi_t.
 */
struct ARCONTROLLER_FEATURE_Wifi_Private_t
{
    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */
    ARCONTROLLER_DICTIONARY_COMMANDS_t *dictionary; /**< stores states and settings of the device */
    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */
    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */
};

/**
 * @brief Send a command <code>Scan</code> in project <code>Wifi</code>
 * Launches wifi network scan for a given band to get a list of all wifi networks found by the drone.
 * @param feature feature owning the commands
 * @param band The band : 2.4 Ghz or 5 Ghz
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Wifi_SendScan (ARCONTROLLER_FEATURE_Wifi_t *feature, uint8_t band);

/**
 * @brief Send a command <code>UpdateAuthorizedChannels</code> in project <code>Wifi</code>
 * Get all available Wifi channels.
 * The list of available Wifi channels is related to the country of the drone. You can get this country with the event [WifiCountryChanged](#wifi-CountryChanged).
 * @param feature feature owning the commands
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Wifi_SendUpdateAuthorizedChannels (ARCONTROLLER_FEATURE_Wifi_t *feature);

/**
 * @brief Send a command <code>SetApChannel</code> in project <code>Wifi</code>
 * Select channel of choosen band to put the drone's access point on this channel.
 * @param feature feature owning the commands
 * @param type The wifi selection type available
 * @param band The band : 2.4 Ghz or 5 Ghz
 * @param channel The channel you want to select. Used only when type is manual.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Wifi_SendSetApChannel (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCOMMANDS_WIFI_SELECTION_TYPE type, eARCOMMANDS_WIFI_BAND band, uint8_t channel);

/**
 * @brief Send a command <code>SetSecurity</code> in project <code>Wifi</code>
 * Set the wifi security.
 * The security is changed on the next boot.
 * @param feature feature owning the commands
 * @param type The type of wifi security (open, wpa2)
 * @param key The key to secure the network. Not used if type is open
 * @param key_type Type of the key sent
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Wifi_SendSetSecurity (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCOMMANDS_WIFI_SECURITY_TYPE type, char * key, eARCOMMANDS_WIFI_SECURITY_KEY_TYPE key_type);

/**
 * @brief Send a command <code>SetCountry</code> in project <code>Wifi</code>
 * Set the wifi country.
 * @param feature feature owning the commands
 * @param selection_mode Type of country selection
 * @param code Country code with ISO 3166 format. Not used if automatic is 1.
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Wifi_SendSetCountry (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCOMMANDS_WIFI_COUNTRY_SELECTION selection_mode, char * code);

/**
 * @brief Send a command <code>SetEnvironment</code> in project <code>Wifi</code>
 * Set indoor or outdoor wifi settings.
 * @param feature feature owning the commands
 * @param environment Type of environment
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Wifi_SendSetEnvironment (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCOMMANDS_WIFI_ENVIRONMENT environment);

/**
 * @brief callback used when the command <code>ScannedItem</code> is decoded
 * @param feature The feature controller registred
 * @param ssid SSID of the AP
 * @param rssi RSSI of the AP.
 * @param band The band : 2.4 Ghz or 5 Ghz
 * @param channel Channel of the AP
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Wifi_ScannedItemCallback (const char * _ssid, int16_t _rssi, eARCOMMANDS_WIFI_BAND _band, uint8_t _channel, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>AuthorizedChannel</code> is decoded
 * @param feature The feature controller registred
 * @param band The band : 2.4 Ghz or 5 Ghz
 * @param channel The channel number
 * @param environment Type of environment
 * @param list_flags Flags use by maps and lists
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Wifi_AuthorizedChannelCallback (eARCOMMANDS_WIFI_BAND _band, uint8_t _channel, uint8_t _environment, uint8_t _list_flags, void *customData);

/**
 * @brief callback used when the command <code>ApChannelChanged</code> is decoded
 * @param feature The feature controller registred
 * @param type The wifi selection type available
 * @param band The band : 2.4 Ghz or 5 Ghz
 * @param channel The channel of the drone's access point
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Wifi_ApChannelChangedCallback (eARCOMMANDS_WIFI_SELECTION_TYPE _type, eARCOMMANDS_WIFI_BAND _band, uint8_t _channel, void *customData);

/**
 * @brief callback used when the command <code>SecurityChanged</code> is decoded
 * @param feature The feature controller registred
 * @param key The key to secure the network. Not used if type is open
 * @param key_type The type of wifi security (open, wpa2)
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Wifi_SecurityChangedCallback (const char * _key, eARCOMMANDS_WIFI_SECURITY_TYPE _key_type, void *customData);

/**
 * @brief callback used when the command <code>CountryChanged</code> is decoded
 * @param feature The feature controller registred
 * @param selection_mode Type of country selection
 * @param code Country code with ISO 3166 format, empty string means unknown country.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Wifi_CountryChangedCallback (eARCOMMANDS_WIFI_COUNTRY_SELECTION _selection_mode, const char * _code, void *customData);

/**
 * @brief callback used when the command <code>EnvironmentChanged</code> is decoded
 * @param feature The feature controller registred
 * @param environment 1 if it uses outdoor wifi settings, 0 otherwise Type of environment
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Wifi_EnvironmentChangedCallback (eARCOMMANDS_WIFI_ENVIRONMENT _environment, void *customData);

/**
 * @brief callback used when the command <code>RssiChanged</code> is decoded
 * @param feature The feature controller registred
 * @param rssi Rssi on the connected wifi network. Rssi values are generally between -30 and -120dBm. The nearest of 0 is the better.
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Wifi_RssiChangedCallback (int16_t _rssi, void *customData);

/**
 * @brief callback used when the command <code>SupportedCountries</code> is decoded
 * @param feature The feature controller registred
 * @param countries List of country code in ISO 3166 format separated by ";"
 * @param customData customData set by the register
 */
void ARCONTROLLER_FEATURE_Wifi_SupportedCountriesCallback (const char * _countries, void *customData);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Wifi_NewCmdElementScannedItem (ARCONTROLLER_FEATURE_Wifi_t *feature, const char * _ssid, int16_t _rssi, eARCOMMANDS_WIFI_BAND _band, uint8_t _channel, uint8_t _list_flags, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Wifi_NewCmdElementAuthorizedChannel (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCOMMANDS_WIFI_BAND _band, uint8_t _channel, uint8_t _environment, uint8_t _list_flags, int listIndex, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Wifi_NewCmdElementApChannelChanged (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCOMMANDS_WIFI_SELECTION_TYPE _type, eARCOMMANDS_WIFI_BAND _band, uint8_t _channel, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Wifi_NewCmdElementSecurityChanged (ARCONTROLLER_FEATURE_Wifi_t *feature, const char * _key, eARCOMMANDS_WIFI_SECURITY_TYPE _key_type, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Wifi_NewCmdElementCountryChanged (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCOMMANDS_WIFI_COUNTRY_SELECTION _selection_mode, const char * _code, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Wifi_NewCmdElementEnvironmentChanged (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCOMMANDS_WIFI_ENVIRONMENT _environment, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Wifi_NewCmdElementRssiChanged (ARCONTROLLER_FEATURE_Wifi_t *feature, int16_t _rssi, eARCONTROLLER_ERROR *error);

ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Wifi_NewCmdElementSupportedCountries (ARCONTROLLER_FEATURE_Wifi_t *feature, const char * _countries, eARCONTROLLER_ERROR *error);


#endif /* _ARCONTROLLER_FEATURE_PRIVATE_H_ */

// END GENERATED CODE
