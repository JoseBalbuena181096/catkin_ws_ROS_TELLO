/**
 * @mainpage libARCommands Documentation
 *
 * @section ARC_intro_sec Introduction
 *
 * The ARCommands library provides a way to encode/decode a variety of commands
 *
 * @section ARC_gen_sec Generate encoded commands
 *
 * To encode a command, the application must provide a buffer with sufficient
 * free space, and the correct arguments.
 *
 * All generator function use the following name/args scheme:
 *
 * ARCOMMANDS_Generator_GenerateProjectClassCommand (buffer, buffer size,
 * [Command args...])
 *
 * These functions returns an @ref eARCOMMANDS_GENERATOR_ERROR indicating if
 * the generation encountered an error (typically
 * @ref ARCOMMANDS_GENERATOR_ERROR_NOT_ENOUGH_SPACE)
 *
 * These functions are defined in @ref ARCOMMANDS_Generator.h
 *
 * As the library is autogenerated, a specific function is generated for each
 * command, assuring a compile-time type-checking of the arguments.
 *
 * @section ARC_dec_sec Decode encoded commands
 *
 * To decode a command, the application must first register a callback for this
 * command, then actually decode the buffer
 *
 * All the decoder-related functions and types are declared in the
 * @ref ARCOMMANDS_Decoder.h file.
 *
 * @subsection ARC_dec_register_subsec Register decode callbacks
 *
 * Before decoding a command, the application needs to register callbacks for
 * these commands. Each command can have only one callback (if a second one is
 * set, the first one will be removed). Each command has its own callback type.
 *
 * To register a callback for a specific command, use the functions
 * ARCOMMANDS_Decoder_SetProjectClassCommandCallback.
 *
 * As registered callbacks are static, they will persist during the application
 * lifecycle. The typical use case is to have a startup code registering all
 * needed callbacks.
 *
 * @subsection ARC_dec_dec_subsec Decode call
 *
 * To decode a command, symply pass its buffer (and the buffer used length) to
 * the @ref ARCOMMANDS_Decoder_DecodeBuffer function. This function will call
 * the commands callback in its current thread, with the decoded command
 * parameters.
 *
 * The @ref ARCOMMANDS_Decoder_DecodeBuffer function can also return various
 * error codes for bad buffers, or commands without any callback set
 *
 * @section ARC_tostring_sec Debug and toString function
 *
 * As commands are encoded, the binary content of the encoded buffer is not
 * human readable. To allow human debug of the commands, the decoder submodule
 * provides the @ref ARCOMMANDS_Decoder_DescribeBuffer function, acting like a
 * java 'toString' method (except that the string buffer must be passed as an
 * argument).
 *
 * This function can be used either on the sending side (right after encoding,
 * to check if the encoded command is the good one), or on the receiving side
 * (just before decoding, to check all the commands contents, even the ones
 * without callback set)
 *
 * As the @ref ARCOMMANDS_Decoder_DecodeBuffer function, this function might
 * fail if the buffer does not contains a valid command, or if the result
 * string buffer is too small to contain the command description
 *
 */
