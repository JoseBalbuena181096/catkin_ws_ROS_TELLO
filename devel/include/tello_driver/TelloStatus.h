// Generated by gencpp from file tello_driver/TelloStatus.msg
// DO NOT EDIT!


#ifndef TELLO_DRIVER_MESSAGE_TELLOSTATUS_H
#define TELLO_DRIVER_MESSAGE_TELLOSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tello_driver
{
template <class ContainerAllocator>
struct TelloStatus_
{
  typedef TelloStatus_<ContainerAllocator> Type;

  TelloStatus_()
    : height_m(0.0)
    , speed_northing_mps(0.0)
    , speed_easting_mps(0.0)
    , speed_horizontal_mps(0.0)
    , speed_vertical_mps(0.0)
    , flight_time_sec(0.0)
    , imu_state(false)
    , pressure_state(false)
    , down_visual_state(false)
    , power_state(false)
    , battery_state(false)
    , gravity_state(false)
    , wind_state(false)
    , imu_calibration_state(0)
    , battery_percentage(0)
    , drone_fly_time_left_sec(0.0)
    , drone_battery_left_sec(0.0)
    , is_flying(false)
    , is_on_ground(false)
    , is_em_open(false)
    , is_drone_hover(false)
    , is_outage_recording(false)
    , is_battery_low(false)
    , is_battery_lower(false)
    , is_factory_mode(false)
    , fly_mode(0)
    , throw_takeoff_timer_sec(0.0)
    , camera_state(0)
    , electrical_machinery_state(0)
    , front_in(false)
    , front_out(false)
    , front_lsc(false)
    , temperature_height_m(0.0)
    , cmd_roll_ratio(0.0)
    , cmd_pitch_ratio(0.0)
    , cmd_yaw_ratio(0.0)
    , cmd_vspeed_ratio(0.0)
    , cmd_fast_mode(false)  {
    }
  TelloStatus_(const ContainerAllocator& _alloc)
    : height_m(0.0)
    , speed_northing_mps(0.0)
    , speed_easting_mps(0.0)
    , speed_horizontal_mps(0.0)
    , speed_vertical_mps(0.0)
    , flight_time_sec(0.0)
    , imu_state(false)
    , pressure_state(false)
    , down_visual_state(false)
    , power_state(false)
    , battery_state(false)
    , gravity_state(false)
    , wind_state(false)
    , imu_calibration_state(0)
    , battery_percentage(0)
    , drone_fly_time_left_sec(0.0)
    , drone_battery_left_sec(0.0)
    , is_flying(false)
    , is_on_ground(false)
    , is_em_open(false)
    , is_drone_hover(false)
    , is_outage_recording(false)
    , is_battery_low(false)
    , is_battery_lower(false)
    , is_factory_mode(false)
    , fly_mode(0)
    , throw_takeoff_timer_sec(0.0)
    , camera_state(0)
    , electrical_machinery_state(0)
    , front_in(false)
    , front_out(false)
    , front_lsc(false)
    , temperature_height_m(0.0)
    , cmd_roll_ratio(0.0)
    , cmd_pitch_ratio(0.0)
    , cmd_yaw_ratio(0.0)
    , cmd_vspeed_ratio(0.0)
    , cmd_fast_mode(false)  {
  (void)_alloc;
    }



   typedef float _height_m_type;
  _height_m_type height_m;

   typedef float _speed_northing_mps_type;
  _speed_northing_mps_type speed_northing_mps;

   typedef float _speed_easting_mps_type;
  _speed_easting_mps_type speed_easting_mps;

   typedef float _speed_horizontal_mps_type;
  _speed_horizontal_mps_type speed_horizontal_mps;

   typedef float _speed_vertical_mps_type;
  _speed_vertical_mps_type speed_vertical_mps;

   typedef float _flight_time_sec_type;
  _flight_time_sec_type flight_time_sec;

   typedef uint8_t _imu_state_type;
  _imu_state_type imu_state;

   typedef uint8_t _pressure_state_type;
  _pressure_state_type pressure_state;

   typedef uint8_t _down_visual_state_type;
  _down_visual_state_type down_visual_state;

   typedef uint8_t _power_state_type;
  _power_state_type power_state;

   typedef uint8_t _battery_state_type;
  _battery_state_type battery_state;

   typedef uint8_t _gravity_state_type;
  _gravity_state_type gravity_state;

   typedef uint8_t _wind_state_type;
  _wind_state_type wind_state;

   typedef uint8_t _imu_calibration_state_type;
  _imu_calibration_state_type imu_calibration_state;

   typedef uint8_t _battery_percentage_type;
  _battery_percentage_type battery_percentage;

   typedef float _drone_fly_time_left_sec_type;
  _drone_fly_time_left_sec_type drone_fly_time_left_sec;

   typedef float _drone_battery_left_sec_type;
  _drone_battery_left_sec_type drone_battery_left_sec;

   typedef uint8_t _is_flying_type;
  _is_flying_type is_flying;

   typedef uint8_t _is_on_ground_type;
  _is_on_ground_type is_on_ground;

   typedef uint8_t _is_em_open_type;
  _is_em_open_type is_em_open;

   typedef uint8_t _is_drone_hover_type;
  _is_drone_hover_type is_drone_hover;

   typedef uint8_t _is_outage_recording_type;
  _is_outage_recording_type is_outage_recording;

   typedef uint8_t _is_battery_low_type;
  _is_battery_low_type is_battery_low;

   typedef uint8_t _is_battery_lower_type;
  _is_battery_lower_type is_battery_lower;

   typedef uint8_t _is_factory_mode_type;
  _is_factory_mode_type is_factory_mode;

   typedef uint8_t _fly_mode_type;
  _fly_mode_type fly_mode;

   typedef float _throw_takeoff_timer_sec_type;
  _throw_takeoff_timer_sec_type throw_takeoff_timer_sec;

   typedef uint8_t _camera_state_type;
  _camera_state_type camera_state;

   typedef uint8_t _electrical_machinery_state_type;
  _electrical_machinery_state_type electrical_machinery_state;

   typedef uint8_t _front_in_type;
  _front_in_type front_in;

   typedef uint8_t _front_out_type;
  _front_out_type front_out;

   typedef uint8_t _front_lsc_type;
  _front_lsc_type front_lsc;

   typedef float _temperature_height_m_type;
  _temperature_height_m_type temperature_height_m;

   typedef float _cmd_roll_ratio_type;
  _cmd_roll_ratio_type cmd_roll_ratio;

   typedef float _cmd_pitch_ratio_type;
  _cmd_pitch_ratio_type cmd_pitch_ratio;

   typedef float _cmd_yaw_ratio_type;
  _cmd_yaw_ratio_type cmd_yaw_ratio;

   typedef float _cmd_vspeed_ratio_type;
  _cmd_vspeed_ratio_type cmd_vspeed_ratio;

   typedef uint8_t _cmd_fast_mode_type;
  _cmd_fast_mode_type cmd_fast_mode;





  typedef boost::shared_ptr< ::tello_driver::TelloStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tello_driver::TelloStatus_<ContainerAllocator> const> ConstPtr;

}; // struct TelloStatus_

typedef ::tello_driver::TelloStatus_<std::allocator<void> > TelloStatus;

typedef boost::shared_ptr< ::tello_driver::TelloStatus > TelloStatusPtr;
typedef boost::shared_ptr< ::tello_driver::TelloStatus const> TelloStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tello_driver::TelloStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tello_driver::TelloStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tello_driver::TelloStatus_<ContainerAllocator1> & lhs, const ::tello_driver::TelloStatus_<ContainerAllocator2> & rhs)
{
  return lhs.height_m == rhs.height_m &&
    lhs.speed_northing_mps == rhs.speed_northing_mps &&
    lhs.speed_easting_mps == rhs.speed_easting_mps &&
    lhs.speed_horizontal_mps == rhs.speed_horizontal_mps &&
    lhs.speed_vertical_mps == rhs.speed_vertical_mps &&
    lhs.flight_time_sec == rhs.flight_time_sec &&
    lhs.imu_state == rhs.imu_state &&
    lhs.pressure_state == rhs.pressure_state &&
    lhs.down_visual_state == rhs.down_visual_state &&
    lhs.power_state == rhs.power_state &&
    lhs.battery_state == rhs.battery_state &&
    lhs.gravity_state == rhs.gravity_state &&
    lhs.wind_state == rhs.wind_state &&
    lhs.imu_calibration_state == rhs.imu_calibration_state &&
    lhs.battery_percentage == rhs.battery_percentage &&
    lhs.drone_fly_time_left_sec == rhs.drone_fly_time_left_sec &&
    lhs.drone_battery_left_sec == rhs.drone_battery_left_sec &&
    lhs.is_flying == rhs.is_flying &&
    lhs.is_on_ground == rhs.is_on_ground &&
    lhs.is_em_open == rhs.is_em_open &&
    lhs.is_drone_hover == rhs.is_drone_hover &&
    lhs.is_outage_recording == rhs.is_outage_recording &&
    lhs.is_battery_low == rhs.is_battery_low &&
    lhs.is_battery_lower == rhs.is_battery_lower &&
    lhs.is_factory_mode == rhs.is_factory_mode &&
    lhs.fly_mode == rhs.fly_mode &&
    lhs.throw_takeoff_timer_sec == rhs.throw_takeoff_timer_sec &&
    lhs.camera_state == rhs.camera_state &&
    lhs.electrical_machinery_state == rhs.electrical_machinery_state &&
    lhs.front_in == rhs.front_in &&
    lhs.front_out == rhs.front_out &&
    lhs.front_lsc == rhs.front_lsc &&
    lhs.temperature_height_m == rhs.temperature_height_m &&
    lhs.cmd_roll_ratio == rhs.cmd_roll_ratio &&
    lhs.cmd_pitch_ratio == rhs.cmd_pitch_ratio &&
    lhs.cmd_yaw_ratio == rhs.cmd_yaw_ratio &&
    lhs.cmd_vspeed_ratio == rhs.cmd_vspeed_ratio &&
    lhs.cmd_fast_mode == rhs.cmd_fast_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tello_driver::TelloStatus_<ContainerAllocator1> & lhs, const ::tello_driver::TelloStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tello_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tello_driver::TelloStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tello_driver::TelloStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tello_driver::TelloStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tello_driver::TelloStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tello_driver::TelloStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tello_driver::TelloStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tello_driver::TelloStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6d1629583c9b3a337a806afc71e19f7";
  }

  static const char* value(const ::tello_driver::TelloStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6d1629583c9b3a3ULL;
  static const uint64_t static_value2 = 0x37a806afc71e19f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::tello_driver::TelloStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tello_driver/TelloStatus";
  }

  static const char* value(const ::tello_driver::TelloStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tello_driver::TelloStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Non-negative; calibrated to takeoff altitude; auto-calib if falls below takeoff height; inaccurate near ground\n"
"float32 height_m\n"
"\n"
"float32 speed_northing_mps\n"
"float32 speed_easting_mps\n"
"float32 speed_horizontal_mps\n"
"float32 speed_vertical_mps\n"
"\n"
"float32 flight_time_sec\n"
"\n"
"bool imu_state\n"
"bool pressure_state\n"
"bool down_visual_state\n"
"bool power_state\n"
"bool battery_state\n"
"bool gravity_state\n"
"bool wind_state\n"
"\n"
"uint8 imu_calibration_state\n"
"uint8 battery_percentage\n"
"float32 drone_fly_time_left_sec\n"
"float32 drone_battery_left_sec\n"
"\n"
"bool is_flying\n"
"bool is_on_ground\n"
"# is_em_open True in flight, False when landed\n"
"bool is_em_open\n"
"bool is_drone_hover\n"
"bool is_outage_recording\n"
"bool is_battery_low\n"
"bool is_battery_lower\n"
"bool is_factory_mode\n"
"\n"
"# flymode=1: landed; =6: flying\n"
"uint8 fly_mode\n"
"float32 throw_takeoff_timer_sec\n"
"uint8 camera_state\n"
"\n"
"uint8 electrical_machinery_state\n"
"\n"
"bool front_in\n"
"bool front_out\n"
"bool front_lsc\n"
"\n"
"float32 temperature_height_m\n"
"\n"
"float32 cmd_roll_ratio\n"
"float32 cmd_pitch_ratio\n"
"float32 cmd_yaw_ratio\n"
"float32 cmd_vspeed_ratio\n"
"bool cmd_fast_mode\n"
;
  }

  static const char* value(const ::tello_driver::TelloStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tello_driver::TelloStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.height_m);
      stream.next(m.speed_northing_mps);
      stream.next(m.speed_easting_mps);
      stream.next(m.speed_horizontal_mps);
      stream.next(m.speed_vertical_mps);
      stream.next(m.flight_time_sec);
      stream.next(m.imu_state);
      stream.next(m.pressure_state);
      stream.next(m.down_visual_state);
      stream.next(m.power_state);
      stream.next(m.battery_state);
      stream.next(m.gravity_state);
      stream.next(m.wind_state);
      stream.next(m.imu_calibration_state);
      stream.next(m.battery_percentage);
      stream.next(m.drone_fly_time_left_sec);
      stream.next(m.drone_battery_left_sec);
      stream.next(m.is_flying);
      stream.next(m.is_on_ground);
      stream.next(m.is_em_open);
      stream.next(m.is_drone_hover);
      stream.next(m.is_outage_recording);
      stream.next(m.is_battery_low);
      stream.next(m.is_battery_lower);
      stream.next(m.is_factory_mode);
      stream.next(m.fly_mode);
      stream.next(m.throw_takeoff_timer_sec);
      stream.next(m.camera_state);
      stream.next(m.electrical_machinery_state);
      stream.next(m.front_in);
      stream.next(m.front_out);
      stream.next(m.front_lsc);
      stream.next(m.temperature_height_m);
      stream.next(m.cmd_roll_ratio);
      stream.next(m.cmd_pitch_ratio);
      stream.next(m.cmd_yaw_ratio);
      stream.next(m.cmd_vspeed_ratio);
      stream.next(m.cmd_fast_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TelloStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tello_driver::TelloStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tello_driver::TelloStatus_<ContainerAllocator>& v)
  {
    s << indent << "height_m: ";
    Printer<float>::stream(s, indent + "  ", v.height_m);
    s << indent << "speed_northing_mps: ";
    Printer<float>::stream(s, indent + "  ", v.speed_northing_mps);
    s << indent << "speed_easting_mps: ";
    Printer<float>::stream(s, indent + "  ", v.speed_easting_mps);
    s << indent << "speed_horizontal_mps: ";
    Printer<float>::stream(s, indent + "  ", v.speed_horizontal_mps);
    s << indent << "speed_vertical_mps: ";
    Printer<float>::stream(s, indent + "  ", v.speed_vertical_mps);
    s << indent << "flight_time_sec: ";
    Printer<float>::stream(s, indent + "  ", v.flight_time_sec);
    s << indent << "imu_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_state);
    s << indent << "pressure_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pressure_state);
    s << indent << "down_visual_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.down_visual_state);
    s << indent << "power_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power_state);
    s << indent << "battery_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_state);
    s << indent << "gravity_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gravity_state);
    s << indent << "wind_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wind_state);
    s << indent << "imu_calibration_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_calibration_state);
    s << indent << "battery_percentage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_percentage);
    s << indent << "drone_fly_time_left_sec: ";
    Printer<float>::stream(s, indent + "  ", v.drone_fly_time_left_sec);
    s << indent << "drone_battery_left_sec: ";
    Printer<float>::stream(s, indent + "  ", v.drone_battery_left_sec);
    s << indent << "is_flying: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_flying);
    s << indent << "is_on_ground: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_on_ground);
    s << indent << "is_em_open: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_em_open);
    s << indent << "is_drone_hover: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_drone_hover);
    s << indent << "is_outage_recording: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_outage_recording);
    s << indent << "is_battery_low: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_battery_low);
    s << indent << "is_battery_lower: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_battery_lower);
    s << indent << "is_factory_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_factory_mode);
    s << indent << "fly_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fly_mode);
    s << indent << "throw_takeoff_timer_sec: ";
    Printer<float>::stream(s, indent + "  ", v.throw_takeoff_timer_sec);
    s << indent << "camera_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.camera_state);
    s << indent << "electrical_machinery_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.electrical_machinery_state);
    s << indent << "front_in: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_in);
    s << indent << "front_out: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_out);
    s << indent << "front_lsc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_lsc);
    s << indent << "temperature_height_m: ";
    Printer<float>::stream(s, indent + "  ", v.temperature_height_m);
    s << indent << "cmd_roll_ratio: ";
    Printer<float>::stream(s, indent + "  ", v.cmd_roll_ratio);
    s << indent << "cmd_pitch_ratio: ";
    Printer<float>::stream(s, indent + "  ", v.cmd_pitch_ratio);
    s << indent << "cmd_yaw_ratio: ";
    Printer<float>::stream(s, indent + "  ", v.cmd_yaw_ratio);
    s << indent << "cmd_vspeed_ratio: ";
    Printer<float>::stream(s, indent + "  ", v.cmd_vspeed_ratio);
    s << indent << "cmd_fast_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_fast_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TELLO_DRIVER_MESSAGE_TELLOSTATUS_H
